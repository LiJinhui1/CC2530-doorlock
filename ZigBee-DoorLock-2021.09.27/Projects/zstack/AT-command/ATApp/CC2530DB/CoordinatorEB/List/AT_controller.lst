###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Nov/2021  10:54:56
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_controller.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWAD0E.tmp
#        (F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_controller.c
#        -D ZIGBEEPRO -D INTER_PAN -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D
#        HAL_UART_ISR_RX_MAX=100 -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG
#        -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D ZCL_REPORT_CONFIGURING_DEVICE -D
#        ZCL_REPORT_DESTINATION_DEVICE -lC
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List\AT_controller.lst
#    Object file        =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\Obj\AT_controller.r51
#
###############################################################################

F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_controller.c
      1          /*********************************************************************
      2            Filename:       AT_controller.c
      3          
      4            Author:         Yasin Zhang
      5          **********************************************************************/
      6          
      7          /*********************************************************************
      8           * INCLUDES
      9           */
     10          #include "ZComDef.h"
     11          #include "OSAL.h"
     12          #include "ZDApp.h"
     13          #include "bdb_interface.h"
     14          
     15          #include "zcl.h"
     16          #include "zcl_ha.h"
     17          
     18          #include "onboard.h"
     19          
     20          #include "AT_controller.h"
     21          #include "ATApp.h"
     22          #include "AT_uart.h"
     23          #include "AT_printf.h"
     24          
     25          /*********************************************************************
     26          * MACROS
     27          */
     28          
     29          /*********************************************************************
     30          * CONSTANTS
     31          */
     32          
     33          /*********************************************************************
     34          * GLOBAL VARIABLES
     35          */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     36          zclController_EP_List_t *zclController_EP_List = NULL;
   \                     zclController_EP_List:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     37          
     38          /*********************************************************************
     39           * LOCAL VARIABLES
     40           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          static uint8 zclCtrl_TransID = 0;  // This is the unique message ID (counter)
   \                     zclCtrl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     42          
     43          /*********************************************************************
     44           * SIMPLE DESCRIPTOR
     45           */
     46          
     47          // This is the Cluster ID List and should be filled with Application
     48          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     49          const cId_t zclCtrl_InClusterList[] =
   \                     zclCtrl_InClusterList:
   \   000000   0000         DW 0
   \   000002   0300         DW 3
     50          {
     51           ZCL_CLUSTER_ID_GEN_BASIC,
     52           ZCL_CLUSTER_ID_GEN_IDENTIFY,
     53          
     54           // ZCL_CONTROLLER_TODO: Add application specific Input Clusters Here.
     55           //       See zcl.h for Cluster ID definitions
     56          };
     57          #define ZCL_CONTROLLER_MAX_INCLUSTERS   0//(sizeof(zclCtrl_InClusterList) / sizeof(zclCtrl_InClusterList[0]))
     58          
     59          

   \                                 In  segment XDATA_ROM_C, align 1
     60          const cId_t zclCtrl_OutClusterList[] =
   \                     zclCtrl_OutClusterList:
   \   000000   0000         DW 0
     61          {
     62           ZCL_CLUSTER_ID_GEN_BASIC,
     63          
     64           // ZCL_CONTROLLER_TODO: Add application specific Output Clusters Here.
     65           //       See zcl.h for Cluster ID definitions
     66          };
     67          #define ZCL_CONTROLLER_MAX_OUTCLUSTERS  0//(sizeof(zclCtrl_OutClusterList) / sizeof(zclCtrl_OutClusterList[0]))
     68          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     69          SimpleDescriptionFormat_t zclController_SimpleDesc =
   \                     zclController_SimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for zclController_SimpleDesc>`
   \   00000C                REQUIRE __INIT_XDATA_I
     70          {
     71           ZCL_CONTROLLER_ENDPOINT,         //  int Endpoint;
     72           ZCL_HA_PROFILE_ID,               //  uint16 AppProfId;
     73           // ZCL_CONTROLLER_TODO: Replace ZCL_HA_DEVICEID_REMOTE_CONTROL with application specific device ID
     74           ZCL_HA_DEVICEID_REMOTE_CONTROL,  //  uint16 AppDeviceId;
     75           ZCL_DEVICE_VERSION,              //  int   AppDevVer:4;
     76           ZCL_FLAGS,                       //  int   AppFlags:4;
     77           ZCL_CONTROLLER_MAX_INCLUSTERS,   //  byte  AppNumInClusters;
     78           NULL,//(cId_t *)zclCtrl_InClusterList,  //  byte *pAppInClusterList;
     79           ZCL_CONTROLLER_MAX_OUTCLUSTERS,  //  byte  AppNumInClusters;
     80           NULL//(cId_t *)zclCtrl_OutClusterList  //  byte *pAppInClusterList;
     81          };
     82          
     83          /*********************************************************************
     84           * LOCAL FUNCTIONS
     85           */
     86          static void AT_zclCtrl_REpCtrl_CB( afIncomingMSGPacket_t *pkt );
     87          static void AT_ATF_CMD_CB( afIncomingMSGPacket_t *pkt );
     88          static void AT_zclCtrl_REpCtrl_req( afIncomingMSGPacket_t *pkt );
     89          static void AT_zclCtrl_REpCtrl_rsp( afIncomingMSGPacket_t *pkt );
     90          static void AT_ATF_Cmd_req( afIncomingMSGPacket_t *pkt );
     91          static uint8 zclCtrlCalcHdrSize( ZCLCtrlCmd_hdr *hdr );
     92          static uint8* zclCtrlBuildHdr( ZCLCtrlCmd_hdr *hdr, uint8 *pData );
     93          
     94          // Functions to process ZCL Foundation incoming Command/Response messages
     95          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
     96          static void zclController_PrintfAttrData( uint8 dataType, uint8 *attrData );
     97          #endif
     98          #ifdef ZCL_READ
     99          static uint8 zclController_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    100          #endif
    101          #ifdef ZCL_WRITE
    102          static uint8 zclController_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    103          #endif
    104          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    105          static uint8 zclController_ProcessInReadReportCfgRspCmd( zclIncomingMsg_t *pInMsg );
    106          static uint8 zclController_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg );
    107          #endif
    108          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    109          static void zclController_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    110          #endif
    111          static uint8 zclController_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    112          #ifdef ZCL_DISCOVER
    113          static uint8 zclController_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    114          static uint8 zclController_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    115          static uint8 zclController_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    116          #endif
    117          
    118          /*********************************************************************
    119           * @fn          zclController_Init
    120           *
    121           * @brief       Initialize the ZCL controller
    122           *
    123           * @param       uint8 task_id - the application that ZCL messages send to
    124           *
    125           * @return      none
    126           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    127          void AT_zclController_Init( uint8* task_id )
   \                     AT_zclController_Init:
    128          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    129            // This app is part of the Home Automation Profile
    130            bdb_RegisterSimpleDescriptor( &zclController_SimpleDesc );
   \   000009                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000009   7A..         MOV       R2,#zclController_SimpleDesc & 0xff
   \   00000B   7B..         MOV       R3,#(zclController_SimpleDesc >> 8) & 0xff
   \   00000D   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    131          
    132            // Register the Application to receive the unprocessed Foundation command/response messages
    133            zcl_registerForMsg( *task_id );
   \   000010                ; Setup parameters for call to function zcl_registerForMsg
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    134          }
   \   000019                REQUIRE ?Subroutine0
   \   000019                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    135          
    136          /*********************************************************************
    137           * @fn          zclEndpoint_Register
    138           *
    139           * @brief       Register the endPoint in the controller
    140           *
    141           * @param       uint8 endPoint           - the endPoint need to register
    142           *              zclController_EP_CB cbFc - the endPoint's callback function
    143           *
    144           * @return      if register successfule, return true; otherwise return false
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          bool AT_Endpoint_Register( uint8 endPoint, uint8 *epStatus, zclController_EP_CB cbFc )
   \                     AT_Endpoint_Register:
    147          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
    148            zclController_EP_List_t *pLoop;
    149            pLoop = zclController_EP_List;
   \   00000F   90....       MOV       DPTR,#zclController_EP_List
   \   000012   8005         SJMP      ??AT_Endpoint_Register_0
    150            while (pLoop) {
    151              if (endPoint == pLoop->ep) {
    152                break;
    153              }
    154              pLoop = pLoop->next;
   \                     ??AT_Endpoint_Register_1:
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \                     ??AT_Endpoint_Register_0:
   \   000019   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   49           ORL       A,R1
   \   00001F   601F         JZ        ??AT_Endpoint_Register_2
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   E0           MOVX      A,@DPTR
   \   000026   65..         XRL       A,?V2
   \   000028   70EA         JNZ       ??AT_Endpoint_Register_1
    155            }
    156          
    157            // if found, update the endPoint entry
    158            if (pLoop) {
    159              pLoop->ep = endPoint;
   \   00002A   E5..         MOV       A,?V2
   \   00002C   F0           MOVX      @DPTR,A
    160              pLoop->status = epStatus;
   \   00002D   A3           INC       DPTR
   \   00002E   EA           MOV       A,R2
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   EB           MOV       A,R3
   \   000032   F0           MOVX      @DPTR,A
    161              pLoop->CB = cbFc;
   \   000033   8882         MOV       DPL,R0
   \   000035   8983         MOV       DPH,R1
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   EC           MOV       A,R4
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   ED           MOV       A,R5
   \   00003E   8049         SJMP      ??AT_Endpoint_Register_3
    162              return true;
    163            } else {
    164              //not found, add into the List
    165              pLoop = osal_mem_alloc(sizeof(zclController_EP_List_t));
   \                     ??AT_Endpoint_Register_2:
   \   000040                ; Setup parameters for call to function osal_mem_alloc
   \   000040   7A07         MOV       R2,#0x7
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   A8..         MOV       R0,?V4
   \   00004D   A9..         MOV       R1,?V5
    166              if (pLoop) {
   \   00004F   EA           MOV       A,R2
   \   000050   49           ORL       A,R1
   \   000051   603B         JZ        ??AT_Endpoint_Register_4
    167                pLoop->ep   = endPoint;
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   E5..         MOV       A,?V2
   \   000059   F0           MOVX      @DPTR,A
    168                pLoop->status = epStatus;
   \   00005A   A3           INC       DPTR
   \   00005B   EE           MOV       A,R6
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   EF           MOV       A,R7
   \   00005F   F0           MOVX      @DPTR,A
    169                pLoop->CB   = cbFc;
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E5..         MOV       A,?V0
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   E5..         MOV       A,?V1
   \   00006D   F0           MOVX      @DPTR,A
    170                pLoop->next = zclController_EP_List;
   \   00006E   90....       MOV       DPTR,#zclController_EP_List
   \   000071   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000074   8882         MOV       DPL,R0
   \   000076   8983         MOV       DPH,R1
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   EA           MOV       A,R2
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   EB           MOV       A,R3
   \   000081   F0           MOVX      @DPTR,A
    171                zclController_EP_List = pLoop;
   \   000082   90....       MOV       DPTR,#zclController_EP_List
   \   000085   E8           MOV       A,R0
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   E9           MOV       A,R1
   \                     ??AT_Endpoint_Register_3:
   \   000089   F0           MOVX      @DPTR,A
    172                return true;
   \   00008A   7901         MOV       R1,#0x1
   \   00008C   8002         SJMP      ??AT_Endpoint_Register_5
    173              } else {
    174                return false;
   \                     ??AT_Endpoint_Register_4:
   \   00008E   7900         MOV       R1,#0x0
    175              }
    176            }
   \                     ??AT_Endpoint_Register_5:
   \   000090                REQUIRE ?Subroutine1
   \   000090                ; // Fall through to label ?Subroutine1
    177          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    178          
    179          /*********************************************************************
    180           * @fn          zclEndpoint_Controller
    181           *
    182           * @brief       Control the ZCL endpoint
    183           *
    184           * @param       uint8 endPoint - the controlled endPoint
    185           *              bool isEnable  - the status of the Endpoint
    186           *
    187           * @return      none
    188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          bool AT_Endpoint_Controller( uint8 endPoint, bool isEnable )
   \                     AT_Endpoint_Controller:
    190          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    191            zclController_EP_List_t *pLoop;
    192            pLoop = zclController_EP_List;
   \   000007   90....       MOV       DPTR,#zclController_EP_List
   \   00000A   8005         SJMP      ??AT_Endpoint_Controller_0
    193            while (pLoop) {
    194              if (endPoint == pLoop->ep) {
    195                break;
    196              }
    197              pLoop = pLoop->next;
   \                     ??AT_Endpoint_Controller_1:
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \                     ??AT_Endpoint_Controller_0:
   \   000011   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000014   8882         MOV       DPL,R0
   \   000016   F583         MOV       DPH,A
   \   000018   E582         MOV       A,DPL
   \   00001A   4583         ORL       A,DPH
   \   00001C   6017         JZ        ??AT_Endpoint_Controller_2
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6F           XRL       A,R7
   \   000020   70EA         JNZ       ??AT_Endpoint_Controller_1
    198            }
    199          
    200            // if found, call the endPoint's callback function
    201            if (pLoop) {
    202              pLoop->CB(isEnable);
   \   000022                ; Setup parameters for indirect call
   \   000022   EA           MOV       A,R2
   \   000023   F9           MOV       R1,A
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    203            } else {
   \                     ??CrossCallReturnLabel_128:
   \   00002A   F583         MOV       DPH,A
   \   00002C   8882         MOV       DPL,R0
   \   00002E   12....       LCALL     ?CALL_IND
    204              return false;
    205            }
    206            return true;
   \   000031   7901         MOV       R1,#0x1
   \   000033   8002         SJMP      ??AT_Endpoint_Controller_3
   \                     ??AT_Endpoint_Controller_2:
   \   000035   7900         MOV       R1,#0x0
   \                     ??AT_Endpoint_Controller_3:
   \   000037   02....       LJMP      ?Subroutine0 & 0xFFFF
    207          }
    208          
    209          /******************************************************************************
    210           *
    211           *  Functions for processing application control incoming Command/Response messages
    212           *
    213           *****************************************************************************/
    214          /*****************************************************************************
    215          * @fn      ATApp_MessageMSGCB
    216          *
    217          * @brief   processing application control incoming Command/Response messages
    218          *
    219          * @param   pkt - ZCL control incoming message
    220          *
    221          * @return  None
    222          *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void ATApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     ATApp_MessageMSGCB:
    224          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    225          
    226            switch ( pkt->clusterId )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V1,A
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for ATApp_MessageMSGCB>_0`:
   \   000019   0020         DW        8192
   \   00001B   01           DB        1
   \   00001C   ....         DW        ??ATApp_MessageMSGCB_0
   \   00001E   ....         DW        ??ATApp_MessageMSGCB_1
   \   000020   ....         DW        ??ATApp_MessageMSGCB_2
    227            {
    228              case ATApp_GENERIC_CLUSTER:
    229                AT_zclCtrl_REpCtrl_CB(pkt);
   \                     ??ATApp_MessageMSGCB_1:
   \   000022   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000025   6401         XRL       A,#0x1
   \   000027   7005         JNZ       ??ATApp_MessageMSGCB_3
   \   000029                ; Setup parameters for call to function AT_zclCtrl_REpCtrl_req
   \   000029   12....       LCALL     `??AT_zclCtrl_REpCtrl_req::?relay`; Banked call to: AT_zclCtrl_REpCtrl_req
   \   00002C   800F         SJMP      ??ATApp_MessageMSGCB_0
   \                     ??ATApp_MessageMSGCB_3:
   \   00002E                ; Setup parameters for call to function AT_zclCtrl_REpCtrl_rsp
   \   00002E   12....       LCALL     `??AT_zclCtrl_REpCtrl_rsp::?relay`; Banked call to: AT_zclCtrl_REpCtrl_rsp
   \   000031   800A         SJMP      ??ATApp_MessageMSGCB_0
    230                break;
    231          
    232              case RESET_FACTORY_DEFAULT_CLUSTER:
    233                AT_ATF_CMD_CB(pkt);
   \                     ??ATApp_MessageMSGCB_2:
   \   000033   12....       LCALL     ?Subroutine24 & 0xFFFF
    234                break;
    235          
    236              default:
    237                break;
    238            }
   \                     ??CrossCallReturnLabel_37:
   \   000036   6403         XRL       A,#0x3
   \   000038   7003         JNZ       ??ATApp_MessageMSGCB_0
   \   00003A                ; Setup parameters for call to function bdb_resetLocalAction
   \   00003A   12....       LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
    239          }
   \                     ??ATApp_MessageMSGCB_0:
   \   00003D                REQUIRE ?Subroutine2
   \   00003D                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EA           MOV       A,R2
   \   000001   2422         ADD       A,#0x22
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    240          
    241          /*****************************************************************************
    242          * @fn      AT_zclCtrl_REpCtrl_CB
    243          *
    244          * @brief   processing remote endpoint control incoming messages
    245          *
    246          * @param   pkt - incoming message
    247          *
    248          * @return  None
    249          *****************************************************************************/
    250          void AT_zclCtrl_REpCtrl_CB( afIncomingMSGPacket_t *pkt )
    251          {
    252            uint8 cmdID = pkt->cmd.Data[0];
    253            if (cmdID == ZCL_EPCtrl_Cmd_req) {
    254              AT_zclCtrl_REpCtrl_req(pkt);
    255            } else {
    256              AT_zclCtrl_REpCtrl_rsp(pkt);
    257            }
    258          }
    259          
    260          /*****************************************************************************
    261          * @fn      AT_ATF_CMD_CB
    262          *
    263          * @brief   processing remote ATF command messages
    264          *
    265          * @param   pkt - incoming message
    266          *
    267          * @return  None
    268          *****************************************************************************/
    269          void AT_ATF_CMD_CB( afIncomingMSGPacket_t *pkt )
    270          {
    271            uint8 cmdID = pkt->cmd.Data[0];
    272            if (cmdID == ATF_Cmd_req) {
    273              AT_ATF_Cmd_req(pkt);
    274            }
    275          }
    276          
    277          /*****************************************************************************
    278          * @fn      AT_zclCtrl_REpCtrl_req
    279          *
    280          * @brief   processing remote endpoint control incoming request messages
    281          *
    282          * @param   pkt - incoming message
    283          *
    284          * @return  None
    285          *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void AT_zclCtrl_REpCtrl_req( afIncomingMSGPacket_t *pkt )
   \                     AT_zclCtrl_REpCtrl_req:
    287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    288            uint8 state;
    289            EPCtrlCmd_t *epCtrlCmd = (EPCtrlCmd_t*) &(pkt->cmd.Data[1]);
   \   000009   EA           MOV       A,R2
   \   00000A   2422         ADD       A,#0x22
   \   00000C   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   2401         ADD       A,#0x1
   \   000012   FE           MOV       R6,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   3400         ADDC      A,#0x0
   \   000017   FF           MOV       R7,A
    290            EPCtrlCmd_rsp *epCtrlCmd_rsp = (EPCtrlCmd_rsp*) osal_mem_alloc(sizeof(EPCtrlCmd_rsp));
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL     ?Subroutine28 & 0xFFFF
    291          
    292            uint8 endPoint = epCtrlCmd->ep;
   \                     ??CrossCallReturnLabel_101:
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
    293            uint8 isEnable = epCtrlCmd->isEnable;
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F8           MOV       R0,A
    294            if (isEnable != 0) isEnable = 1;
   \   000024   6002         JZ        ??AT_zclCtrl_REpCtrl_req_0
   \   000026   7801         MOV       R0,#0x1
    295          
    296            epCtrlCmd_rsp->ep = endPoint;
   \                     ??AT_zclCtrl_REpCtrl_req_0:
   \   000028   E9           MOV       A,R1
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   F0           MOVX      @DPTR,A
    297            if (isEnable == 0 || isEnable == 1) {
   \   00002E   A3           INC       DPTR
   \   00002F   E8           MOV       A,R0
   \   000030   6009         JZ        ??AT_zclCtrl_REpCtrl_req_1
   \   000032   7401         MOV       A,#0x1
   \   000034   68           XRL       A,R0
   \   000035   7007         JNZ       ??AT_zclCtrl_REpCtrl_req_2
    298              if (isEnable) {
    299                epCtrlCmd_rsp->status = EndpointEnabled;
   \   000037   7401         MOV       A,#0x1
   \   000039   8005         SJMP      ??AT_zclCtrl_REpCtrl_req_3
    300              } else {
    301                epCtrlCmd_rsp->status = EndpointDisabled;
   \                     ??AT_zclCtrl_REpCtrl_req_1:
   \   00003B   E4           CLR       A
   \   00003C   8002         SJMP      ??AT_zclCtrl_REpCtrl_req_3
    302              }
    303            } else {
    304              epCtrlCmd_rsp->status = EndpointUnknown;
   \                     ??AT_zclCtrl_REpCtrl_req_2:
   \   00003E   7402         MOV       A,#0x2
   \                     ??AT_zclCtrl_REpCtrl_req_3:
   \   000040   F0           MOVX      @DPTR,A
    305            }
    306          
    307            state = AT_SendEPCtrl_rsp( ATApp_ENDPOINT, &(pkt->srcAddr),
    308                                      ATApp_GENERIC_CLUSTER, epCtrlCmd_rsp );
   \   000041                ; Setup parameters for call to function AT_SendEPCtrl_rsp
   \   000041   78..         MOV       R0,#?V2
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7C00         MOV       R4,#0x0
   \   000048   7D20         MOV       R5,#0x20
   \   00004A   E5..         MOV       A,?V0
   \   00004C   2406         ADD       A,#0x6
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   35..         ADDC      A,?V1
   \   000052   FB           MOV       R3,A
   \   000053   7996         MOV       R1,#-0x6a
   \   000055   12....       LCALL     `??AT_SendEPCtrl_rsp::?relay`; Banked call to: AT_SendEPCtrl_rsp
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   E9           MOV       A,R1
   \   00005E   FE           MOV       R6,A
    309            osal_mem_free ( epCtrlCmd_rsp );
   \   00005F                ; Setup parameters for call to function osal_mem_free
   \   00005F   AA..         MOV       R2,?V2
   \   000061   AB..         MOV       R3,?V3
   \   000063   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    310            if(state != afStatus_SUCCESS) AT_ERROR(state);
   \   000066   EE           MOV       A,R6
   \   000067   6006         JZ        ??AT_zclCtrl_REpCtrl_req_4
   \   000069                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000069   7A01         MOV       R2,#0x1
   \   00006B   F9           MOV       R1,A
   \   00006C   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
    311          }
   \                     ??AT_zclCtrl_REpCtrl_req_4:
   \   00006F   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   7A02         MOV       R2,#0x2
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET
    312          
    313          /*****************************************************************************
    314          * @fn      AT_zclCtrl_REpCtrl_rsp
    315          *
    316          * @brief   processing remote endpoint control incoming response messages
    317          *
    318          * @param   pkt - incoming message
    319          *
    320          * @return  None
    321          *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          void AT_zclCtrl_REpCtrl_rsp( afIncomingMSGPacket_t *pkt )
   \                     AT_zclCtrl_REpCtrl_rsp:
    323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    324            EPCtrlCmd_rsp *epCtrlCmd_rsp = (EPCtrlCmd_rsp*) &(pkt->cmd.Data[1]);
   \   00000A   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   2401         ADD       A,#0x1
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   3400         ADDC      A,#0x0
   \   000015   8882         MOV       DPL,R0
   \   000017   F583         MOV       DPH,A
    325          
    326            uint8 ep     = epCtrlCmd_rsp->ep;
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V0,A
    327            uint8 status = epCtrlCmd_rsp->status;
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V1,A
    328          
    329            uint8 str[3];
    330            AT_NEW_LINE();
   \   000020                ; Setup parameters for call to function AT_Uart0_Send
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000026   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000028   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    331            AT_RESP("REMOTE RESPONSE:", 16);
   \   00002B                ; Setup parameters for call to function AT_Uart0_Send
   \   00002B   7C10         MOV       R4,#0x10
   \   00002D   7D00         MOV       R5,#0x0
   \   00002F   7A..         MOV       R2,#`?<Constant "REMOTE RESPONSE:">` & 0xff
   \   000031   7B..         MOV       R3,#(`?<Constant "REMOTE RESPONSE:">` >> 8) & 0xff
   \   000033   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    332            if (status == EndpointEnabled) {
   \   000036   7401         MOV       A,#0x1
   \   000038   65..         XRL       A,?V1
   \   00003A   7015         JNZ       ??AT_zclCtrl_REpCtrl_rsp_0
    333              AT_NEW_LINE();
   \   00003C                ; Setup parameters for call to function AT_Uart0_Send
   \   00003C   7C02         MOV       R4,#0x2
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000042   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000044   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    334              AT_RESP("ENABLED:", sizeof("ENABLED:")-1);
   \   000047                ; Setup parameters for call to function AT_Uart0_Send
   \   000047   7C08         MOV       R4,#0x8
   \   000049   7D00         MOV       R5,#0x0
   \   00004B   7A..         MOV       R2,#`?<Constant "ENABLED:">` & 0xff
   \   00004D   7B..         MOV       R3,#(`?<Constant "ENABLED:">` >> 8) & 0xff
   \   00004F   8017         SJMP      ??AT_zclCtrl_REpCtrl_rsp_1
    335              AT_Int8toChar(ep, str);
    336              AT_RESP(str, 2);
    337              AT_NEW_LINE();
    338            } else if (status == EndpointDisabled) {
   \                     ??AT_zclCtrl_REpCtrl_rsp_0:
   \   000051   E5..         MOV       A,?V1
   \   000053   7021         JNZ       ??AT_zclCtrl_REpCtrl_rsp_2
    339              AT_NEW_LINE();
   \   000055                ; Setup parameters for call to function AT_Uart0_Send
   \   000055   7C02         MOV       R4,#0x2
   \   000057   7D00         MOV       R5,#0x0
   \   000059   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00005B   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00005D   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    340              AT_RESP("DISABLED:", sizeof("DISABLED:")-1);
   \   000060                ; Setup parameters for call to function AT_Uart0_Send
   \   000060   7C09         MOV       R4,#0x9
   \   000062   7D00         MOV       R5,#0x0
   \   000064   7A..         MOV       R2,#`?<Constant "DISABLED:">` & 0xff
   \   000066   7B..         MOV       R3,#(`?<Constant "DISABLED:">` >> 8) & 0xff
   \                     ??AT_zclCtrl_REpCtrl_rsp_1:
   \   000068   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    341              AT_Int8toChar(ep, str);
   \   00006B                ; Setup parameters for call to function AT_Int8toChar
   \   00006B   AA..         MOV       R2,?XSP + 0
   \   00006D   AB..         MOV       R3,?XSP + 1
   \   00006F   A9..         MOV       R1,?V0
   \   000071   12....       LCALL     ?Subroutine55 & 0xFFFF
    342              AT_RESP(str, 2);
    343              AT_NEW_LINE();
    344            } else if (status == EndpointUnknown) {
   \                     ??CrossCallReturnLabel_99:
   \   000074   8019         SJMP      ??AT_zclCtrl_REpCtrl_rsp_3
   \                     ??AT_zclCtrl_REpCtrl_rsp_2:
   \   000076   7402         MOV       A,#0x2
   \   000078   65..         XRL       A,?V1
   \   00007A   7016         JNZ       ??CrossCallReturnLabel_54
    345              AT_NEW_LINE();
   \   00007C                ; Setup parameters for call to function AT_Uart0_Send
   \   00007C   7C02         MOV       R4,#0x2
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000082   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000084   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    346              AT_RESP("UNKNOWNEP ERROR", sizeof("UNKNOWNEP ERROR")-1);
   \   000087                ; Setup parameters for call to function AT_Uart0_Send
   \   000087   7C0F         MOV       R4,#0xf
   \   000089   7D00         MOV       R5,#0x0
   \   00008B   7A..         MOV       R2,#`?<Constant "UNKNOWNEP ERROR">` & 0xff
   \   00008D   7B..         MOV       R3,#(`?<Constant "UNKNOWNEP ERROR">` >> 8) & 0xff
    347              AT_NEW_LINE();
    348            }
   \                     ??AT_zclCtrl_REpCtrl_rsp_3:
   \   00008F   12....       LCALL     ?Subroutine33 & 0xFFFF
    349            AT_OK();
   \                     ??CrossCallReturnLabel_54:
   \   000092                ; Setup parameters for call to function AT_Uart0_Send
   \   000092   7C06         MOV       R4,#0x6
   \   000094   7D00         MOV       R5,#0x0
   \   000096   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000098   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00009A   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    350          }
   \   00009D   7403         MOV       A,#0x3
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A2   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000005   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000007   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C02         MOV       R4,#0x2
   \   000005   7D00         MOV       R5,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     `??AT_Int8toChar::?relay`; Banked call to: AT_Int8toChar
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C02         MOV       R4,#0x2
   \   000005   7D00         MOV       R5,#0x0
   \   000007   AA..         MOV       R2,?XSP + 0
   \   000009   AB..         MOV       R3,?XSP + 1
   \   00000B   22           RET
    351          
    352          /*****************************************************************************
    353          * @fn      AT_ATF_Cmd_req
    354          *
    355          * @brief   processing remote ATF command incoming request messages
    356          *
    357          * @param   pkt - incoming message
    358          *
    359          * @return  None
    360          *****************************************************************************/
    361          void AT_ATF_Cmd_req( afIncomingMSGPacket_t *pkt )
    362          {
    363            // AT_clear_AT_SYSTEM_NVs(); if Application use NV, we need to define this function
    364            bdb_resetLocalAction();
    365          }
    366          
    367          /*********************************************************************
    368           * @fn      zclCtrlCalcHdrSize
    369           *
    370           * @brief   Calculate the number of bytes needed for an outgoing
    371           *          ZCL header.
    372           *
    373           * @param   hdr - outgoing header information
    374           *
    375           * @return  returns the number of bytes needed
    376           ***********************************************************************/
    377          static uint8 zclCtrlCalcHdrSize( ZCLCtrlCmd_hdr *hdr )
    378          {
    379            uint8 needed = sizeof(uint8);
    380          
    381            return needed;
    382          }
    383          
    384          /*********************************************************************
    385           * @fn      zclCtrlBuildHdr
    386           *
    387           * @brief   Build header of the ZCL format
    388           *
    389           * @param   hdr - outgoing header information
    390           * @param   pData - outgoing header space
    391           *
    392           * @return  pointer past the header
    393           ***********************************************************************/
    394          static uint8* zclCtrlBuildHdr( ZCLCtrlCmd_hdr *hdr, uint8 *pData )
    395          {
    396            // Add the command ID
    397            *pData++ = hdr->cmd;
    398          
    399            // Should point to the frame payload
    400            return ( pData );
    401          }
    402          
    403          /******************************************************************************
    404           * @fn      AT_SendCmd
    405           *
    406           * @brief   Used to send zcl control Command messages.
    407           *
    408           * @param   srcEp - source endpoint
    409           * @param   destAddr - destination address
    410           * @param   clusterID - cluster ID
    411           * @param   cmd - command ID
    412           * @param   cmdFormatLen - length of the command to be sent
    413           * @param   cmdFormat - command to be sent
    414           *
    415           * @return  ZCL_CTRL_SUCCESS
    416           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          uint8 AT_SendCmd( uint8 srcEP, afAddrType_t *destAddr,
   \                     AT_SendCmd:
    418                                     uint16 clusterID, uint8 cmd,
    419                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V12,R2
   \   000007   8B..         MOV       ?V13,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    421            endPointDesc_t *epDesc;
    422            ZCLCtrlCmd_hdr hdr;
    423            uint8 *msgBuf;
    424            uint16 msgLen;
    425            uint8 *pBuf;
    426            uint8 status;
    427          
    428            epDesc = afFindEndPointDesc( srcEP );
   \   00000D                ; Setup parameters for call to function afFindEndPointDesc
   \   00000D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV       ?V10,R2
   \   000012   8B..         MOV       ?V11,R3
    429            if ( epDesc == NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7005         JNZ       ??AT_SendCmd_0
    430            {
    431             return ( ZCL_CTRLCmd_ParaError ); // EMBEDDED RETURN
   \   000018   7902         MOV       R1,#0x2
   \   00001A   02....       LJMP      ??AT_SendCmd_1 & 0xFFFF
    432            }
   \                     ??AT_SendCmd_0:
   \   00001D   7417         MOV       A,#0x17
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    433          
    434            // build hdr
    435            hdr.cmd = cmd;
    436          
    437            // calculate the buffer size
    438            msgLen = zclCtrlCalcHdrSize( &hdr );
    439            msgLen += cmdFormatLen;
   \                     ??CrossCallReturnLabel_109:
   \   000025   E5..         MOV       A,?V8
   \   000027   2401         ADD       A,#0x1
   \   000029   FE           MOV       R6,A
   \   00002A   E4           CLR       A
   \   00002B   35..         ADDC      A,?V9
   \   00002D   FF           MOV       R7,A
    440          
    441            // allocate the buffer needed
    442            msgBuf = osal_mem_alloc(msgLen);
   \   00002E                ; Setup parameters for call to function osal_mem_alloc
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000035   8A..         MOV       ?V0,R2
   \   000037   8B..         MOV       ?V1,R3
    443            if ( msgBuf != NULL ) {
   \   000039   EA           MOV       A,R2
   \   00003A   4B           ORL       A,R3
   \   00003B   6073         JZ        ??AT_SendCmd_2
    444              // fill in the ZCL Header
    445              pBuf = zclCtrlBuildHdr(&hdr, msgBuf);
   \   00003D   7416         MOV       A,#0x16
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   E0           MOVX      A,@DPTR
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   AA82         MOV       R2,DPL
   \   00004B   AB83         MOV       R3,DPH
    446          
    447              // Fill in the command frame
    448              osal_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   7419         MOV       A,#0x19
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V4,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F5..         MOV       ?V5,A
   \   000059   75..00       MOV       ?V6,#0x0
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000061   AC..         MOV       R4,?V8
   \   000063   AD..         MOV       R5,?V9
   \   000065   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000068   7403         MOV       A,#0x3
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
    449          
    450              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
    451                                    &zclCtrl_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \   00006D                ; Setup parameters for call to function AF_DataRequest
   \   00006D   75..1E       MOV       ?V4,#0x1e
   \   000070   78..         MOV       R0,#?V4
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   75....       MOV       ?V4,#zclCtrl_TransID & 0xff
   \   000078   75....       MOV       ?V5,#(zclCtrl_TransID >> 8) & 0xff
   \   00007B   78..         MOV       R0,#?V4
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   8E..         MOV       ?V4,R6
   \   000087   8F..         MOV       ?V5,R7
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   78..         MOV       R0,#?V2
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   7900         MOV       R1,#0x0
   \   000095   AC..         MOV       R4,?V10
   \   000097   AD..         MOV       R5,?V11
   \   000099   AA..         MOV       R2,?V12
   \   00009B   AB..         MOV       R3,?V13
   \   00009D   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000A0   7409         MOV       A,#0x9
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV       A,R1
   \   0000A6   FE           MOV       R6,A
    452              osal_mem_free ( msgBuf );
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   AA..         MOV       R2,?V0
   \   0000A9   AB..         MOV       R3,?V1
   \   0000AB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000AE   8002         SJMP      ??AT_SendCmd_3
    453            } else {
    454              status = ZCL_CTRLCmd_MemError;
   \                     ??AT_SendCmd_2:
   \   0000B0   7E01         MOV       R6,#0x1
    455            }
    456          
    457            return status;
   \                     ??AT_SendCmd_3:
   \   0000B2   EE           MOV       A,R6
   \   0000B3   F9           MOV       R1,A
   \                     ??AT_SendCmd_1:
   \   0000B4   02....       LJMP      ??Subroutine59_0 & 0xFFFF
    458          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    459          
    460          /*****************************************************************************
    461           * @fn      AT_SendEPCtrl
    462           *
    463           * @brief   Send remote endPoint control command
    464           *
    465           * @param   srcEP - Application's endpoint
    466           * @param   dstAddr - destination address
    467           * @param   clusterID - cluster ID
    468           * @param   epCtrlCmd - endPoint control command to be sent
    469           *
    470           * @return  status
    471           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          uint8 AT_SendEPCtrl(uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, EPCtrlCmd_t *epCtrlCmd)
   \                     AT_SendEPCtrl:
    473          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine29 & 0xFFFF
    474            uint16 dataLen;
    475            uint8 *buf;
    476            uint8 *pBuf;
    477            uint8 status;
    478          
    479            dataLen = sizeof(EPCtrlCmd_t);
    480          
    481            buf = osal_mem_alloc( dataLen );
    482            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_42:
   \   000008   603B         JZ        ??AT_SendEPCtrl_0
   \   00000A   7410         MOV       A,#0x10
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine12 & 0xFFFF
    483            {
    484              // Load the buffer - serially
    485              pBuf = buf;
    486              *pBuf++ = epCtrlCmd->ep;
    487              *pBuf   = epCtrlCmd->isEnable;
    488          
    489              status = AT_SendCmd( srcEP, dstAddr, clusterID,
    490                                        ZCL_EPCtrl_Cmd_req, dataLen, buf );
   \                     ??CrossCallReturnLabel_10:
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   75..02       MOV       ?V6,#0x2
   \   000018   75..00       MOV       ?V7,#0x0
   \   00001B   78..         MOV       R0,#?V6
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..01       MOV       ?V3,#0x1
   \   000023   78..         MOV       R0,#?V3
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000028   AC..         MOV       R4,?V0
   \   00002A   AD..         MOV       R5,?V1
   \   00002C   EE           MOV       A,R6
   \   00002D   FA           MOV       R2,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FB           MOV       R3,A
   \   000030   A9..         MOV       R1,?V2
   \   000032   12....       LCALL     `??AT_SendCmd::?relay`; Banked call to: AT_SendCmd
   \   000035   7405         MOV       A,#0x5
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   E9           MOV       A,R1
   \   00003B   FE           MOV       R6,A
    491              osal_mem_free( buf );
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   AA..         MOV       R2,?V4
   \   00003E   AB..         MOV       R3,?V5
   \   000040   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000043   8002         SJMP      ??AT_SendEPCtrl_1
    492            }
    493            else
    494            {
    495              status = ZCL_CTRLCmd_MemError;
   \                     ??AT_SendEPCtrl_0:
   \   000045   7E01         MOV       R6,#0x1
    496            }
    497          
    498            return ( status );
   \                     ??AT_SendEPCtrl_1:
   \   000047                REQUIRE ?Subroutine4
   \   000047                ; // Fall through to label ?Subroutine4
    499          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002                REQUIRE ??Subroutine57_0
   \   000002                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   89..         MOV       ?V2,R1
   \   000002   EA           MOV       A,R2
   \   000003   FE           MOV       R6,A
   \   000004   EB           MOV       A,R3
   \   000005   FF           MOV       R7,A
   \   000006   8C..         MOV       ?V0,R4
   \   000008   8D..         MOV       ?V1,R5
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A02         MOV       R2,#0x2
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   8A..         MOV       ?V4,R2
   \   000013   8B..         MOV       ?V5,R3
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   8882         MOV       DPL,R0
   \   000011   8983         MOV       DPH,R1
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B                ; Setup parameters for call to function AT_SendCmd
   \   00001B                ; Setup parameters for call to function AT_SendCmd
   \   00001B   78..         MOV       R0,#?V4
   \   00001D   22           RET
    500          
    501          /*****************************************************************************
    502           * @fn      AT_SendEPCtrl_rsp
    503           *
    504           * @brief   Send remote endPoint control command
    505           *
    506           * @param   srcEP - Application's endpoint
    507           * @param   dstAddr - destination address
    508           * @param   clusterID - cluster ID
    509           * @param   epCtrlCmd - endPoint control command to be sent
    510           *
    511           * @return  status
    512           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          uint8 AT_SendEPCtrl_rsp( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, EPCtrlCmd_rsp *epCtrlCmd_rsp )
   \                     AT_SendEPCtrl_rsp:
    514          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine29 & 0xFFFF
    515            uint16 dataLen;
    516            uint8 *buf;
    517            uint8 *pBuf;
    518            uint8 status;
    519          
    520            dataLen = sizeof(EPCtrlCmd_rsp);
    521          
    522            buf = osal_mem_alloc( dataLen );
    523            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_43:
   \   000008   603B         JZ        ??AT_SendEPCtrl_rsp_0
   \   00000A   7410         MOV       A,#0x10
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine12 & 0xFFFF
    524            {
    525              // Load the buffer - serially
    526              pBuf = buf;
    527              *pBuf++ = epCtrlCmd_rsp->ep;
    528              *pBuf   = epCtrlCmd_rsp->status;
    529          
    530              status = AT_SendCmd( srcEP, dstAddr, clusterID,
    531                                        ZCL_EPCtrl_Cmd_rsp, dataLen, buf );
   \                     ??CrossCallReturnLabel_11:
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   75..02       MOV       ?V6,#0x2
   \   000018   75..00       MOV       ?V7,#0x0
   \   00001B   78..         MOV       R0,#?V6
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV       ?V3,#0x2
   \   000023   78..         MOV       R0,#?V3
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000028   AC..         MOV       R4,?V0
   \   00002A   AD..         MOV       R5,?V1
   \   00002C   EE           MOV       A,R6
   \   00002D   FA           MOV       R2,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FB           MOV       R3,A
   \   000030   A9..         MOV       R1,?V2
   \   000032   12....       LCALL     `??AT_SendCmd::?relay`; Banked call to: AT_SendCmd
   \   000035   7405         MOV       A,#0x5
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   E9           MOV       A,R1
   \   00003B   FE           MOV       R6,A
    532              osal_mem_free( buf );
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   AA..         MOV       R2,?V4
   \   00003E   AB..         MOV       R3,?V5
   \   000040   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000043   8002         SJMP      ??AT_SendEPCtrl_rsp_1
    533            }
    534            else
    535            {
    536              status = ZCL_CTRLCmd_MemError;
   \                     ??AT_SendEPCtrl_rsp_0:
   \   000045   7E01         MOV       R6,#0x1
    537            }
    538          
    539            return ( status );
   \                     ??AT_SendEPCtrl_rsp_1:
   \   000047   80..         SJMP      ?Subroutine4
    540          }
    541          
    542          /******************************************************************************
    543           *
    544           *  Functions for processing ZCL Foundation incoming Command/Response messages
    545           *
    546           *****************************************************************************/
    547          
    548          /*********************************************************************
    549           * @fn      AT_zclController_ProcessIncomingMsg
    550           *
    551           * @brief   Process ZCL Foundation incoming message
    552           *
    553           * @param   pInMsg - pointer to the received message
    554           *
    555           * @return  none
    556           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    557          void AT_zclController_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     AT_zclController_ProcessIncomingMsg:
    558          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
    559            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   88..         MOV       ?V0,R0
   \   00000D   F5..         MOV       ?V1,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   14           DEC       A
   \   00001C   6031         JZ        ??AT_zclController_ProcessIncomingMsg_0
   \   00001E   24FD         ADD       A,#-0x3
   \   000020   6033         JZ        ??AT_zclController_ProcessIncomingMsg_1
   \   000022   24FD         ADD       A,#-0x3
   \   000024   6035         JZ        ??AT_zclController_ProcessIncomingMsg_2
   \   000026   24FE         ADD       A,#-0x2
   \   000028   6037         JZ        ??AT_zclController_ProcessIncomingMsg_3
   \   00002A   14           DEC       A
   \   00002B   603A         JZ        ??AT_zclController_ProcessIncomingMsg_4
   \   00002D   14           DEC       A
   \   00002E   603D         JZ        ??AT_zclController_ProcessIncomingMsg_5
   \   000030   24FE         ADD       A,#-0x2
   \   000032   7003         JNZ       $+5
   \   000034   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_6 & 0xFFFF
   \   000037   24FB         ADD       A,#-0x5
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_7 & 0xFFFF
   \   00003E   24FE         ADD       A,#-0x2
   \   000040   7003         JNZ       $+5
   \   000042   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_7 & 0xFFFF
   \   000045   24FE         ADD       A,#-0x2
   \   000047   7003         JNZ       $+5
   \   000049   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_8 & 0xFFFF
   \   00004C   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_9 & 0xFFFF
    560            {
    561          #ifdef ZCL_READ
    562              case ZCL_CMD_READ_RSP:
    563                zclController_ProcessInReadRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_0:
   \   00004F                ; Setup parameters for call to function zclController_ProcessInReadRspCmd
   \   00004F   12....       LCALL     `??zclController_ProcessInReadRspCmd::?relay`; Banked call to: zclController_ProcessInReadRspCmd
    564                break;
   \   000052   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_9 & 0xFFFF
    565          #endif
    566          #ifdef ZCL_WRITE
    567              case ZCL_CMD_WRITE_RSP:
    568                zclController_ProcessInWriteRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_1:
   \   000055                ; Setup parameters for call to function zclController_ProcessInWriteRspCmd
   \   000055   12....       LCALL     `??zclController_ProcessInWriteRspCmd::?relay`; Banked call to: zclController_ProcessInWriteRspCmd
    569                break;
   \   000058   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_9 & 0xFFFF
    570          #endif
    571          #ifdef ZCL_REPORTING_DEVICE
    572              case ZCL_CMD_CONFIG_REPORT:
    573                break;
    574          #endif
    575          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    576              case ZCL_CMD_CONFIG_REPORT_RSP:
    577                zclController_ProcessInConfigReportRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_2:
   \   00005B                ; Setup parameters for call to function zclController_ProcessInConfigReportRspCmd
   \   00005B   12....       LCALL     `??zclController_ProcessInConfigReportRspCmd::?r`; Banked call to: zclController_ProcessInConfigReportRspCmd
    578                break;
   \   00005E   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_9 & 0xFFFF
    579          #endif
    580          #ifdef ZCL_REPORTING_DEVICE
    581              case ZCL_CMD_READ_REPORT_CFG:
    582                break;
    583          #endif
    584          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    585              case ZCL_CMD_READ_REPORT_CFG_RSP:
    586                zclController_ProcessInReadReportCfgRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_3:
   \   000061                ; Setup parameters for call to function zclController_ProcessInReadReportCfgRspCmd
   \   000061   12....       LCALL     `??zclController_ProcessInReadReportCfgRspCmd::?`; Banked call to: zclController_ProcessInReadReportCfgRspCmd
    587                break;
   \   000064   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_9 & 0xFFFF
    588          #endif
    589          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    590              case ZCL_CMD_REPORT:
    591                zclController_ProcessInReportCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_4:
   \   000067                ; Setup parameters for call to function zclController_ProcessInReportCmd
   \   000067   12....       LCALL     `??zclController_ProcessInReportCmd::?relay`; Banked call to: zclController_ProcessInReportCmd
    592                break;
   \   00006A   02....       LJMP      ??AT_zclController_ProcessIncomingMsg_9 & 0xFFFF
    593          #endif
    594          
    595              case ZCL_CMD_DEFAULT_RSP:
    596                zclController_ProcessInDefaultRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_5:
   \   00006D   8A82         MOV       DPL,R2
   \   00006F   8B83         MOV       DPH,R3
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000076   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000079   3B           ADDC      A,R3
   \   00007A   F583         MOV       DPH,A
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F5..         MOV       ?V4,A
   \   00007F   8A82         MOV       DPL,R2
   \   000081   8B83         MOV       DPH,R3
   \   000083   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000086   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000089   88..         MOV       ?V2,R0
   \   00008B   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00008E   A3           INC       DPTR
   \   00008F   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   85..82       MOV       DPL,?V2
   \   000098   85..83       MOV       DPH,?V3
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F5..         MOV       ?V2,A
   \   00009E   75..00       MOV       ?V3,#0x0
   \   0000A1   78..         MOV       R0,#?V2
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   78..         MOV       R0,#?V8
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   E5..         MOV       A,?V4
   \   0000AD   F5..         MOV       ?V2,A
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   78..         MOV       R0,#?V6
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   7A..         MOV       R2,#`?<Constant "DFTRSP:%04X,%02X,%04X...">` & 0xff
   \   0000BB   7B..         MOV       R3,#(`?<Constant "DFTRSP:%04X,%02X,%04X...">` >> 8) & 0xff
   \   0000BD   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000C0   740A         MOV       A,#0xa
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C5                ; Setup parameters for call to function AT_Uart0_Send
   \   0000C5   7C02         MOV       R4,#0x2
   \   0000C7   7D00         MOV       R5,#0x0
   \   0000C9   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000CB   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000CD   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    597                break;
   \   0000D0   801F         SJMP      ??AT_zclController_ProcessIncomingMsg_9
    598          #ifdef ZCL_DISCOVER
    599              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    600                zclController_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_7:
   \   0000D2                ; Setup parameters for call to function zclController_ProcessInDiscCmdsRspCmd
    601                break;
    602          
    603              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    604                zclController_ProcessInDiscCmdsRspCmd( pInMsg );
   \   0000D2                ; Setup parameters for call to function zclController_ProcessInDiscCmdsRspCmd
   \   0000D2   12....       LCALL     `??zclController_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclController_ProcessInDiscCmdsRspCmd
    605                break;
   \   0000D5   801A         SJMP      ??AT_zclController_ProcessIncomingMsg_9
    606          
    607              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    608                zclController_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_6:
   \   0000D7                ; Setup parameters for call to function zclController_ProcessInDiscAttrsRspCmd
   \   0000D7   12....       LCALL     `??zclController_ProcessInDiscAttrsRspCmd::?rela`; Banked call to: zclController_ProcessInDiscAttrsRspCmd
    609                break;
   \   0000DA   8015         SJMP      ??AT_zclController_ProcessIncomingMsg_9
    610          
    611              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    612                zclController_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??AT_zclController_ProcessIncomingMsg_8:
   \   0000DC   12....       LCALL     ?Subroutine25 & 0xFFFF
    613                break;
    614          #endif
    615              default:
    616                break;
    617            }
   \                     ??CrossCallReturnLabel_132:
   \   0000DF   F9           MOV       R1,A
   \   0000E0   7A00         MOV       R2,#0x0
   \   0000E2   8001         SJMP      ??AT_zclController_ProcessIncomingMsg_10
   \                     ??AT_zclController_ProcessIncomingMsg_11:
   \   0000E4   0A           INC       R2
   \                     ??AT_zclController_ProcessIncomingMsg_10:
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   8983         MOV       DPH,R1
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   FB           MOV       R3,A
   \   0000EC   EA           MOV       A,R2
   \   0000ED   C3           CLR       C
   \   0000EE   9B           SUBB      A,R3
   \   0000EF   40F3         JC        ??AT_zclController_ProcessIncomingMsg_11
    618          
    619            if ( pInMsg->attrCmd )
   \                     ??AT_zclController_ProcessIncomingMsg_9:
   \   0000F1   85..82       MOV       DPL,?V0
   \   0000F4   85..83       MOV       DPH,?V1
   \   0000F7   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000FA   EA           MOV       A,R2
   \   0000FB   4B           ORL       A,R3
   \   0000FC   6003         JZ        ??AT_zclController_ProcessIncomingMsg_12
    620              osal_mem_free( pInMsg->attrCmd );
   \   0000FE                ; Setup parameters for call to function osal_mem_free
   \   0000FE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    621          }
   \                     ??AT_zclController_ProcessIncomingMsg_12:
   \   000101   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8882         MOV       DPL,R0
   \   000002   85..83       MOV       DPH,?V1
   \   000005                REQUIRE ??Subroutine62_0
   \   000005                ; // Fall through to label ??Subroutine62_0
    622          
    623          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    624          /*********************************************************************
    625           * @fn      zclController_PrintfAttrData
    626           *
    627           * @brief   Tool Function. Print different types of Attributes' Data
    628           *
    629           * @param   dataType - data types defined in zcl.h
    630           * @param   attrData - pointer to the attribute data
    631           *
    632           * @return  none
    633           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          static void zclController_PrintfAttrData( uint8 dataType, uint8 *attrData )
   \                     zclController_PrintfAttrData:
    635          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    636            uint8 *pStr;
    637          //  uint16 len;
    638          
    639            if ( attrData == NULL )
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   7003         JNZ       $+5
   \   00000D   02....       LJMP      ??zclController_PrintfAttrData_0 & 0xFFFF
    640            {
    641              return;
    642            }
    643          
    644            switch ( dataType )
   \   000010   E9           MOV       A,R1
   \   000011   24F8         ADD       A,#-0x8
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclController_PrintfAttrData_1 & 0xFFFF
   \   000018   14           DEC       A
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??zclController_PrintfAttrData_2 & 0xFFFF
   \   00001E   14           DEC       A
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??zclController_PrintfAttrData_3 & 0xFFFF
   \   000024   14           DEC       A
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??zclController_PrintfAttrData_4 & 0xFFFF
   \   00002A   24FB         ADD       A,#-0x5
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??zclController_PrintfAttrData_1 & 0xFFFF
   \   000031   24F8         ADD       A,#-0x8
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??zclController_PrintfAttrData_1 & 0xFFFF
   \   000038   14           DEC       A
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??zclController_PrintfAttrData_2 & 0xFFFF
   \   00003E   14           DEC       A
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??zclController_PrintfAttrData_3 & 0xFFFF
   \   000044   14           DEC       A
   \   000045   7003         JNZ       $+5
   \   000047   02....       LJMP      ??zclController_PrintfAttrData_4 & 0xFFFF
   \   00004A   24FB         ADD       A,#-0x5
   \   00004C   7003         JNZ       $+5
   \   00004E   02....       LJMP      ??zclController_PrintfAttrData_1 & 0xFFFF
   \   000051   14           DEC       A
   \   000052   7003         JNZ       $+5
   \   000054   02....       LJMP      ??zclController_PrintfAttrData_2 & 0xFFFF
   \   000057   14           DEC       A
   \   000058   7003         JNZ       $+5
   \   00005A   02....       LJMP      ??zclController_PrintfAttrData_3 & 0xFFFF
   \   00005D   14           DEC       A
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??zclController_PrintfAttrData_4 & 0xFFFF
   \   000063   14           DEC       A
   \   000064   7003         JNZ       $+5
   \   000066   02....       LJMP      ??zclController_PrintfAttrData_5 & 0xFFFF
   \   000069   14           DEC       A
   \   00006A   7003         JNZ       $+5
   \   00006C   02....       LJMP      ??zclController_PrintfAttrData_6 & 0xFFFF
   \   00006F   14           DEC       A
   \   000070   7003         JNZ       $+5
   \   000072   02....       LJMP      ??zclController_PrintfAttrData_7 & 0xFFFF
   \   000075   14           DEC       A
   \   000076   7003         JNZ       $+5
   \   000078   02....       LJMP      ??zclController_PrintfAttrData_8 & 0xFFFF
   \   00007B   14           DEC       A
   \   00007C   605B         JZ        ??zclController_PrintfAttrData_1
   \   00007E   14           DEC       A
   \   00007F   606D         JZ        ??zclController_PrintfAttrData_2
   \   000081   14           DEC       A
   \   000082   6074         JZ        ??zclController_PrintfAttrData_3
   \   000084   14           DEC       A
   \   000085   7003         JNZ       $+5
   \   000087   02....       LJMP      ??zclController_PrintfAttrData_4 & 0xFFFF
   \   00008A   14           DEC       A
   \   00008B   7003         JNZ       $+5
   \   00008D   02....       LJMP      ??zclController_PrintfAttrData_5 & 0xFFFF
   \   000090   14           DEC       A
   \   000091   7003         JNZ       $+5
   \   000093   02....       LJMP      ??zclController_PrintfAttrData_6 & 0xFFFF
   \   000096   14           DEC       A
   \   000097   7003         JNZ       $+5
   \   000099   02....       LJMP      ??zclController_PrintfAttrData_7 & 0xFFFF
   \   00009C   14           DEC       A
   \   00009D   7003         JNZ       $+5
   \   00009F   02....       LJMP      ??zclController_PrintfAttrData_8 & 0xFFFF
   \   0000A2   14           DEC       A
   \   0000A3   6034         JZ        ??zclController_PrintfAttrData_1
   \   0000A5   14           DEC       A
   \   0000A6   6046         JZ        ??zclController_PrintfAttrData_2
   \   0000A8   24F9         ADD       A,#-0x7
   \   0000AA   6042         JZ        ??zclController_PrintfAttrData_2
   \   0000AC   14           DEC       A
   \   0000AD   605F         JZ        ??zclController_PrintfAttrData_4
   \   0000AF   14           DEC       A
   \   0000B0   7003         JNZ       $+5
   \   0000B2   02....       LJMP      ??zclController_PrintfAttrData_8 & 0xFFFF
   \   0000B5   245A         ADD       A,#0x5a
   \   0000B7   6055         JZ        ??zclController_PrintfAttrData_4
   \   0000B9   14           DEC       A
   \   0000BA   6052         JZ        ??zclController_PrintfAttrData_4
   \   0000BC   14           DEC       A
   \   0000BD   604F         JZ        ??zclController_PrintfAttrData_4
   \   0000BF   24FA         ADD       A,#-0x6
   \   0000C1   602B         JZ        ??zclController_PrintfAttrData_2
   \   0000C3   14           DEC       A
   \   0000C4   6028         JZ        ??zclController_PrintfAttrData_2
   \   0000C6   14           DEC       A
   \   0000C7   6045         JZ        ??zclController_PrintfAttrData_4
   \   0000C9   24FA         ADD       A,#-0x6
   \   0000CB   7003         JNZ       $+5
   \   0000CD   02....       LJMP      ??zclController_PrintfAttrData_8 & 0xFFFF
   \   0000D0   14           DEC       A
   \   0000D1   7003         JNZ       $+5
   \   0000D3   02....       LJMP      ??zclController_PrintfAttrData_9 & 0xFFFF
   \   0000D6   02....       LJMP      ??zclController_PrintfAttrData_0 & 0xFFFF
    645            {
    646              case ZCL_DATATYPE_DATA8:
    647              case ZCL_DATATYPE_BOOLEAN:
    648              case ZCL_DATATYPE_BITMAP8:
    649              case ZCL_DATATYPE_INT8:
    650              case ZCL_DATATYPE_UINT8:
    651              case ZCL_DATATYPE_ENUM8:
    652                pStr = zcl_mem_alloc( 2 );
   \                     ??zclController_PrintfAttrData_1:
   \   0000D9                ; Setup parameters for call to function osal_mem_alloc
   \   0000D9   12....       LCALL     ?Subroutine28 & 0xFFFF
    653                AT_IntxtoChar(attrData, pStr, 8);
   \                     ??CrossCallReturnLabel_102:
   \   0000DC                ; Setup parameters for call to function AT_IntxtoChar
   \   0000DC   7908         MOV       R1,#0x8
   \   0000DE   AC..         MOV       R4,?V2
   \   0000E0   AD..         MOV       R5,?V3
   \   0000E2   EE           MOV       A,R6
   \   0000E3   FA           MOV       R2,A
   \   0000E4   EF           MOV       A,R7
   \   0000E5   FB           MOV       R3,A
   \   0000E6   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
    654                AT_RESP(pStr, 2);
   \   0000E9                ; Setup parameters for call to function AT_Uart0_Send
   \   0000E9   7C02         MOV       R4,#0x2
   \   0000EB   02....       LJMP      ??zclController_PrintfAttrData_10 & 0xFFFF
    655                zcl_mem_free( pStr );
    656                break;
    657          
    658              case ZCL_DATATYPE_DATA16:
    659              case ZCL_DATATYPE_BITMAP16:
    660              case ZCL_DATATYPE_UINT16:
    661              case ZCL_DATATYPE_INT16:
    662              case ZCL_DATATYPE_ENUM16:
    663              case ZCL_DATATYPE_SEMI_PREC:
    664              case ZCL_DATATYPE_CLUSTER_ID:
    665              case ZCL_DATATYPE_ATTR_ID:
    666                pStr = zcl_mem_alloc( 4 );
   \                     ??zclController_PrintfAttrData_2:
   \   0000EE                ; Setup parameters for call to function osal_mem_alloc
   \   0000EE   7A04         MOV       R2,#0x4
   \   0000F0   12....       LCALL     ?Subroutine27 & 0xFFFF
    667                AT_IntxtoChar(attrData, pStr, 16);
    668                AT_RESP(pStr, 4);
   \                     ??CrossCallReturnLabel_40:
   \   0000F3                ; Setup parameters for call to function AT_Uart0_Send
   \   0000F3   7C04         MOV       R4,#0x4
   \   0000F5   02....       LJMP      ??zclController_PrintfAttrData_10 & 0xFFFF
    669                zcl_mem_free( pStr );
    670                break;
    671          
    672              case ZCL_DATATYPE_DATA24:
    673              case ZCL_DATATYPE_BITMAP24:
    674              case ZCL_DATATYPE_UINT24:
    675              case ZCL_DATATYPE_INT24:
    676                pStr = zcl_mem_alloc( 6 );
   \                     ??zclController_PrintfAttrData_3:
   \   0000F8                ; Setup parameters for call to function osal_mem_alloc
   \   0000F8   7A06         MOV       R2,#0x6
   \   0000FA   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    677                AT_IntxtoChar(attrData, pStr, 24);
   \                     ??CrossCallReturnLabel_103:
   \   0000FD                ; Setup parameters for call to function AT_IntxtoChar
   \   0000FD   7918         MOV       R1,#0x18
   \   0000FF   AC..         MOV       R4,?V2
   \   000101   AD..         MOV       R5,?V3
   \   000103   EE           MOV       A,R6
   \   000104   FA           MOV       R2,A
   \   000105   EF           MOV       A,R7
   \   000106   FB           MOV       R3,A
   \   000107   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
    678                AT_RESP(pStr, 6);
   \   00010A                ; Setup parameters for call to function AT_Uart0_Send
   \   00010A   7C06         MOV       R4,#0x6
   \   00010C   8075         SJMP      ??zclController_PrintfAttrData_10
    679                zcl_mem_free( pStr );
    680                break;
    681          
    682              case ZCL_DATATYPE_DATA32:
    683              case ZCL_DATATYPE_BITMAP32:
    684              case ZCL_DATATYPE_UINT32:
    685              case ZCL_DATATYPE_INT32:
    686              case ZCL_DATATYPE_SINGLE_PREC:
    687              case ZCL_DATATYPE_TOD:
    688              case ZCL_DATATYPE_DATE:
    689              case ZCL_DATATYPE_UTC:
    690              case ZCL_DATATYPE_BAC_OID:
    691                pStr = zcl_mem_alloc( 8 );
   \                     ??zclController_PrintfAttrData_4:
   \   00010E                ; Setup parameters for call to function osal_mem_alloc
   \   00010E   7A08         MOV       R2,#0x8
   \   000110   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    692                AT_IntxtoChar(attrData, pStr, 32);
   \                     ??CrossCallReturnLabel_104:
   \   000113                ; Setup parameters for call to function AT_IntxtoChar
   \   000113   7920         MOV       R1,#0x20
   \   000115   AC..         MOV       R4,?V2
   \   000117   AD..         MOV       R5,?V3
   \   000119   EE           MOV       A,R6
   \   00011A   FA           MOV       R2,A
   \   00011B   EF           MOV       A,R7
   \   00011C   FB           MOV       R3,A
   \   00011D   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
    693                AT_RESP(pStr, 8);
   \   000120                ; Setup parameters for call to function AT_Uart0_Send
   \   000120   7C08         MOV       R4,#0x8
   \   000122   805F         SJMP      ??zclController_PrintfAttrData_10
    694                zcl_mem_free( pStr );
    695                break;
    696          
    697              case ZCL_DATATYPE_UINT40:
    698              case ZCL_DATATYPE_INT40:
    699                pStr = zcl_mem_alloc( 10 );
   \                     ??zclController_PrintfAttrData_5:
   \   000124                ; Setup parameters for call to function osal_mem_alloc
   \   000124   7A0A         MOV       R2,#0xa
   \   000126   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    700                AT_IntxtoChar(attrData, pStr, 40);
   \                     ??CrossCallReturnLabel_105:
   \   000129                ; Setup parameters for call to function AT_IntxtoChar
   \   000129   7928         MOV       R1,#0x28
   \   00012B   AC..         MOV       R4,?V2
   \   00012D   AD..         MOV       R5,?V3
   \   00012F   EE           MOV       A,R6
   \   000130   FA           MOV       R2,A
   \   000131   EF           MOV       A,R7
   \   000132   FB           MOV       R3,A
   \   000133   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
    701                AT_RESP(pStr, 10);
   \   000136                ; Setup parameters for call to function AT_Uart0_Send
   \   000136   7C0A         MOV       R4,#0xa
   \   000138   8049         SJMP      ??zclController_PrintfAttrData_10
    702                zcl_mem_free( pStr );
    703                break;
    704          
    705              case ZCL_DATATYPE_UINT48:
    706              case ZCL_DATATYPE_INT48:
    707                pStr = zcl_mem_alloc( 12 );
   \                     ??zclController_PrintfAttrData_6:
   \   00013A                ; Setup parameters for call to function osal_mem_alloc
   \   00013A   7A0C         MOV       R2,#0xc
   \   00013C   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    708                AT_IntxtoChar(attrData, pStr, 48);
   \                     ??CrossCallReturnLabel_106:
   \   00013F                ; Setup parameters for call to function AT_IntxtoChar
   \   00013F   7930         MOV       R1,#0x30
   \   000141   AC..         MOV       R4,?V2
   \   000143   AD..         MOV       R5,?V3
   \   000145   EE           MOV       A,R6
   \   000146   FA           MOV       R2,A
   \   000147   EF           MOV       A,R7
   \   000148   FB           MOV       R3,A
   \   000149   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
    709                AT_RESP(pStr, 12);
   \   00014C                ; Setup parameters for call to function AT_Uart0_Send
   \   00014C   7C0C         MOV       R4,#0xc
   \   00014E   8033         SJMP      ??zclController_PrintfAttrData_10
    710                zcl_mem_free( pStr );
    711                break;
    712          
    713              case ZCL_DATATYPE_UINT56:
    714              case ZCL_DATATYPE_INT56:
    715                pStr = zcl_mem_alloc( 14 );
   \                     ??zclController_PrintfAttrData_7:
   \   000150                ; Setup parameters for call to function osal_mem_alloc
   \   000150   7A0E         MOV       R2,#0xe
   \   000152   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    716                AT_IntxtoChar(attrData, pStr, 56);
   \                     ??CrossCallReturnLabel_107:
   \   000155                ; Setup parameters for call to function AT_IntxtoChar
   \   000155   7938         MOV       R1,#0x38
   \   000157   AC..         MOV       R4,?V2
   \   000159   AD..         MOV       R5,?V3
   \   00015B   EE           MOV       A,R6
   \   00015C   FA           MOV       R2,A
   \   00015D   EF           MOV       A,R7
   \   00015E   FB           MOV       R3,A
   \   00015F   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
    717                AT_RESP(pStr, 14);
   \   000162                ; Setup parameters for call to function AT_Uart0_Send
   \   000162   7C0E         MOV       R4,#0xe
   \   000164   801D         SJMP      ??zclController_PrintfAttrData_10
    718                zcl_mem_free( pStr );
    719                break;
    720          
    721              case ZCL_DATATYPE_DOUBLE_PREC:
    722              case ZCL_DATATYPE_IEEE_ADDR:
    723              case ZCL_DATATYPE_UINT64:
    724              case ZCL_DATATYPE_INT64:
    725                pStr = zcl_mem_alloc( 16 );
   \                     ??zclController_PrintfAttrData_8:
   \   000166                ; Setup parameters for call to function osal_mem_alloc
   \   000166   7A10         MOV       R2,#0x10
   \   000168   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    726                AT_IntxtoChar(attrData, pStr, 64);
   \                     ??CrossCallReturnLabel_108:
   \   00016B                ; Setup parameters for call to function AT_IntxtoChar
   \   00016B   7940         MOV       R1,#0x40
   \   00016D   AC..         MOV       R4,?V2
   \   00016F   AD..         MOV       R5,?V3
   \   000171   EE           MOV       A,R6
   \   000172   FA           MOV       R2,A
   \   000173   EF           MOV       A,R7
   \   000174   FB           MOV       R3,A
   \   000175   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
    727                AT_RESP(pStr, 16);
   \   000178                ; Setup parameters for call to function AT_Uart0_Send
   \   000178   7C10         MOV       R4,#0x10
   \   00017A   8007         SJMP      ??zclController_PrintfAttrData_10
    728                zcl_mem_free( pStr );
    729                break;
    730          
    731              case ZCL_DATATYPE_CHAR_STR:
    732              case ZCL_DATATYPE_OCTET_STR:
    733                pStr = (uint8*)attrData;
    734          //      len = *pStr;
    735          //      AT_RESP(pStr+1, len);
    736                break;
    737          
    738              case ZCL_DATATYPE_LONG_CHAR_STR:
    739              case ZCL_DATATYPE_LONG_OCTET_STR:
    740                pStr = (uint8*)attrData;
    741          //      len = BUILD_UINT16( pStr[0], pStr[1] );
    742          //      AT_RESP(pStr+2, len);
    743                break;
    744          
    745              case ZCL_DATATYPE_128_BIT_SEC_KEY:
    746                pStr = zcl_mem_alloc( SEC_KEY_LEN*2 );
   \                     ??zclController_PrintfAttrData_9:
   \   00017C                ; Setup parameters for call to function osal_mem_alloc
   \   00017C   7A20         MOV       R2,#0x20
   \   00017E   12....       LCALL     ?Subroutine27 & 0xFFFF
    747                AT_IntxtoChar(attrData, pStr, SEC_KEY_LEN);
    748                AT_RESP(pStr, SEC_KEY_LEN*2);
   \                     ??CrossCallReturnLabel_41:
   \   000181                ; Setup parameters for call to function AT_Uart0_Send
   \   000181   7C20         MOV       R4,#0x20
   \                     ??zclController_PrintfAttrData_10:
   \   000183   7D00         MOV       R5,#0x0
   \   000185   AA..         MOV       R2,?V2
   \   000187   AB..         MOV       R3,?V3
   \   000189   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    749                zcl_mem_free( pStr );
   \   00018C                ; Setup parameters for call to function osal_mem_free
   \   00018C   AA..         MOV       R2,?V2
   \   00018E   AB..         MOV       R3,?V3
   \   000190   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    750                break;
    751          
    752              case ZCL_DATATYPE_NO_DATA:
    753              case ZCL_DATATYPE_UNKNOWN:
    754                // Fall through
    755          
    756              default:
    757                break;
    758            }
    759          }
   \                     ??zclController_PrintfAttrData_0:
   \   000193   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009                ; Setup parameters for call to function AT_IntxtoChar
   \   000009                ; Setup parameters for call to function AT_IntxtoChar
   \   000009   7910         MOV       R1,#0x10
   \   00000B   AC..         MOV       R4,?V2
   \   00000D   AD..         MOV       R5,?V3
   \   00000F   EE           MOV       A,R6
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??AT_IntxtoChar::?relay`; Banked call to: AT_IntxtoChar
   \   000016   22           RET
    760          #endif
    761          
    762          #ifdef ZCL_READ
    763          /*********************************************************************
    764           * @fn      zclController_ProcessInReadRspCmd
    765           *
    766           * @brief   Process the "Profile" Read Response Command
    767           *
    768           * @param   pInMsg - incoming message to process
    769           *
    770           * @return  none
    771           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    772          static uint8 zclController_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclController_ProcessInReadRspCmd:
    773          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
    774            zclReadRspCmd_t *readRspCmd;
    775            uint8 i;
    776          
    777            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000011   35..         ADDC      A,?V7
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V12,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V13,A
    778            uint8 str[17];
    779            AT_NEW_LINE();
   \   00001C   75....       MOV       ?V8,#`?<Constant "\\r\\n">` & 0xff
   \   00001F   75....       MOV       ?V9,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000022                ; Setup parameters for call to function AT_Uart0_Send
   \   000022   7C02         MOV       R4,#0x2
   \   000024   7D00         MOV       R5,#0x0
   \   000026   AA..         MOV       R2,?V8
   \   000028   AB..         MOV       R3,?V9
   \   00002A   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    780            AT_RESP("---------ADDR,EP,C_ID,A_ID,ST,DT,DV", 35);
   \   00002D                ; Setup parameters for call to function AT_Uart0_Send
   \   00002D   7C23         MOV       R4,#0x23
   \   00002F   7D00         MOV       R5,#0x0
   \   000031   7A..         MOV       R2,#`?<Constant "---------ADDR,EP,C_ID...">` & 0xff
   \   000033   7B..         MOV       R3,#(`?<Constant "---------ADDR,EP,C_ID...">` >> 8) & 0xff
   \   000035   12....       LCALL     ?Subroutine32 & 0xFFFF
    781            AT_NEW_LINE();
    782            for (i = 0; i < readRspCmd->numAttr; i++)
   \                     ??CrossCallReturnLabel_52:
   \   000038   E5..         MOV       A,?V6
   \   00003A   240A         ADD       A,#0xa
   \   00003C   F5..         MOV       ?V10,A
   \   00003E   E4           CLR       A
   \   00003F   35..         ADDC      A,?V7
   \   000041   F5..         MOV       ?V11,A
   \   000043   800E         SJMP      ??zclController_ProcessInReadRspCmd_0
    783            {
    784              AT_RESP("ReadAttr:", 9);
    785              // Node Address
    786              if (pInMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
    787                AT_Int16toChar(pInMsg->srcAddr.addr.shortAddr, str);
    788                AT_RESP(str, 4);
    789              } else {
    790                AT_GetIEEEAddrStr(pInMsg->srcAddr.addr.extAddr, str);
    791                AT_RESP(str, 16);
    792              }
    793              AT_RESP(",", 1);
    794          
    795              // Endpoint
    796              AT_Int8toChar(pInMsg->srcAddr.endPoint, str);
    797              AT_RESP(str, 2);
    798              AT_RESP(",", 1);
    799          
    800              // Cluster ID
    801              AT_Int16toChar(pInMsg->clusterId, str);
    802              AT_RESP(str, 4);
    803              AT_RESP(",", 1);
    804          
    805              // Attribute ID
    806              AT_Int16toChar(readRspCmd->attrList[i].attrID, str);
    807              AT_RESP(str, 4);
    808              AT_RESP(",", 1);
    809          
    810              // Status
    811              AT_Int8toChar(readRspCmd->attrList[i].status, str);
    812              AT_RESP(str,2);
    813              AT_RESP(",",1);
    814          
    815              // Data type
    816              AT_Int8toChar(readRspCmd->attrList[i].dataType, str);
    817              AT_RESP(str,2);
    818              AT_RESP(",",1);
    819          
    820              // Attribute value
    821              if (readRspCmd->attrList[i].dataType == ZCL_DATATYPE_CHAR_STR) {
    822                AT_RESP(readRspCmd->attrList[i].data+1, readRspCmd->attrList[i].data[0]);
    823              } else if (readRspCmd->attrList[i].dataType == ZCL_DATATYPE_DATA16||
    824                         readRspCmd->attrList[i].dataType == ZCL_DATATYPE_UINT16||
    825                         readRspCmd->attrList[i].dataType == ZCL_DATATYPE_INT16) {
    826                AT_Int16toChar(*((uint16*)readRspCmd->attrList[i].data),str);
    827                AT_RESP(str, 4);
    828              } else {
    829                AT_Int8toChar((uint8)readRspCmd->attrList[i].data[0],str);
   \                     ??zclController_ProcessInReadRspCmd_1:
   \   000045                ; Setup parameters for call to function AT_Int8toChar
   \   000045   12....       LCALL     ?Subroutine18 & 0xFFFF
    830                AT_RESP(str,2);
    831              }
   \                     ??CrossCallReturnLabel_22:
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   AA..         MOV       R2,?XSP + 0
   \   00004C   AB..         MOV       R3,?XSP + 1
   \                     ??zclController_ProcessInReadRspCmd_2:
   \   00004E   12....       LCALL     ?Subroutine46 & 0xFFFF
    832          
    833              AT_NEW_LINE();
   \                     ??CrossCallReturnLabel_84:
   \   000051   05..         INC       ?V2
   \                     ??zclController_ProcessInReadRspCmd_0:
   \   000053   85..82       MOV       DPL,?V12
   \   000056   85..83       MOV       DPH,?V13
   \   000059   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00005C   4003         JC        $+5
   \   00005E   02....       LJMP      ??zclController_ProcessInReadRspCmd_3 & 0xFFFF
   \   000061                ; Setup parameters for call to function AT_Uart0_Send
   \   000061   7C09         MOV       R4,#0x9
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7A..         MOV       R2,#`?<Constant "ReadAttr:">` & 0xff
   \   000067   7B..         MOV       R3,#(`?<Constant "ReadAttr:">` >> 8) & 0xff
   \   000069   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00006C   E5..         MOV       A,?V6
   \   00006E   2412         ADD       A,#0x12
   \   000070   F582         MOV       DPL,A
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V7
   \   000075   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000078   700B         JNZ       ??zclController_ProcessInReadRspCmd_4
   \   00007A                ; Setup parameters for call to function AT_Int16toChar
   \   00007A   85..82       MOV       DPL,?V10
   \   00007D   85..83       MOV       DPH,?V11
   \   000080   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000083   8009         SJMP      ??zclController_ProcessInReadRspCmd_5
   \                     ??zclController_ProcessInReadRspCmd_4:
   \   000085                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   000085   AA..         MOV       R2,?V10
   \   000087   AB..         MOV       R3,?V11
   \   000089   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
   \   00008C                ; Setup parameters for call to function AT_Uart0_Send
   \   00008C   7C10         MOV       R4,#0x10
   \                     ??zclController_ProcessInReadRspCmd_5:
   \   00008E   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000091   E5..         MOV       A,?V6
   \   000093   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000096   35..         ADDC      A,?V7
   \   000098   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00009B   85..82       MOV       DPL,?V6
   \   00009E   85..83       MOV       DPH,?V7
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000AB   E5..         MOV       A,?V2
   \   0000AD   75F006       MOV       B,#0x6
   \   0000B0   A4           MUL       AB
   \   0000B1   F8           MOV       R0,A
   \   0000B2   A9F0         MOV       R1,B
   \   0000B4   E5..         MOV       A,?V12
   \   0000B6   28           ADD       A,R0
   \   0000B7   F5..         MOV       ?V0,A
   \   0000B9   E5..         MOV       A,?V13
   \   0000BB   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000BE   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000C1   85..82       MOV       DPL,?V0
   \   0000C4   85..83       MOV       DPH,?V1
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000CD   7A..         MOV       R2,#`?<Constant ",">` & 0xff
   \   0000CF   7B..         MOV       R3,#(`?<Constant ",">` >> 8) & 0xff
   \   0000D1   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0000D4   E5..         MOV       A,?V0
   \   0000D6   2404         ADD       A,#0x4
   \   0000D8   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000DB   2405         ADD       A,#0x5
   \   0000DD   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000E0   7442         MOV       A,#0x42
   \   0000E2   68           XRL       A,R0
   \   0000E3   7006         JNZ       ??zclController_ProcessInReadRspCmd_6
   \   0000E5   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000E8   02....       LJMP      ??zclController_ProcessInReadRspCmd_2 & 0xFFFF
   \                     ??zclController_ProcessInReadRspCmd_6:
   \   0000EB   7409         MOV       A,#0x9
   \   0000ED   68           XRL       A,R0
   \   0000EE   600D         JZ        ??zclController_ProcessInReadRspCmd_7
   \   0000F0   7421         MOV       A,#0x21
   \   0000F2   68           XRL       A,R0
   \   0000F3   6008         JZ        ??zclController_ProcessInReadRspCmd_7
   \   0000F5   7429         MOV       A,#0x29
   \   0000F7   68           XRL       A,R0
   \   0000F8   6003         JZ        $+5
   \   0000FA   02....       LJMP      ??zclController_ProcessInReadRspCmd_1 & 0xFFFF
   \                     ??zclController_ProcessInReadRspCmd_7:
   \   0000FD                ; Setup parameters for call to function AT_Int16toChar
   \   0000FD   12....       LCALL     ?Subroutine11 & 0xFFFF
    834            }
   \                     ??CrossCallReturnLabel_113:
   \   000100   02....       LJMP      ??CrossCallReturnLabel_22 & 0xFFFF
    835          
    836            return TRUE;
   \                     ??zclController_ProcessInReadRspCmd_3:
   \   000103                REQUIRE ?Subroutine3
   \   000103                ; // Fall through to label ?Subroutine3
    837          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7901         MOV       R1,#0x1
   \   000002   7411         MOV       A,#0x11
   \   000004   12....       LCALL     ?DEALLOC_XSTACK8
   \   000007                REQUIRE ??Subroutine59_0
   \   000007                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   2413         ADD       A,#0x13
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   75..00       MOV       ?V2,#0x0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   AA..         MOV       R2,?V8
   \   000005   AB..         MOV       R3,?V9
   \   000007   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   6402         XRL       A,#0x2
   \   000005   AC..         MOV       R4,?XSP + 0
   \   000007   AD..         MOV       R5,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C01         MOV       R4,#0x1
   \   000005   7D00         MOV       R5,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AC..         MOV       R4,?XSP + 0
   \   000002   AD..         MOV       R5,?XSP + 1
   \   000004   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000007                REQUIRE ??Subroutine60_0
   \   000007                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   12....       LCALL     `??AT_Int16toChar::?relay`; Banked call to: AT_Int16toChar
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006                ; Setup parameters for call to function AT_Uart0_Send
   \   000006   7C04         MOV       R4,#0x4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V2
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   39           ADDC      A,R1
   \   000001   F5..         MOV       ?V1,A
   \   000003                ; Setup parameters for call to function AT_Int16toChar
   \   000003                ; Setup parameters for call to function AT_Int16toChar
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   85..82       MOV       DPL,?V0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003                ; Setup parameters for call to function AT_Int8toChar
   \   000003                ; Setup parameters for call to function AT_Int8toChar
   \   000003   AA..         MOV       R2,?XSP + 0
   \   000005   AB..         MOV       R3,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   AA..         MOV       R2,?XSP + 0
   \   000002   AB..         MOV       R3,?XSP + 1
   \   000004   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??AT_Int8toChar::?relay`; Banked call to: AT_Int8toChar
   \   00000B                ; Setup parameters for call to function AT_Uart0_Send
   \   00000B                ; Setup parameters for call to function AT_Uart0_Send
   \   00000B   7C02         MOV       R4,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008                ; Setup parameters for call to function AT_Uart0_Send
   \   000008                ; Setup parameters for call to function AT_Uart0_Send
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   7D00         MOV       R5,#0x0
   \   00000C   A3           INC       DPTR
   \   00000D   AA82         MOV       R2,DPL
   \   00000F   AB83         MOV       R3,DPH
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000005   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000004   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   AA..         MOV       R2,?XSP + 0
   \   000004   AB..         MOV       R3,?XSP + 1
   \   000006   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009   7C01         MOV       R4,#0x1
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   7A..         MOV       R2,#`?<Constant ",">` & 0xff
   \   00000F   7B..         MOV       R3,#(`?<Constant ",">` >> 8) & 0xff
   \   000011   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003                ; Setup parameters for call to function AT_Int16toChar
   \   000003                ; Setup parameters for call to function AT_Int16toChar
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003                ; Setup parameters for call to function AT_Int8toChar
   \   000003                ; Setup parameters for call to function AT_Int8toChar
   \   000003   AA..         MOV       R2,?XSP + 0
   \   000005   AB..         MOV       R3,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F5..         MOV       ?V5,A
   \   000007                ; Setup parameters for call to function AT_Int8toChar
   \   000007                ; Setup parameters for call to function AT_Int8toChar
   \   000007   AA..         MOV       R2,?XSP + 0
   \   000009   AB..         MOV       R3,?XSP + 1
   \   00000B   85..82       MOV       DPL,?V4
   \   00000E   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000011   85..82       MOV       DPL,?V4
   \   000014   85..83       MOV       DPH,?V5
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   E5..         MOV       A,?V0
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005   7C01         MOV       R4,#0x1
   \   000007   7D00         MOV       R5,#0x0
   \   000009   7A..         MOV       R2,#`?<Constant ",">` & 0xff
   \   00000B   7B..         MOV       R3,#(`?<Constant ",">` >> 8) & 0xff
   \   00000D   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EA           MOV       A,R2
   \   000001   2417         ADD       A,#0x17
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   22           RET
    838          #endif // ZCL_READ
    839          
    840          #ifdef ZCL_WRITE
    841          /*********************************************************************
    842           * @fn      zclController_ProcessInWriteRspCmd
    843           *
    844           * @brief   Process the "Profile" Write Response Command
    845           *
    846           * @param   pInMsg - incoming message to process
    847           *
    848           * @return  none
    849           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          static uint8 zclController_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclController_ProcessInWriteRspCmd:
    851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    852            zclWriteRspCmd_t *writeRspCmd;
    853            uint8 i;
    854          
    855            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000011   3F           ADDC      A,R7
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V10,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V11,A
    856            uint8 str[17];
    857            AT_NEW_LINE();
   \   00001B   75....       MOV       ?V8,#`?<Constant "\\r\\n">` & 0xff
   \   00001E   75....       MOV       ?V9,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000021                ; Setup parameters for call to function AT_Uart0_Send
   \   000021   7C02         MOV       R4,#0x2
   \   000023   7D00         MOV       R5,#0x0
   \   000025   AA..         MOV       R2,?V8
   \   000027   AB..         MOV       R3,?V9
   \   000029   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    858            AT_RESP("----------ADDR,EP,C_ID,ST", 25);
   \   00002C                ; Setup parameters for call to function AT_Uart0_Send
   \   00002C   7C19         MOV       R4,#0x19
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   7A..         MOV       R2,#`?<Constant "----------ADDR,EP,C_I...">` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant "----------ADDR,EP,C_I...">` >> 8) & 0xff
   \   000034   12....       LCALL     ?Subroutine32 & 0xFFFF
    859            AT_NEW_LINE();
    860            for (i = 0; i < writeRspCmd->numAttr; i++)
   \                     ??CrossCallReturnLabel_53:
   \   000037   75....       MOV       ?V6,#`?<Constant ",">` & 0xff
   \   00003A   75....       MOV       ?V7,#(`?<Constant ",">` >> 8) & 0xff
   \   00003D   EE           MOV       A,R6
   \   00003E   240A         ADD       A,#0xa
   \   000040   F5..         MOV       ?V12,A
   \   000042   E4           CLR       A
   \   000043   3F           ADDC      A,R7
   \   000044   F5..         MOV       ?V13,A
   \   000046   02....       LJMP      ??zclController_ProcessInWriteRspCmd_0 & 0xFFFF
    861            {
    862              AT_RESP("WriteAttr:",10);
    863          
    864              //node id
    865              if(pInMsg->srcAddr.addrMode==(afAddrMode_t)Addr16Bit){
    866                AT_Int16toChar(pInMsg->srcAddr.addr.shortAddr,str);
    867                AT_RESP(str,4);
    868              }else{
    869                AT_GetIEEEAddrStr(pInMsg->srcAddr.addr.extAddr,str);
   \                     ??zclController_ProcessInWriteRspCmd_1:
   \   000049                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   000049   AA..         MOV       R2,?V12
   \   00004B   AB..         MOV       R3,?V13
   \   00004D   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
    870                AT_RESP(str,16);
   \   000050                ; Setup parameters for call to function AT_Uart0_Send
   \   000050   7C10         MOV       R4,#0x10
    871              }
   \                     ??zclController_ProcessInWriteRspCmd_2:
   \   000052   12....       LCALL     ?Subroutine47 & 0xFFFF
    872              AT_RESP(",",1);
    873          
    874              //End ponit
    875              AT_Int8toChar(pInMsg->srcAddr.endPoint,str);
   \                     ??CrossCallReturnLabel_86:
   \   000055                ; Setup parameters for call to function AT_Int8toChar
   \   000055   AA..         MOV       R2,?XSP + 0
   \   000057   AB..         MOV       R3,?XSP + 1
   \   000059   EE           MOV       A,R6
   \   00005A   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00005D   3F           ADDC      A,R7
   \   00005E   F583         MOV       DPH,A
   \   000060   12....       LCALL     ?Subroutine14 & 0xFFFF
    876              AT_RESP(str,2);
    877              AT_RESP(",",1);
   \                     ??CrossCallReturnLabel_15:
   \   000063   AA..         MOV       R2,?V6
   \   000065   AB..         MOV       R3,?V7
   \   000067   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    878          
    879              //Cluster ID
    880              AT_Int16toChar(pInMsg->clusterId,str);
   \   00006A                ; Setup parameters for call to function AT_Int16toChar
   \   00006A   AC..         MOV       R4,?XSP + 0
   \   00006C   AD..         MOV       R5,?XSP + 1
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   12....       LCALL     ?Subroutine10 & 0xFFFF
    881              AT_RESP(str,4);
    882              AT_RESP(",",1);
    883          
    884              //Attribute ID   Display when status != 0
    885              if (writeRspCmd->attrList[i].status != 0) {
   \                     ??CrossCallReturnLabel_8:
   \   00007B   E5..         MOV       A,?V2
   \   00007D   F5..         MOV       ?V0,A
   \   00007F   75F003       MOV       B,#0x3
   \   000082   A4           MUL       AB
   \   000083   F8           MOV       R0,A
   \   000084   A9F0         MOV       R1,B
   \   000086   E5..         MOV       A,?V10
   \   000088   28           ADD       A,R0
   \   000089   F8           MOV       R0,A
   \   00008A   E5..         MOV       A,?V11
   \   00008C   39           ADDC      A,R1
   \   00008D   F9           MOV       R1,A
   \   00008E   8882         MOV       DPL,R0
   \   000090   F583         MOV       DPH,A
   \   000092   A3           INC       DPTR
   \   000093   8582..       MOV       ?V4,DPL
   \   000096   8583..       MOV       ?V5,DPH
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   600B         JZ        ??CrossCallReturnLabel_9
    886                AT_Int16toChar(writeRspCmd->attrList[i].attrID,str);
   \   00009C                ; Setup parameters for call to function AT_Int16toChar
   \   00009C   AC..         MOV       R4,?XSP + 0
   \   00009E   AD..         MOV       R5,?XSP + 1
   \   0000A0   8882         MOV       DPL,R0
   \   0000A2   8983         MOV       DPH,R1
   \   0000A4   12....       LCALL     ?Subroutine10 & 0xFFFF
    887                AT_RESP(str,4);
    888                AT_RESP(",",1);
    889              }
    890          
    891              //status
    892              AT_Int8toChar(writeRspCmd->attrList[i].status,str);
   \                     ??CrossCallReturnLabel_9:
   \   0000A7                ; Setup parameters for call to function AT_Int8toChar
   \   0000A7   AA..         MOV       R2,?XSP + 0
   \   0000A9   AB..         MOV       R3,?XSP + 1
   \   0000AB   85..82       MOV       DPL,?V4
   \   0000AE   85..83       MOV       DPH,?V5
   \   0000B1   12....       LCALL     ?Subroutine15 & 0xFFFF
    893              AT_RESP(str,2);
    894          
    895              if(i < writeRspCmd->numAttr-1) AT_NEXT_LINE();
   \                     ??CrossCallReturnLabel_16:
   \   0000B4   85..82       MOV       DPL,?V10
   \   0000B7   85..83       MOV       DPH,?V11
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   24FF         ADD       A,#-0x1
   \   0000BD   F8           MOV       R0,A
   \   0000BE   E4           CLR       A
   \   0000BF   34FF         ADDC      A,#-0x1
   \   0000C1   F9           MOV       R1,A
   \   0000C2   C3           CLR       C
   \   0000C3   E5..         MOV       A,?V0
   \   0000C5   98           SUBB      A,R0
   \   0000C6   E4           CLR       A
   \   0000C7   99           SUBB      A,R1
   \   0000C8   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000CA   65D0         XRL       A,PSW
   \   0000CC   33           RLC       A
   \   0000CD   500B         JNC       ??zclController_ProcessInWriteRspCmd_3
   \   0000CF                ; Setup parameters for call to function AT_Uart0_Send
   \   0000CF   7C02         MOV       R4,#0x2
   \   0000D1   7D00         MOV       R5,#0x0
   \   0000D3   AA..         MOV       R2,?V8
   \   0000D5   AB..         MOV       R3,?V9
   \   0000D7   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \                     ??zclController_ProcessInWriteRspCmd_3:
   \   0000DA   05..         INC       ?V2
   \                     ??zclController_ProcessInWriteRspCmd_0:
   \   0000DC   85..82       MOV       DPL,?V10
   \   0000DF   85..83       MOV       DPH,?V11
   \   0000E2   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000E5   5026         JNC       ??zclController_ProcessInWriteRspCmd_4
   \   0000E7                ; Setup parameters for call to function AT_Uart0_Send
   \   0000E7   7C0A         MOV       R4,#0xa
   \   0000E9   7D00         MOV       R5,#0x0
   \   0000EB   7A..         MOV       R2,#`?<Constant "WriteAttr:">` & 0xff
   \   0000ED   7B..         MOV       R3,#(`?<Constant "WriteAttr:">` >> 8) & 0xff
   \   0000EF   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0000F2   EE           MOV       A,R6
   \   0000F3   2412         ADD       A,#0x12
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   3F           ADDC      A,R7
   \   0000F9   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000FC   6003         JZ        $+5
   \   0000FE   02....       LJMP      ??zclController_ProcessInWriteRspCmd_1 & 0xFFFF
   \   000101                ; Setup parameters for call to function AT_Int16toChar
   \   000101   85..82       MOV       DPL,?V12
   \   000104   85..83       MOV       DPH,?V13
   \   000107   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    896            }
   \                     ??CrossCallReturnLabel_116:
   \   00010A   02....       LJMP      ??zclController_ProcessInWriteRspCmd_2 & 0xFFFF
    897            AT_NEW_LINE();
   \                     ??zclController_ProcessInWriteRspCmd_4:
   \   00010D                ; Setup parameters for call to function AT_Uart0_Send
   \   00010D   7C02         MOV       R4,#0x2
   \   00010F   7D00         MOV       R5,#0x0
   \   000111   AA..         MOV       R2,?V8
   \   000113   AB..         MOV       R3,?V9
   \   000115   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    898          
    899            return TRUE;
   \   000118   02....       LJMP      ?Subroutine3 & 0xFFFF
    900          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000005   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   AA..         MOV       R2,?XSP + 0
   \   000004   AB..         MOV       R3,?XSP + 1
   \   000006   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009   7C01         MOV       R4,#0x1
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   AA..         MOV       R2,?V6
   \   00000F   AB..         MOV       R3,?V7
   \   000011   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   22           RET
    901          #endif // ZCL_WRITE
    902          
    903          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    904          /*********************************************************************
    905           * @fn      zclController_ProcessInReadReportCfgRspCmd
    906           *
    907           * @brief   Process the "Profile" Read Reporting Configuration Response Command
    908           *
    909           * @param   pInMsg - incoming message to process
    910           *
    911           * @return  none
    912           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    913          static uint8 zclController_ProcessInReadReportCfgRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclController_ProcessInReadReportCfgRspCmd:
    914          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
    915            uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
   \   000005   12....       LCALL     ?Subroutine17 & 0xFFFF
    916            uint8  endpoint = pInMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_20:
   \   000008   F5..         MOV       ?V0,A
    917            uint16 cID      = pInMsg->clusterId;
   \   00000A   12....       LCALL     ?Subroutine20 & 0xFFFF
    918            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
    919            uint8 i;
    920            // uint8 status;
    921            // uint8 direction;
    922            // uint16 attrID;
    923            // uint8 dataType;
    924            // uint16 minReportInt;
    925            // uint16 maxReportInt;
    926            // uint16 timeoutPeriod;
    927          
    928            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_24:
   \   00000D   12....       LCALL     ?Subroutine13 & 0xFFFF
    929          
    930            AT_NEW_LINE();
    931            printf("READRCFGRSP:%04X,%02X,%04X,%02X", nodeId, endpoint, cID, readReportCfgRspCmd->numAttr);
   \                     ??CrossCallReturnLabel_12:
   \   000010   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   78..         MOV       R0,#?V6
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75..00       MOV       ?V1,#0x0
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   78..         MOV       R0,#?V4
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7A..         MOV       R2,#`?<Constant "READRCFGRSP:%04X,%02X...">` & 0xff
   \   00002A   7B..         MOV       R3,#(`?<Constant "READRCFGRSP:%04X,%02X...">` >> 8) & 0xff
   \   00002C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002F   7408         MOV       A,#0x8
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
    932            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ ) {
   \   000034   75..00       MOV       ?V6,#0x0
   \   000037   8020         SJMP      ??zclController_ProcessInReadReportCfgRspCmd_0
    933              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    934              AT_NEXT_LINE();
    935              printf("ATTR%02X:%02X,%02X,%04X", i, reportRspRec->status,
    936                      reportRspRec->direction, reportRspRec->attrID);
    937              if ( reportRspRec->status == ZCL_STATUS_SUCCESS ) {
    938                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS ) {
    939                  printf(",%02X,%04X,%04X,", reportRspRec->dataType,
    940                          reportRspRec->minReportInt, reportRspRec->maxReportInt);
    941                  if ( zclAnalogDataType( reportRspRec->dataType ) ) {
    942                    zclController_PrintfAttrData(reportRspRec->dataType,
    943                                                 reportRspRec->reportableChange);
    944                  }
    945                } else {
    946                  printf(",%04X", reportRspRec->timeoutPeriod);
   \                     ??zclController_ProcessInReadReportCfgRspCmd_1:
   \   000039                ; Setup parameters for call to function printf
   \   000039   85..82       MOV       DPL,?V0
   \   00003C   85..83       MOV       DPH,?V1
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004B   7A..         MOV       R2,#`?<Constant ",%04X">` & 0xff
   \   00004D   7B..         MOV       R3,#(`?<Constant ",%04X">` >> 8) & 0xff
   \   00004F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000052   7402         MOV       A,#0x2
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
    947                }
   \                     ??zclController_ProcessInReadReportCfgRspCmd_2:
   \   000057   05..         INC       ?V6
   \                     ??zclController_ProcessInReadReportCfgRspCmd_0:
   \   000059   85..82       MOV       DPL,?V2
   \   00005C   85..83       MOV       DPH,?V3
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   E5..         MOV       A,?V6
   \   000063   C3           CLR       C
   \   000064   98           SUBB      A,R0
   \   000065   4003         JC        $+5
   \   000067   02....       LJMP      ??zclController_ProcessInReadReportCfgRspCmd_3 & 0xFFFF
   \   00006A   E5..         MOV       A,?V6
   \   00006C   F5..         MOV       ?V8,A
   \   00006E   75F00D       MOV       B,#0xd
   \   000071   A4           MUL       AB
   \   000072   F8           MOV       R0,A
   \   000073   A9F0         MOV       R1,B
   \   000075   E5..         MOV       A,?V2
   \   000077   28           ADD       A,R0
   \   000078   F582         MOV       DPL,A
   \   00007A   E5..         MOV       A,?V3
   \   00007C   39           ADDC      A,R1
   \   00007D   F583         MOV       DPH,A
   \   00007F   A3           INC       DPTR
   \   000080   8582..       MOV       ?V0,DPL
   \   000083   8583..       MOV       ?V1,DPH
   \   000086                ; Setup parameters for call to function AT_Uart0_Send
   \   000086   7C02         MOV       R4,#0x2
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00008C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00008E   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000091   85..82       MOV       DPL,?V0
   \   000094   85..83       MOV       DPH,?V1
   \   000097   A3           INC       DPTR
   \   000098   8582..       MOV       ?V4,DPL
   \   00009B   8583..       MOV       ?V5,DPH
   \   00009E                ; Setup parameters for call to function printf
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A9   85..82       MOV       DPL,?V4
   \   0000AC   85..83       MOV       DPH,?V5
   \   0000AF   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   85..82       MOV       DPL,?V0
   \   0000B8   85..83       MOV       DPH,?V1
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F5..         MOV       ?V10,A
   \   0000BE   78..         MOV       R0,#?V10
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   78..         MOV       R0,#?V8
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   7A..         MOV       R2,#`?<Constant "ATTR%02X:%02X,%02X,%04X">` & 0xff
   \   0000CA   7B..         MOV       R3,#(`?<Constant "ATTR%02X:%02X,%02X,%04X">` >> 8) & 0xff
   \   0000CC   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000CF   7408         MOV       A,#0x8
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D4   85..82       MOV       DPL,?V0
   \   0000D7   85..83       MOV       DPH,?V1
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   6003         JZ        $+5
   \   0000DD   02....       LJMP      ??zclController_ProcessInReadReportCfgRspCmd_2 & 0xFFFF
   \   0000E0   85..82       MOV       DPL,?V4
   \   0000E3   85..83       MOV       DPH,?V5
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   6003         JZ        $+5
   \   0000E9   02....       LJMP      ??zclController_ProcessInReadReportCfgRspCmd_1 & 0xFFFF
   \   0000EC   E5..         MOV       A,?V0
   \   0000EE   2404         ADD       A,#0x4
   \   0000F0   F5..         MOV       ?V4,A
   \   0000F2   E4           CLR       A
   \   0000F3   35..         ADDC      A,?V1
   \   0000F5   F5..         MOV       ?V5,A
   \   0000F7                ; Setup parameters for call to function printf
   \   0000F7   85..82       MOV       DPL,?V0
   \   0000FA   85..83       MOV       DPH,?V1
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000107   85..82       MOV       DPL,?V0
   \   00010A   85..83       MOV       DPH,?V1
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000115   85..82       MOV       DPL,?V4
   \   000118   85..83       MOV       DPH,?V5
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F5..         MOV       ?V8,A
   \   00011E   78..         MOV       R0,#?V8
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000123   7A..         MOV       R2,#`?<Constant ",%02X,%04X,%04X,">` & 0xff
   \   000125   7B..         MOV       R3,#(`?<Constant ",%02X,%04X,%04X,">` >> 8) & 0xff
   \   000127   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012D                ; Setup parameters for call to function zclAnalogDataType
   \   00012D   85..82       MOV       DPL,?V4
   \   000130   85..83       MOV       DPH,?V5
   \   000133   E0           MOVX      A,@DPTR
   \   000134   F9           MOV       R1,A
   \   000135   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000138   E9           MOV       A,R1
   \   000139   7003         JNZ       $+5
   \   00013B   02....       LJMP      ??zclController_ProcessInReadReportCfgRspCmd_2 & 0xFFFF
   \   00013E                ; Setup parameters for call to function zclController_PrintfAttrData
   \   00013E   E5..         MOV       A,?V0
   \   000140   240B         ADD       A,#0xb
   \   000142   12....       LCALL     ?Subroutine30 & 0xFFFF
    948              }
    949            }
   \                     ??CrossCallReturnLabel_46:
   \   000145   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000148   85..82       MOV       DPL,?V4
   \   00014B   85..83       MOV       DPH,?V5
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   F9           MOV       R1,A
   \   000150   12....       LCALL     `??zclController_PrintfAttrData::?relay`; Banked call to: zclController_PrintfAttrData
   \   000153   02....       LJMP      ??zclController_ProcessInReadReportCfgRspCmd_2 & 0xFFFF
    950            AT_NEXT_LINE();
   \                     ??zclController_ProcessInReadReportCfgRspCmd_3:
   \   000156                ; Setup parameters for call to function AT_Uart0_Send
   \   000156   7C02         MOV       R4,#0x2
   \   000158   7D00         MOV       R5,#0x0
   \   00015A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00015C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00015E                REQUIRE ?Subroutine5
   \   00015E                ; // Fall through to label ?Subroutine5
    951            AT_RESP("END\r\n", 5);
    952            AT_NEW_LINE();
    953          
    954            return ( TRUE );
    955          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C05         MOV       R4,#0x5
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7A..         MOV       R2,#`?<Constant "END\\r\\n">` & 0xff
   \   000009   7B..         MOV       R3,#(`?<Constant "END\\r\\n">` >> 8) & 0xff
   \   00000B   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00000E   7901         MOV       R1,#0x1
   \   000010                REQUIRE ??Subroutine61_0
   \   000010                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V10,A
   \   000003   75..00       MOV       ?V11,#0x0
   \   000006   78..         MOV       R0,#?V10
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000003   7406         MOV       A,#0x6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000007   2417         ADD       A,#0x17
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3B           ADDC      A,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V6,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F5..         MOV       ?V7,A
   \   00000F   EA           MOV       A,R2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V4,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V5,A
   \   000015   EA           MOV       A,R2
   \   000016   2413         ADD       A,#0x13
   \   000018   F582         MOV       DPL,A
   \   00001A   E4           CLR       A
   \   00001B   3B           ADDC      A,R3
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   75..00       MOV       ?V9,#0x0
   \   000006   78..         MOV       R0,#?V8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F5..         MOV       ?V3,A
   \   000002                ; Setup parameters for call to function AT_Uart0_Send
   \   000002                ; Setup parameters for call to function AT_Uart0_Send
   \   000002                ; Setup parameters for call to function AT_Uart0_Send
   \   000002   7C02         MOV       R4,#0x2
   \   000004   7D00         MOV       R5,#0x0
   \   000006   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000008   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000A   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000D                ; Setup parameters for call to function printf
   \   00000D                ; Setup parameters for call to function printf
   \   00000D   85..82       MOV       DPL,?V2
   \   000010   85..83       MOV       DPH,?V3
   \   000013   22           RET
    956          
    957          /*********************************************************************
    958           * @fn      zclController_ProcessInConfigReportRspCmd
    959           *
    960           * @brief   Process the "Profile" Configure Reporting Response Command
    961           *
    962           * @param   pInMsg - incoming message to process
    963           *
    964           * @return  none
    965           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    966          static uint8 zclController_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclController_ProcessInConfigReportRspCmd:
    967          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    968            uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
   \   000005   12....       LCALL     ?Subroutine17 & 0xFFFF
    969            uint8  endpoint = pInMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_21:
   \   000008   F5..         MOV       ?V2,A
    970            uint16 cID      = pInMsg->clusterId;
   \   00000A   12....       LCALL     ?Subroutine20 & 0xFFFF
    971            zclCfgReportRspCmd_t *cfgReportRspCmd;
    972            uint8 i;
    973            // uint8  status;
    974            // uint8  direction;
    975            // uint16 attrID;
    976          
    977            cfgReportRspCmd = (zclCfgReportRspCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_25:
   \   00000D   F583         MOV       DPH,A
   \   00000F   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000012   88..         MOV       ?V0,R0
   \   000014   F5..         MOV       ?V1,A
    978          
    979            AT_NEW_LINE();
   \   000016                ; Setup parameters for call to function AT_Uart0_Send
   \   000016   7C02         MOV       R4,#0x2
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00001C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00001E   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    980            printf("CFGRPTRSP:%04X,%02X,%04X", nodeId, endpoint, cID);
   \   000021                ; Setup parameters for call to function printf
   \   000021   78..         MOV       R0,#?V6
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   75..00       MOV       ?V3,#0x0
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V4
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "CFGRPTRSP:%04X,%02X,%04X">` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "CFGRPTRSP:%04X,%02X,%04X">` >> 8) & 0xff
   \   000037   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
    981            if (cfgReportRspCmd->numAttr == 0) {
   \   00003D   85..82       MOV       DPL,?V0
   \   000040   85..83       MOV       DPH,?V1
   \   000043   E0           MOVX      A,@DPTR
   \   000044   700D         JNZ       ??zclController_ProcessInConfigReportRspCmd_0
    982            	AT_RESP(",00", 3);
   \   000046                ; Setup parameters for call to function AT_Uart0_Send
   \   000046   7C03         MOV       R4,#0x3
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   7A..         MOV       R2,#`?<Constant ",00">` & 0xff
   \   00004C   7B..         MOV       R3,#(`?<Constant ",00">` >> 8) & 0xff
   \   00004E   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000051   805F         SJMP      ??zclController_ProcessInConfigReportRspCmd_1
    983            } else {
    984          	for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   \                     ??zclController_ProcessInConfigReportRspCmd_0:
   \   000053   75..00       MOV       ?V2,#0x0
   \   000056   804F         SJMP      ??zclController_ProcessInConfigReportRspCmd_2
    985            	{
    986                printf(",%02X,%02X,%04X", cfgReportRspCmd->attrList[i].status,
    987          	  	cfgReportRspCmd->attrList[i].direction, cfgReportRspCmd->attrList[i].attrID);
   \                     ??zclController_ProcessInConfigReportRspCmd_3:
   \   000058   E5..         MOV       A,?V2
   \   00005A   F5..         MOV       ?V4,A
   \   00005C   75..00       MOV       ?V5,#0x0
   \   00005F   7402         MOV       A,#0x2
   \   000061   78..         MOV       R0,#?V4
   \   000063   12....       LCALL     ?S_SHL
   \   000066   E5..         MOV       A,?V0
   \   000068   25..         ADD       A,?V4
   \   00006A   F8           MOV       R0,A
   \   00006B   E5..         MOV       A,?V1
   \   00006D   35..         ADDC      A,?V5
   \   00006F   F9           MOV       R1,A
   \   000070   E8           MOV       A,R0
   \   000071   FA           MOV       R2,A
   \   000072   E9           MOV       A,R1
   \   000073                ; Setup parameters for call to function printf
   \   000073   8882         MOV       DPL,R0
   \   000075   F583         MOV       DPH,A
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00007D   8882         MOV       DPL,R0
   \   00007F   8983         MOV       DPH,R1
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F5..         MOV       ?V4,A
   \   000086   75..00       MOV       ?V5,#0x0
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   8A82         MOV       DPL,R2
   \   000090   8983         MOV       DPH,R1
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F5..         MOV       ?V4,A
   \   000096   78..         MOV       R0,#?V4
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   7A..         MOV       R2,#`?<Constant ",%02X,%02X,%04X">` & 0xff
   \   00009D   7B..         MOV       R3,#(`?<Constant ",%02X,%02X,%04X">` >> 8) & 0xff
   \   00009F   12....       LCALL     ?Subroutine38 & 0xFFFF
    988              }
   \                     ??CrossCallReturnLabel_70:
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A5   05..         INC       ?V2
   \                     ??zclController_ProcessInConfigReportRspCmd_2:
   \   0000A7   85..82       MOV       DPL,?V0
   \   0000AA   85..83       MOV       DPH,?V1
   \   0000AD   12....       LCALL     ?Subroutine22 & 0xFFFF
    989            }
   \                     ??CrossCallReturnLabel_31:
   \   0000B0   40A6         JC        ??zclController_ProcessInConfigReportRspCmd_3
    990            AT_NEW_LINE();
   \                     ??zclController_ProcessInConfigReportRspCmd_1:
   \   0000B2                ; Setup parameters for call to function AT_Uart0_Send
   \   0000B2   7C02         MOV       R4,#0x2
   \   0000B4   7D00         MOV       R5,#0x0
   \   0000B6   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000B8   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000BA   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    991          
    992            return ( TRUE );
   \   0000BD   7901         MOV       R1,#0x1
   \   0000BF   02....       LJMP      ??Subroutine57_0 & 0xFFFF
    993          }
    994          
    995          #endif // ZCL_REPORT_CONFIGURING_DEVICE
    996          
    997          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    998          /*********************************************************************
    999           * @fn      zclController_ProcessInReportCmd
   1000           *
   1001           * @brief   Process the "Profile" Report Command
   1002           *
   1003           * @param   pInMsg - incoming message to process
   1004           *
   1005           * @return  none
   1006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1007          static void zclController_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zclController_ProcessInReportCmd:
   1008          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1009            zclReportCmd_t *pInDataReport;
   1010            uint8 i;
   1011            uint8 str[17];
   1012          
   1013            pInDataReport = (zclReportCmd_t *)pInMsg->attrCmd;
   \   00000E   EA           MOV       A,R2
   \   00000F   2417         ADD       A,#0x17
   \   000011   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000014   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   1014          
   1015            AT_NEW_LINE();
   \                     ??CrossCallReturnLabel_110:
   \   000017   75....       MOV       ?V6,#`?<Constant "\\r\\n">` & 0xff
   \   00001A   75....       MOV       ?V7,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00001D                ; Setup parameters for call to function AT_Uart0_Send
   \   00001D   7C02         MOV       R4,#0x2
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   AA..         MOV       R2,?V6
   \   000023   AB..         MOV       R3,?V7
   \   000025   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1016            AT_RESP("REPORT:", 7);
   \   000028                ; Setup parameters for call to function AT_Uart0_Send
   \   000028   7C07         MOV       R4,#0x7
   \   00002A   7D00         MOV       R5,#0x0
   \   00002C   7A..         MOV       R2,#`?<Constant "REPORT:">` & 0xff
   \   00002E   7B..         MOV       R3,#(`?<Constant "REPORT:">` >> 8) & 0xff
   \   000030   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1017          
   1018            // Node Address
   1019            if (pInMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
   \   000033   E5..         MOV       A,?V0
   \   000035   240A         ADD       A,#0xa
   \   000037   FA           MOV       R2,A
   \   000038   E4           CLR       A
   \   000039   35..         ADDC      A,?V1
   \   00003B   FB           MOV       R3,A
   \   00003C   E5..         MOV       A,?V0
   \   00003E   2412         ADD       A,#0x12
   \   000040   F582         MOV       DPL,A
   \   000042   E4           CLR       A
   \   000043   35..         ADDC      A,?V1
   \   000045   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000048   7009         JNZ       ??zclController_ProcessInReportCmd_0
   1020              AT_Int16toChar(pInMsg->srcAddr.addr.shortAddr, str);
   \   00004A                ; Setup parameters for call to function AT_Int16toChar
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   1021              AT_RESP(str, 4);
   1022            } else {
   \                     ??CrossCallReturnLabel_117:
   \   000051   8005         SJMP      ??zclController_ProcessInReportCmd_1
   1023              AT_GetIEEEAddrStr(pInMsg->srcAddr.addr.extAddr, str);
   \                     ??zclController_ProcessInReportCmd_0:
   \   000053                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   000053   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
   1024              AT_RESP(str, 16);
   \   000056                ; Setup parameters for call to function AT_Uart0_Send
   \   000056   7C10         MOV       R4,#0x10
   1025            }
   \                     ??zclController_ProcessInReportCmd_1:
   \   000058   12....       LCALL     ?Subroutine31 & 0xFFFF
   1026            AT_RESP(",", 1);
   1027          
   1028            // Endpoint
   1029            AT_Int8toChar(pInMsg->srcAddr.endPoint, str);
   \                     ??CrossCallReturnLabel_51:
   \   00005B   E5..         MOV       A,?V0
   \   00005D   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000060   35..         ADDC      A,?V1
   \   000062   12....       LCALL     ?Subroutine8 & 0xFFFF
   1030            AT_RESP(str, 2);
   1031            AT_RESP(",", 1);
   1032          
   1033            // Cluster ID
   1034            AT_Int16toChar(pInMsg->clusterId, str);
   \                     ??CrossCallReturnLabel_5:
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   12....       LCALL     ?Subroutine7 & 0xFFFF
   1035            AT_RESP(str, 4);
   1036            AT_RESP(",", 1);
   1037          
   1038            // numAttr
   1039            AT_Int8toChar(pInDataReport->numAttr, str);
   \                     ??CrossCallReturnLabel_3:
   \   000075   85..82       MOV       DPL,?V8
   \   000078   85..83       MOV       DPH,?V9
   \   00007B   12....       LCALL     ?Subroutine15 & 0xFFFF
   1040            AT_RESP(str, 2);
   1041            AT_NEW_LINE();
   \                     ??CrossCallReturnLabel_17:
   \   00007E                ; Setup parameters for call to function AT_Uart0_Send
   \   00007E   7C02         MOV       R4,#0x2
   \   000080   7D00         MOV       R5,#0x0
   \   000082   AA..         MOV       R2,?V6
   \   000084   AB..         MOV       R3,?V7
   \   000086   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1042          
   1043            for (i = 0; i < pInDataReport->numAttr; i++)
   \   000089   75..00       MOV       ?V2,#0x0
   \   00008C   800E         SJMP      ??zclController_ProcessInReportCmd_2
   1044            {
   1045              AT_RESP("RPTATTR:", 8);
   1046          
   1047              // Attribute ID
   1048              AT_Int16toChar(pInDataReport->attrList[i].attrID, str);
   1049              AT_RESP(str, 4);
   1050              AT_RESP(",", 1);
   1051          
   1052              // Data type
   1053              AT_Int8toChar(pInDataReport->attrList[i].dataType, str);
   1054              AT_RESP(str,2);
   1055              AT_RESP(",",1);
   1056          
   1057              // Attribute value
   1058              if (pInDataReport->attrList[i].dataType == ZCL_DATATYPE_CHAR_STR) {
   1059                AT_RESP(pInDataReport->attrList[i].attrData+1, pInDataReport->attrList[i].attrData[0]);
   1060              } else if (pInDataReport->attrList[i].dataType == ZCL_DATATYPE_DATA16||
   1061                         pInDataReport->attrList[i].dataType == ZCL_DATATYPE_UINT16||
   1062                         pInDataReport->attrList[i].dataType == ZCL_DATATYPE_INT16) {
   1063                AT_Int16toChar(*((uint16*)pInDataReport->attrList[i].attrData),str);
   1064                AT_RESP(str, 4);
   1065              } else {
   1066                AT_Int8toChar((uint8)pInDataReport->attrList[i].attrData[0],str);
   \                     ??zclController_ProcessInReportCmd_3:
   \   00008E                ; Setup parameters for call to function AT_Int8toChar
   \   00008E   12....       LCALL     ?Subroutine18 & 0xFFFF
   1067                AT_RESP(str,2);
   1068              }
   \                     ??CrossCallReturnLabel_23:
   \   000091   7D00         MOV       R5,#0x0
   \   000093   AA..         MOV       R2,?XSP + 0
   \   000095   AB..         MOV       R3,?XSP + 1
   \                     ??zclController_ProcessInReportCmd_4:
   \   000097   12....       LCALL     ?Subroutine34 & 0xFFFF
   1069          
   1070              AT_NEW_LINE();
   \                     ??CrossCallReturnLabel_56:
   \   00009A   05..         INC       ?V2
   \                     ??zclController_ProcessInReportCmd_2:
   \   00009C   85..82       MOV       DPL,?V8
   \   00009F   85..83       MOV       DPH,?V9
   \   0000A2   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000A5   504B         JNC       ??zclController_ProcessInReportCmd_5
   \   0000A7                ; Setup parameters for call to function AT_Uart0_Send
   \   0000A7   7C08         MOV       R4,#0x8
   \   0000A9   7D00         MOV       R5,#0x0
   \   0000AB   7A..         MOV       R2,#`?<Constant "RPTATTR:">` & 0xff
   \   0000AD   7B..         MOV       R3,#(`?<Constant "RPTATTR:">` >> 8) & 0xff
   \   0000AF   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0000B2   E5..         MOV       A,?V2
   \   0000B4   75F005       MOV       B,#0x5
   \   0000B7   A4           MUL       AB
   \   0000B8   F8           MOV       R0,A
   \   0000B9   A9F0         MOV       R1,B
   \   0000BB   E5..         MOV       A,?V8
   \   0000BD   28           ADD       A,R0
   \   0000BE   F5..         MOV       ?V0,A
   \   0000C0   E5..         MOV       A,?V9
   \   0000C2   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000C5   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000C8   E5..         MOV       A,?V0
   \   0000CA   2403         ADD       A,#0x3
   \   0000CC   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000CF   2404         ADD       A,#0x4
   \   0000D1   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000D4   7442         MOV       A,#0x42
   \   0000D6   68           XRL       A,R0
   \   0000D7   7005         JNZ       ??zclController_ProcessInReportCmd_6
   \   0000D9   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000DC   80B9         SJMP      ??zclController_ProcessInReportCmd_4
   \                     ??zclController_ProcessInReportCmd_6:
   \   0000DE   7409         MOV       A,#0x9
   \   0000E0   68           XRL       A,R0
   \   0000E1   600A         JZ        ??zclController_ProcessInReportCmd_7
   \   0000E3   7421         MOV       A,#0x21
   \   0000E5   68           XRL       A,R0
   \   0000E6   6005         JZ        ??zclController_ProcessInReportCmd_7
   \   0000E8   7429         MOV       A,#0x29
   \   0000EA   68           XRL       A,R0
   \   0000EB   70A1         JNZ       ??zclController_ProcessInReportCmd_3
   \                     ??zclController_ProcessInReportCmd_7:
   \   0000ED                ; Setup parameters for call to function AT_Int16toChar
   \   0000ED   12....       LCALL     ?Subroutine11 & 0xFFFF
   1071            }
   \                     ??CrossCallReturnLabel_114:
   \   0000F0   809F         SJMP      ??CrossCallReturnLabel_23
   1072            AT_RESP("END\r\n", 5);
   \                     ??zclController_ProcessInReportCmd_5:
   \   0000F2                ; Setup parameters for call to function AT_Uart0_Send
   \   0000F2   7C05         MOV       R4,#0x5
   \   0000F4   7D00         MOV       R5,#0x0
   \   0000F6   7A..         MOV       R2,#`?<Constant "END\\r\\n">` & 0xff
   \   0000F8   7B..         MOV       R3,#(`?<Constant "END\\r\\n">` >> 8) & 0xff
   \   0000FA   12....       LCALL     ?Subroutine34 & 0xFFFF
   1073            AT_NEW_LINE();
   1074          }
   \                     ??CrossCallReturnLabel_57:
   \   0000FD   7411         MOV       A,#0x11
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   7F0A         MOV       R7,#0xa
   \   000104   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   AA..         MOV       R2,?V6
   \   000005   AB..         MOV       R3,?V7
   \   000007   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000A   22           RET
   1075          #endif  // ZCL_REPORT_DESTINATION_DEVICE
   1076          
   1077          /*********************************************************************
   1078           * @fn      zclController_ProcessInDefaultRspCmd
   1079           *
   1080           * @brief   Process the "Profile" Default Response Command
   1081           *
   1082           * @param   pInMsg - incoming message to process
   1083           *
   1084           * @return  none
   1085           ********************************************************************/
   1086          static uint8 zclController_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1087          {
   1088            zclDefaultRspCmd_t *defaultRspCmd;
   1089            uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
   1090            uint8  endpoint = pInMsg->srcAddr.endPoint;
   1091            uint16 cID = pInMsg->clusterId;
   1092          
   1093            defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1094            AT_NEW_LINE();
   1095            printf("DFTRSP:%04X,%02X,%04X,%02X,%02X", nodeId, endpoint, cID, defaultRspCmd->commandID,
   1096            									defaultRspCmd->statusCode);
   1097            AT_NEW_LINE();
   1098          
   1099            return ( TRUE );
   1100          }
   1101          
   1102          #ifdef ZCL_DISCOVER
   1103          /*********************************************************************
   1104           * @fn      zclController_ProcessInDiscCmdsRspCmd
   1105           *
   1106           * @brief   Process the Discover Commands Response Command
   1107           *
   1108           * @param   pInMsg - incoming message to process
   1109           *
   1110           * @return  none
   1111           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1112          static uint8 zclController_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclController_ProcessInDiscCmdsRspCmd:
   1113          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1114            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1115            uint8 i;
   1116          
   1117            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000007   3B           ADDC      A,R3
   \   000008   F583         MOV       DPH,A
   \   00000A   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00000D   F9           MOV       R1,A
   1118            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \   00000E   7A00         MOV       R2,#0x0
   \   000010   8001         SJMP      ??zclController_ProcessInDiscCmdsRspCmd_0
   \                     ??zclController_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclController_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclController_ProcessInDiscCmdsRspCmd_1
   1119            {
   1120              // Device is notified of the result of its attribute discovery command.
   1121            }
   1122          
   1123            return ( TRUE );
   \   000020   7901         MOV       R1,#0x1
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET
   1124          }
   1125          
   1126          /*********************************************************************
   1127           * @fn      zclController_ProcessInDiscAttrsRspCmd
   1128           *
   1129           * @brief   Process the "Profile" Discover Attributes Response Command
   1130           *
   1131           * @param   pInMsg - incoming message to process
   1132           *
   1133           * @return  none
   1134           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine58_0
   \   000008                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1135          static uint8 zclController_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclController_ProcessInDiscAttrsRspCmd:
   1136          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1137            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1138            uint8 i;
   1139            uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   12....       LCALL     ?Subroutine19 & 0xFFFF
   1140            uint8  endpoint = pInMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_112:
   \   000012   EA           MOV       A,R2
   \   000013   2413         ADD       A,#0x13
   \   000015   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V6,A
   1141          
   1142            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   \   00001B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00001E   35..         ADDC      A,?V1
   \   000020   12....       LCALL     ?Subroutine13 & 0xFFFF
   1143            AT_NEW_LINE();
   1144            printf("DISCATTR:%04X,%02X,%02X,%02X", nodeId, endpoint, discoverRspCmd->numAttr,
   1145            									discoverRspCmd->discComplete); // 0-Uncompleted 1-completed
   \                     ??CrossCallReturnLabel_13:
   \   000023   A3           INC       DPTR
   \   000024   8582..       MOV       ?V4,DPL
   \   000027   8583..       MOV       ?V5,DPH
   \   00002A                ; Setup parameters for call to function printf
   \   00002A   85..82       MOV       DPL,?V2
   \   00002D   85..83       MOV       DPH,?V3
   \   000030   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   85..82       MOV       DPL,?V4
   \   000039   85..83       MOV       DPH,?V5
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F5..         MOV       ?V10,A
   \   00003F   78..         MOV       R0,#?V10
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..00       MOV       ?V7,#0x0
   \   000047   78..         MOV       R0,#?V6
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   78..         MOV       R0,#?V8
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7A..         MOV       R2,#`?<Constant "DISCATTR:%04X,%02X,%0...">` & 0xff
   \   000053   7B..         MOV       R3,#(`?<Constant "DISCATTR:%04X,%02X,%0...">` >> 8) & 0xff
   \   000055   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000058   7408         MOV       A,#0x8
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   1146            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   \   00005D   75..00       MOV       ?V6,#0x0
   \   000060   804B         SJMP      ??zclController_ProcessInDiscAttrsRspCmd_0
   1147            {
   1148              AT_NEXT_LINE();
   \                     ??zclController_ProcessInDiscAttrsRspCmd_1:
   \   000062                ; Setup parameters for call to function AT_Uart0_Send
   \   000062   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1149              printf("CLUS:%04X,ATTR:%04X,TYPE:%02X",
   1150                     pInMsg->clusterId,
   1151                     discoverRspCmd->attrList[i].attrID,
   1152                     discoverRspCmd->attrList[i].dataType);
   \   000065   E5..         MOV       A,?V6
   \   000067   75F003       MOV       B,#0x3
   \   00006A   A4           MUL       AB
   \   00006B   F8           MOV       R0,A
   \   00006C   A9F0         MOV       R1,B
   \   00006E   E5..         MOV       A,?V2
   \   000070   28           ADD       A,R0
   \   000071   F8           MOV       R0,A
   \   000072   E5..         MOV       A,?V3
   \   000074   39           ADDC      A,R1
   \   000075   F9           MOV       R1,A
   \   000076   E8           MOV       A,R0
   \   000077   FA           MOV       R2,A
   \   000078   E9           MOV       A,R1
   \   000079                ; Setup parameters for call to function printf
   \   000079   8882         MOV       DPL,R0
   \   00007B   F583         MOV       DPH,A
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   12....       LCALL     ?Subroutine26 & 0xFFFF
   1153            }
   \                     ??CrossCallReturnLabel_39:
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   8A82         MOV       DPL,R2
   \   000089   8983         MOV       DPH,R1
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000090   85..82       MOV       DPL,?V0
   \   000093   85..83       MOV       DPH,?V1
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A1   7A..         MOV       R2,#`?<Constant "CLUS:%04X,ATTR:%04X,T...">` & 0xff
   \   0000A3   7B..         MOV       R3,#(`?<Constant "CLUS:%04X,ATTR:%04X,T...">` >> 8) & 0xff
   \   0000A5   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   05..         INC       ?V6
   \                     ??zclController_ProcessInDiscAttrsRspCmd_0:
   \   0000AD   85..82       MOV       DPL,?V4
   \   0000B0   85..83       MOV       DPH,?V5
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F8           MOV       R0,A
   \   0000B5   E5..         MOV       A,?V6
   \   0000B7   C3           CLR       C
   \   0000B8   98           SUBB      A,R0
   \   0000B9   7C02         MOV       R4,#0x2
   \   0000BB   7D00         MOV       R5,#0x0
   \   0000BD   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000BF   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000C1   409F         JC        ??zclController_ProcessInDiscAttrsRspCmd_1
   1154            AT_NEXT_LINE();
   \   0000C3                ; Setup parameters for call to function AT_Uart0_Send
   \   0000C3   02....       LJMP      ?Subroutine5 & 0xFFFF
   1155            AT_RESP("END\r\n", 5);
   1156            AT_NEW_LINE();
   1157          
   1158            return ( TRUE );
   1159          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclController_SimpleDesc>`:
   \   000000   64           DB 100
   \   000001   0401         DW 260
   \   000003   0600         DW 6
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   0000         DW 0H
   \   000009   00           DB 0
   \   00000A   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "REMOTE RESPONSE:">`:
   \   000000   52454D4F     DB "REMOTE RESPONSE:"
   \            54452052
   \            4553504F
   \            4E53453A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ENABLED:">`:
   \   000000   454E4142     DB "ENABLED:"
   \            4C45443A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DISABLED:">`:
   \   000000   44495341     DB "DISABLED:"
   \            424C4544
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UNKNOWNEP ERROR">`:
   \   000000   554E4B4E     DB "UNKNOWNEP ERROR"
   \            4F574E45
   \            50204552
   \            524F5200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nOK\\r\\n">`:
   \   000000   0D0A4F4B     DB "\015\012OK\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "---------ADDR,EP,C_ID...">`:
   \   000000   2D2D2D2D     DB "---------ADDR,EP,C_ID,A_ID,ST,DT,DV"
   \            2D2D2D2D
   \            2D414444
   \            522C4550
   \            2C435F49
   \            442C415F
   \            49442C53
   \            542C4454
   \            2C445600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ReadAttr:">`:
   \   000000   52656164     DB "ReadAttr:"
   \            41747472
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",">`:
   \   000000   2C00         DB ","

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "----------ADDR,EP,C_I...">`:
   \   000000   2D2D2D2D     DB "----------ADDR,EP,C_ID,ST"
   \            2D2D2D2D
   \            2D2D4144
   \            44522C45
   \            502C435F
   \            49442C53
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WriteAttr:">`:
   \   000000   57726974     DB "WriteAttr:"
   \            65417474
   \            723A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "READRCFGRSP:%04X,%02X...">`:
   \   000000   52454144     DB "READRCFGRSP:%04X,%02X,%04X,%02X"
   \            52434647
   \            5253503A
   \            25303458
   \            2C253032
   \            582C2530
   \            34582C25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATTR%02X:%02X,%02X,%04X">`:
   \   000000   41545452     DB "ATTR%02X:%02X,%02X,%04X"
   \            25303258
   \            3A253032
   \            582C2530
   \            32582C25
   \            30345800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",%02X,%04X,%04X,">`:
   \   000000   2C253032     DB ",%02X,%04X,%04X,"
   \            582C2530
   \            34582C25
   \            3034582C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",%04X">`:
   \   000000   2C253034     DB ",%04X"
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "END\\r\\n">`:
   \   000000   454E440D     DB "END\015\012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CFGRPTRSP:%04X,%02X,%04X">`:
   \   000000   43464752     DB "CFGRPTRSP:%04X,%02X,%04X"
   \            50545253
   \            503A2530
   \            34582C25
   \            3032582C
   \            25303458
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",00">`:
   \   000000   2C303000     DB ",00"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",%02X,%02X,%04X">`:
   \   000000   2C253032     DB ",%02X,%02X,%04X"
   \            582C2530
   \            32582C25
   \            30345800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "REPORT:">`:
   \   000000   5245504F     DB "REPORT:"
   \            52543A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RPTATTR:">`:
   \   000000   52505441     DB "RPTATTR:"
   \            5454523A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DFTRSP:%04X,%02X,%04X...">`:
   \   000000   44465452     DB "DFTRSP:%04X,%02X,%04X,%02X,%02X"
   \            53503A25
   \            3034582C
   \            25303258
   \            2C253034
   \            582C2530
   \            32582C25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DISCATTR:%04X,%02X,%0...">`:
   \   000000   44495343     DB "DISCATTR:%04X,%02X,%02X,%02X"
   \            41545452
   \            3A253034
   \            582C2530
   \            32582C25
   \            3032582C
   \            25303258
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLUS:%04X,ATTR:%04X,T...">`:
   \   000000   434C5553     DB "CLUS:%04X,ATTR:%04X,TYPE:%02X"
   \            3A253034
   \            582C4154
   \            54523A25
   \            3034582C
   \            54595045
   \            3A253032
   \            5800    
   1160          
   1161          /*********************************************************************
   1162           * @fn      zclController_ProcessInDiscAttrsExtRspCmd
   1163           *
   1164           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1165           *
   1166           * @param   pInMsg - incoming message to process
   1167           *
   1168           * @return  none
   1169           ********************************************************************/
   1170          static uint8 zclController_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1171          {
   1172            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1173            uint8 i;
   1174          
   1175            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1176            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1177            {
   1178              // Device is notified of the result of its attribute discovery command.
   1179            }
   1180          
   1181            return ( TRUE );
   1182          }
   1183          #endif // ZCL_DISCOVER
   1184          
   1185          /****************************************************************************
   1186          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   ATApp_MessageMSGCB
        0     10   -> AT_zclCtrl_REpCtrl_req
        0     10   -> AT_zclCtrl_REpCtrl_rsp
        0     10   -> bdb_resetLocalAction
      0      9   AT_Endpoint_Controller
      1     14   AT_Endpoint_Register
        0     14   -> osal_mem_alloc
      1     52   AT_SendCmd
        0     31   -> AF_DataRequest
        0     22   -> afFindEndPointDesc
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
      1     23   AT_SendEPCtrl
        0     21   -> AT_SendCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1     37   AT_SendEPCtrl_rsp
        0     21   -> AT_SendCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      0      9   AT_zclController_Init
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> zcl_registerForMsg
      0     30   AT_zclController_ProcessIncomingMsg
        0     20   -> AT_Uart0_Send
        0     20   -> osal_mem_free
        0     30   -> printf
        0     20   -> zclController_ProcessInConfigReportRspCmd
        0     20   -> zclController_ProcessInDiscAttrsRspCmd
        0     20   -> zclController_ProcessInDiscCmdsRspCmd
        0     20   -> zclController_ProcessInReadReportCfgRspCmd
        0     20   -> zclController_ProcessInReadRspCmd
        0     20   -> zclController_ProcessInReportCmd
        0     20   -> zclController_ProcessInWriteRspCmd
      1     26   AT_zclCtrl_REpCtrl_req
        0     16   -> AT_SendEPCtrl_rsp
        0     14   -> AT_UARTWriteErrMsg
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      0     23   AT_zclCtrl_REpCtrl_rsp
        0     13   -> AT_Int8toChar
        0     13   -> AT_Uart0_Send
      0     34   zclController_PrintfAttrData
        0     14   -> AT_IntxtoChar
        0     14   -> AT_Uart0_Send
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      0     42   zclController_ProcessInConfigReportRspCmd
        0     16   -> AT_Uart0_Send
        0     22   -> printf
      0     48   zclController_ProcessInDiscAttrsRspCmd
        0     20   -> AT_Uart0_Send
        0     26   -> printf
        0     28   -> printf
      2     20   zclController_ProcessInDiscCmdsRspCmd
      0     48   zclController_ProcessInReadReportCfgRspCmd
        0     20   -> AT_Uart0_Send
        0     22   -> printf
        0     26   -> printf
        0     28   -> printf
        0     20   -> zclAnalogDataType
        0     20   -> zclController_PrintfAttrData
      0     59   zclController_ProcessInReadRspCmd
        0     39   -> AT_GetIEEEAddrStr
        0     39   -> AT_Int16toChar
        0     39   -> AT_Int8toChar
        0     39   -> AT_Uart0_Send
      0     55   zclController_ProcessInReportCmd
        0     35   -> AT_GetIEEEAddrStr
        0     35   -> AT_Int16toChar
        0     35   -> AT_Int8toChar
        0     35   -> AT_Uart0_Send
      0     59   zclController_ProcessInWriteRspCmd
        0     39   -> AT_GetIEEEAddrStr
        0     39   -> AT_Int16toChar
        0     39   -> AT_Int8toChar
        0     39   -> AT_Uart0_Send


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant ",">
      16  ?<Constant ",%02X,%02X,%04X">
      17  ?<Constant ",%02X,%04X,%04X,">
       6  ?<Constant ",%04X">
       4  ?<Constant ",00">
      26  ?<Constant "----------ADDR,EP,C_I...">
      36  ?<Constant "---------ADDR,EP,C_ID...">
      24  ?<Constant "ATTR%02X:%02X,%02X,%04X">
      25  ?<Constant "CFGRPTRSP:%04X,%02X,%04X">
      30  ?<Constant "CLUS:%04X,ATTR:%04X,T...">
      32  ?<Constant "DFTRSP:%04X,%02X,%04X...">
      10  ?<Constant "DISABLED:">
      29  ?<Constant "DISCATTR:%04X,%02X,%0...">
       9  ?<Constant "ENABLED:">
       6  ?<Constant "END\r\n">
      32  ?<Constant "READRCFGRSP:%04X,%02X...">
      17  ?<Constant "REMOTE RESPONSE:">
       8  ?<Constant "REPORT:">
       9  ?<Constant "RPTATTR:">
      10  ?<Constant "ReadAttr:">
      16  ?<Constant "UNKNOWNEP ERROR">
      11  ?<Constant "WriteAttr:">
       3  ?<Constant "\r\n">
       7  ?<Constant "\r\nOK\r\n">
      12  ?<Initializer for zclController_SimpleDesc>
      10  ??Subroutine56_0
       5  ??Subroutine57_0
       8  ??Subroutine58_0
       5  ??Subroutine59_0
       4  ??Subroutine60_0
       5  ??Subroutine61_0
       5  ??Subroutine62_0
       5  ?Subroutine0
       5  ?Subroutine1
       9  ?Subroutine10
       7  ?Subroutine11
      30  ?Subroutine12
      11  ?Subroutine13
       8  ?Subroutine14
       4  ?Subroutine15
      18  ?Subroutine16
      32  ?Subroutine17
      14  ?Subroutine18
       8  ?Subroutine19
       5  ?Subroutine2
      14  ?Subroutine20
       9  ?Subroutine21
       7  ?Subroutine22
      10  ?Subroutine23
       7  ?Subroutine24
       5  ?Subroutine25
       9  ?Subroutine26
      23  ?Subroutine27
       2  ?Subroutine28
      24  ?Subroutine29
       7  ?Subroutine3
       8  ?Subroutine30
       8  ?Subroutine31
       7  ?Subroutine32
      11  ?Subroutine33
      11  ?Subroutine34
      13  ?Subroutine35
       7  ?Subroutine36
       6  ?Subroutine37
       6  ?Subroutine38
       8  ?Subroutine39
       2  ?Subroutine4
      17  ?Subroutine40
       4  ?Subroutine41
       4  ?Subroutine42
       5  ?Subroutine43
      17  ?Subroutine44
      10  ?Subroutine45
      11  ?Subroutine46
      21  ?Subroutine47
      20  ?Subroutine48
       9  ?Subroutine49
      16  ?Subroutine5
       9  ?Subroutine50
       9  ?Subroutine51
      21  ?Subroutine52
       8  ?Subroutine53
       6  ?Subroutine54
      12  ?Subroutine55
      28  ?Subroutine6
       8  ?Subroutine7
       8  ?Subroutine8
       4  ?Subroutine9
      61  ATApp_MessageMSGCB
      58  AT_Endpoint_Controller
     144  AT_Endpoint_Register
     183  AT_SendCmd
      71  AT_SendEPCtrl
      73  AT_SendEPCtrl_rsp
      25  AT_zclController_Init
     260  AT_zclController_ProcessIncomingMsg
     114  AT_zclCtrl_REpCtrl_req
     165  AT_zclCtrl_REpCtrl_rsp
       2  zclController_EP_List
     406  zclController_PrintfAttrData
     194  zclController_ProcessInConfigReportRspCmd
     198  zclController_ProcessInDiscAttrsRspCmd
      41  zclController_ProcessInDiscCmdsRspCmd
     350  zclController_ProcessInReadReportCfgRspCmd
     259  zclController_ProcessInReadRspCmd
     263  zclController_ProcessInReportCmd
     283  zclController_ProcessInWriteRspCmd
      12  zclController_SimpleDesc
       4  zclCtrl_InClusterList
       2  zclCtrl_OutClusterList
       1  zclCtrl_TransID
     108  -- Other

 
 3 797 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
   391 bytes in segment XDATA_ROM_C
     3 bytes in segment XDATA_Z
 
   120 bytes of CODE     memory
   391 bytes of CONST    memory
 3 797 bytes of HUGECODE memory
    15 bytes of XDATA    memory

Errors: none
Warnings: none
