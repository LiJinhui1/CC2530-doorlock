###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Nov/2021  10:54:58
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWB303.tmp
#        (F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb.c
#        -D ZIGBEEPRO -D INTER_PAN -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D
#        HAL_UART_ISR_RX_MAX=100 -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG
#        -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D ZCL_REPORT_CONFIGURING_DEVICE -D
#        ZCL_REPORT_DESTINATION_DEVICE -lC
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List\bdb.lst
#    Object file        =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\Obj\bdb.r51
#
###############################################################################

F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb.c
      1          /**************************************************************************************************
      2            Filename:       bdb.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDApp.h"
     46          #include "OSAL.h"
     47          #include "ZDConfig.h"
     48          #include "hal_led.h"
     49          #include "ZDObject.h"
     50          #include "OSAL_Nv.h"
     51          #include "AddrMgr.h"
     52          #include "ZDSecMgr.h"
     53          #include "nwk.h"
     54          #include "nwk_util.h"
     55          #include "ssp_hash.h"
     56          #ifdef BDB_REPORTING
     57          #include "bdb_Reporting.h"
     58          #endif
     59          
     60          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     61          #include "gp_interface.h"
     62          #include "gp_common.h"
     63          #include "dgp_stub.h"
     64          #endif
     65          
     66          #include "bdb_interface.h"
     67          
     68          #if defined ( INTER_PAN )
     69          #if defined ( BDB_TL_INITIATOR )
     70          #include "bdb_touchlink_initiator.h"
     71          #endif
     72          #if defined ( BDB_TL_TARGET )
     73          #include "bdb_touchlink_target.h"
     74          #endif
     75          #endif
     76          
     77          #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
     78            #include "bdb_touchlink.h"
     79          #endif
     80          
     81          #ifdef MT_APP_CNF_FUNC
     82          #include "MT_APP_CONFIG.h"
     83          #endif
     84          
     85          #include "AT_uart.h"
     86          
     87           /*********************************************************************
     88           * MACROS
     89           */
     90          //This is actually the channels used
     91          #define vScanChannels  zgDefaultChannelList
     92          
     93           /*********************************************************************
     94           * CONSTANTS
     95           */
     96          
     97          #define NUMBER_OF_CHANNELS     16
     98          
     99          #define CHANNEL_11_MASK_POS    11
    100          #define CHANNEL_26_MASK_POS    26
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
   \                     bdb_FB_InitiatorCurrentCyclesNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          
    104          /*********************************************************************
    105           * TYPEDEFS
    106           */
    107          
    108          
    109           /*********************************************************************
    110           * GLOBAL VARIABLES
    111           */
    112          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          byte bdb_TaskID;
   \                     bdb_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    114          bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
   \                     bdbAttributes:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for bdbAttributes>`
   \   000012                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          epList_t *bdb_HeadEpDescriptorList = NULL;
   \                     bdb_HeadEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          epList_t *bdb_CurrEpDescriptorList = NULL;
   \                     bdb_CurrEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    117          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          bdbFindingBindingRespondent_t *pRespondentHead = NULL;
   \                     pRespondentHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
   \                     pRespondentCurr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          bdbFindingBindingRespondent_t *pRespondentNext = NULL;
   \                     pRespondentNext:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    121          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          bdbCommissioningProcedureState_t bdbCommissioningProcedureState;
   \                     bdbCommissioningProcedureState:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
   \                     bdb_initialization:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    124          
    125          //Nwk formation and nwk steering for nodes not in nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          bool vDoPrimaryScan = TRUE;
   \                     vDoPrimaryScan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for vDoPrimaryScan>`
   \   000001                REQUIRE __INIT_XDATA_I
    127          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
   \                     zgBdbInstallCodeCRC:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
   \   000012                REQUIRE __INIT_XDATA_I
    129          
    130          //Pointer of the nwk being tried in association process
    131          #if (ZG_BUILD_JOINING_TYPE)
    132          static networkDesc_t *pBDBListNwk = NULL;
    133          #endif
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 bdb_ZclTransactionSequenceNumber=0x00;
   \                     bdb_ZclTransactionSequenceNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          bool touchLinkTargetEnabled = FALSE;
   \                     touchLinkTargetEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          
    139           /*********************************************************************
    140           * EXTERNAL VARIABLES
    141           */
    142          
    143          extern devStartModes_t devStartMode;
    144          extern bool  requestNewTrustCenterLinkKey;
    145          extern uint32 requestLinkKeyTimeout;
    146          extern uint32 ZDApp_SavedPollRate;
    147          
    148          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    149          extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
    150          extern uint8 bdbIndentifyActiveEndpoint;
    151          #endif
    152          
    153          extern bdbFindingBindingRespondent_t *pRespondentNext;
    154          
    155          #ifndef DISABLE_GREENPOWER_BASIC_PROXY
    156          extern ZDO_DeviceAnnce_t aliasConflictAnnce;
    157          #endif
    158          
    159          /*********************************************************************
    160           * EXTERNAL FUNCTIONS
    161           */
    162          
    163          extern void ZDApp_ResetTimerStart( uint16 delay );
    164          extern void ZDApp_NodeProfileSync( uint8 stackProfile );
    165          extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    166          extern uint8 ZDApp_ReadNetworkRestoreState( void );
    167          
    168          extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    169          extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    170          extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    171          
    172          /*********************************************************************
    173           * LOCAL VARIABLES
    174           */
    175          #if (ZG_BUILD_JOINING_TYPE)
    176            static uint8 bdb_nwkAssocRetriesCount = 0;
    177          #endif
    178          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179            static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
   \                     bdb_joiningDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    180          #endif
    181          
    182          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    183          //Latch to save the status success of any attempt in the periodic F&B process

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8 bdb_FBStateSuccessLatch = FALSE;
   \                     bdb_FBStateSuccessLatch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    185          #endif
    186           /*********************************************************************
    187           * LOCAL FUNCTIONS
    188           */
    189          static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
    190          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
    191          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
    192          
    193          #if (ZG_BUILD_JOINING_TYPE)
    194          static void bdb_requestTCStackVersion(void);
    195          static void bdb_requestTCLinkKey(void);
    196          static void bdb_requestVerifyTCLinkKey(void);
    197          static void bdb_tryNwkAssoc(void);
    198          #endif
    199          
    200          
    201          static void bdb_processTimeout(void);
    202          static void bdb_startResumeCommissioningProcess(void);
    203          static void bdb_nwkSteeringDeviceOnNwk(void);
    204          static void bdb_nwkJoiningFormation(bool isJoining);
    205          
    206          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    207          static uint8 gp_ChangeChannelReq(void);
    208          static void gp_CBInit(void);
    209          #endif
    210          
    211          
    212          #if (ZG_BUILD_COORDINATOR_TYPE)
    213          static void bdb_TCProcessJoiningList(void);
    214          static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
    215          #endif
    216          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
   \                     pfnTCLinkKeyExchangeProcessCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    218          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL;
   \                     pfnCommissioningStatusCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    220          #if (ZG_BUILD_JOINING_TYPE)
    221          static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
    222          static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;
    223          #endif
    224          
    225          
    226          
    227          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
    228          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
    229          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
    230          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
    231          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
    232          
    233          /*********************************************************************
    234           * PUBLIC FUNCTIONS
    235           *********************************************************************/
    236          void bdb_filterNwkDisc(void);
    237          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
    238          
    239          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
    240          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
    241          
    242           /*********************************************************************
    243           * @fn          bdb_Init
    244           *
    245           * @brief       Initialization function for the Base Device Behavior.
    246           *
    247           * @param       task_id - bdb_TaskID Task ID
    248           *
    249           * @return      none
    250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void bdb_Init( byte task_id )
   \                     bdb_Init:
    252          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    253            bdb_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#bdb_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    254          
    255          #if (ZG_BUILD_COORDINATOR_TYPE)
    256            if(ZG_DEVICE_COORDINATOR_TYPE)
    257            {
    258              if(bdbAttributes.bdbJoinUsesInstallCodeKey)
   \   00000B   90....       MOV       DPTR,#bdbAttributes + 15
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6006         JZ        ??bdb_Init_0
    259              {
    260                zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   000011   90....       MOV       DPTR,#zgAllowInstallCodes
   \   000014   7402         MOV       A,#0x2
   \   000016   F0           MOVX      @DPTR,A
    261              }
    262            }
    263          #endif
    264          
    265          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
    266            touchLinkInitiator_InitDevice( );
    267          #endif
    268          
    269          #if (BDB_REPORTING)
    270            bdb_RepInit();
    271          #endif
    272          
    273            //Register ZDO callbacks
    274            ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
   \                     ??bdb_Init_0:
   \   000017                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000017   7A02         MOV       R2,#0x2
   \   000019   7B80         MOV       R3,#-0x80
   \   00001B   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    275          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    276            ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
   \   00001E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001E   7A01         MOV       R2,#0x1
   \   000020   7B80         MOV       R3,#-0x80
   \   000022   EE           MOV       A,R6
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    277            ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
   \   000027                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000027   7A04         MOV       R2,#0x4
   \   000029   7B80         MOV       R3,#-0x80
   \   00002B   EE           MOV       A,R6
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    278          #endif
    279          
    280          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    281            gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
    282            gp_CBInit();
    283          #endif
    284          }
   \   000030                REQUIRE ?Subroutine0
   \   000030                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    285          
    286          /*********************************************************************
    287           * @fn      bdb_RegisterSimpleDescriptor
    288           *
    289           * @brief   Register the Simple descriptor. This function also registers
    290           *          the profile's cluster conversion table.
    291           *
    292           * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
    293           *
    294           * @return  none
    295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
   \                     bdb_RegisterSimpleDescriptor:
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    298            endPointDesc_t *epDesc;
    299          
    300            // Register the application's endpoint descriptor
    301            //  - This memory is allocated and never freed.
    302            epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A07         MOV       R2,#0x7
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    303            if ( epDesc )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6023         JZ        ??bdb_RegisterSimpleDescriptor_0
    304            {
    305              // Fill out the endpoint description.
    306              epDesc->endPoint = simpleDesc->EndPoint;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   F0           MOVX      @DPTR,A
    307              epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   74..         MOV       A,#zcl_TaskID & 0xff
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   74..         MOV       A,#(zcl_TaskID >> 8) & 0xff
   \   000026   12....       LCALL     ?Subroutine10 & 0xFFFF
    308              epDesc->simpleDesc = simpleDesc;
   \                     ??CrossCallReturnLabel_0:
   \   000029   EE           MOV       A,R6
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EF           MOV       A,R7
   \   00002D   12....       LCALL     ?Subroutine10 & 0xFFFF
    309              epDesc->latencyReq = noLatencyReqs;
   \                     ??CrossCallReturnLabel_1:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
    310          
    311              // Register the endpoint description with the AF
    312              afRegister( epDesc );
   \   000034                ; Setup parameters for call to function afRegister
   \   000034   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    313            }
    314          }
   \                     ??bdb_RegisterSimpleDescriptor_0:
   \   000037   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    315          
    316          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    317          /*********************************************************************
    318           * @fn      bdb_ZclIdentifyCmdInd
    319           *
    320           * @brief   Callback from the ZCL General Cluster Library when
    321           *          it received an Identity Command for this application.
    322           *
    323           * @param   identifyTime - the number of seconds to identify yourself
    324           * @param   endpoint - destination endpoint
    325           *
    326           * @return  none
    327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    328          void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
   \                     bdb_ZclIdentifyCmdInd:
    329          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V0,R1
    330            zclAttrRec_t identifyAttrRec;
    331          
    332            if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    333                                ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   \   000010                ; Setup parameters for call to function zclFindAttrRec
   \   000010   A8..         MOV       R0,?XSP + 0
   \   000012   A9..         MOV       R1,?XSP + 1
   \   000014   88..         MOV       ?V2,R0
   \   000016   89..         MOV       ?V3,R1
   \   000018   78..         MOV       R0,#?V2
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV       R4,#0x0
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   7A03         MOV       R2,#0x3
   \   000023   7B00         MOV       R3,#0x0
   \   000025   A9..         MOV       R1,?V0
   \   000027   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   604A         JZ        ??bdb_ZclIdentifyCmdInd_0
    334            {
    335              //If we are processing an actual change
    336              if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
   \   000032   7406         MOV       A,#0x6
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6E           XRL       A,R6
   \   00003C   7003         JNZ       ??bdb_ZclIdentifyCmdInd_1
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6F           XRL       A,R7
   \                     ??bdb_ZclIdentifyCmdInd_1:
   \   000041   6039         JZ        ??bdb_ZclIdentifyCmdInd_0
    337              {
    338                if ( identifyTime > 0 )
   \   000043   EE           MOV       A,R6
   \   000044   4F           ORL       A,R7
   \   000045   8882         MOV       DPL,R0
   \   000047   8983         MOV       DPH,R1
   \   000049   6017         JZ        ??bdb_ZclIdentifyCmdInd_2
    339                {
    340                  *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
   \   00004B   EE           MOV       A,R6
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EF           MOV       A,R7
   \   00004F   F0           MOVX      @DPTR,A
    341                  osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   000050                ; Setup parameters for call to function osal_start_timerEx
   \   000050   90....       MOV       DPTR,#__Constant_3e8
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000056   7A00         MOV       R2,#0x0
   \   000058   7B20         MOV       R3,#0x20
   \   00005A   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    342                }
   \                     ??CrossCallReturnLabel_99:
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   800A         SJMP      ??CrossCallReturnLabel_110
    343                else if ( identifyTime <= 0 )
    344                {
    345                  *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
   \                     ??bdb_ZclIdentifyCmdInd_2:
   \   000062   E4           CLR       A
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   F0           MOVX      @DPTR,A
    346                  osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \   000066                ; Setup parameters for call to function osal_stop_timerEx
   \   000066   FA           MOV       R2,A
   \   000067   7B20         MOV       R3,#0x20
   \   000069   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    347                }
    348          
    349                if(pfnIdentifyTimeChangeCB != NULL)
   \                     ??CrossCallReturnLabel_110:
   \   00006C   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   00006F   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000072   6008         JZ        ??bdb_ZclIdentifyCmdInd_0
    350                {
    351                  pfnIdentifyTimeChangeCB(endpoint);
   \   000074                ; Setup parameters for indirect call
   \   000074   A9..         MOV       R1,?V0
   \   000076   12....       LCALL     ??Subroutine50_0 & 0xFFFF
    352                }
    353              }
    354            }
   \                     ??CrossCallReturnLabel_67:
   \   000079   12....       LCALL     ?CALL_IND
    355          }
   \                     ??bdb_ZclIdentifyCmdInd_0:
   \   00007C   7408         MOV       A,#0x8
   \   00007E   02....       LJMP      ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000008   7404         MOV       A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000008   22           RET
    356          #endif
    357          
    358          
    359          #if (ZG_BUILD_JOINING_TYPE)
    360           /*********************************************************************
    361           * @fn          bdb_setActiveCentralizedLinkKey
    362           *
    363           * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
    364           *
    365           * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
    366           * @param       pKey - Key to be used (if any)
    367           *
    368           * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
    369           *                          ZInvalidParameter when IC buffer is null
    370           */
    371          ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
    372          {
    373            ZStatus_t Status;
    374          
    375            uint8 extAddr[Z_EXTADDR_LEN];
    376          
    377            osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
    378          
    379            if(pKey == NULL)
    380            {
    381              return ZInvalidParameter;
    382            }
    383          
    384            //Clear it, if the request requires it, it will be set
    385            gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
    386          
    387            switch(zstack_CentralizedLinkKeyModes)
    388            {
    389              case zstack_UseDefaultGlobalTrustCenterLinkKey:
    390                //Set the default key to be used in centralized networks as defaultTCLinkKey
    391                Status = APSME_SetDefaultKey();
    392              break;
    393          
    394              case zstack_UseInstallCodeWithFallback:
    395                //same as zstack_UseInstallCode but attempt default TRUE
    396                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
    397              case zstack_UseInstallCode:
    398                 //Set the install code as default key
    399                Status = bdb_addInstallCode(pKey,extAddr);
    400              break;
    401          
    402              case zstack_UseAPSKeyWithFallback:
    403                //same as zstack_UseAPSKey but attempt default TRUE
    404                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
    405              case zstack_UseAPSKey:
    406                //Set the key as global default
    407                Status = APSME_AddTCLinkKey(pKey,extAddr);
    408              break;
    409          
    410              default:
    411                Status = ZInvalidParameter;
    412              break;
    413            }
    414          
    415            return Status;
    416          }
    417          #endif
    418          
    419          
    420          
    421          
    422          /******************************************************************************
    423           * @fn          bdb_addInstallCode
    424           *
    425           * @brief       Interface to add an install codes and adds a APS TC Link key.
    426           *
    427           * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
    428           *              pExt - [in] Extended address of the node.
    429           *
    430           * @return      ZStatus_t
    431           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    432          ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
   \                     bdb_addInstallCode:
    433          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    434            uint8  hashOutput[16];
    435            uint16 CRC;
    436          
    437          #if (ZG_BUILD_COORDINATOR_TYPE)
    438            if(ZG_DEVICE_COORDINATOR_TYPE)
    439            {
    440              if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
   \   000012   90....       MOV       DPTR,#zgAllowInstallCodes
   \   000015   E0           MOVX      A,@DPTR
   \   000016   7004         JNZ       ??bdb_addInstallCode_0
    441              {
    442                return ZFailure;
   \   000018   7901         MOV       R1,#0x1
   \   00001A   805C         SJMP      ??bdb_addInstallCode_1
    443              }
    444            }
    445          #endif
    446          
    447            if((pInstallCode == NULL) || (pExt == NULL))
   \                     ??bdb_addInstallCode_0:
   \   00001C   EA           MOV       A,R2
   \   00001D   4F           ORL       A,R7
   \   00001E   601F         JZ        ??bdb_addInstallCode_2
   \   000020   EC           MOV       A,R4
   \   000021   4D           ORL       A,R5
   \   000022   601B         JZ        ??bdb_addInstallCode_2
    448            {
    449              return ZInvalidParameter;
    450            }
    451          
    452            CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
   \   000024                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   000024   12....       LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   \   000027   8A..         MOV       ?V2,R2
   \   000029   8B..         MOV       ?V3,R3
    453          
    454            //Validate CRC
    455            if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
   \   00002B                ; Setup parameters for call to function osal_build_uint16
   \   00002B   EE           MOV       A,R6
   \   00002C   2410         ADD       A,#0x10
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3F           ADDC      A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000035   EA           MOV       A,R2
   \   000036   65..         XRL       A,?V2
   \   000038   7003         JNZ       ??bdb_addInstallCode_3
   \   00003A   EB           MOV       A,R3
   \   00003B   65..         XRL       A,?V3
   \                     ??bdb_addInstallCode_3:
   \   00003D   6004         JZ        ??bdb_addInstallCode_4
    456            {
    457              return ZInvalidParameter;
   \                     ??bdb_addInstallCode_2:
   \   00003F   7902         MOV       R1,#0x2
   \   000041   8035         SJMP      ??bdb_addInstallCode_1
    458            }
    459          
    460            sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
   \                     ??bdb_addInstallCode_4:
   \   000043                ; Setup parameters for call to function sspMMOHash
   \   000043   A8..         MOV       R0,?XSP + 0
   \   000045   A9..         MOV       R1,?XSP + 1
   \   000047   88..         MOV       ?V2,R0
   \   000049   89..         MOV       ?V3,R1
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..90       MOV       ?V2,#-0x70
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   EE           MOV       A,R6
   \   00005C   FC           MOV       R4,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FD           MOV       R5,A
   \   00005F   7900         MOV       R1,#0x0
   \   000061   7A00         MOV       R2,#0x0
   \   000063   7B00         MOV       R3,#0x0
   \   000065   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
    461          
    462            return APSME_AddTCLinkKey(hashOutput,pExt);
   \   00006D                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   00006D   AC..         MOV       R4,?V0
   \   00006F   AD..         MOV       R5,?V1
   \   000071   AA..         MOV       R2,?XSP + 0
   \   000073   AB..         MOV       R3,?XSP + 1
   \   000075   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_addInstallCode_1:
   \   000078   7410         MOV       A,#0x10
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   7F06         MOV       R7,#0x6
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
    463          }
    464          
    465          
    466          #if (ZG_BUILD_COORDINATOR_TYPE)
    467           /*********************************************************************
    468           * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
    469           *
    470           * @brief   Register a callback to receive notifications on the joining devices
    471           *          and its status on TC link key exchange
    472           *
    473           * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback
    474           *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
    475           *
    476           * @return  none
    477           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
   \                     bdb_RegisterTCLinkKeyExchangeProcessCB:
    479          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    480            if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6008         JZ        ??bdb_RegisterTCLinkKeyExchangeProcessCB_0
    481            {
    482              pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
   \   000008   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   00000B   EA           MOV       A,R2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   EB           MOV       A,R3
   \   00000F   F0           MOVX      @DPTR,A
    483            }
    484          }
   \                     ??bdb_RegisterTCLinkKeyExchangeProcessCB_0:
   \   000010   02....       LJMP      ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    485          
    486          
    487          
    488           /*********************************************************************
    489           * @fn          bdb_setTCRequireKeyExchange
    490           *
    491           * @brief       Set the bdb_setTCRequireKeyExchange attribute
    492           *
    493           * @param       isKeyExchangeRequired - True if TC will remove devices that do
    494           *              not perform key exchange after bdbTrustCenterNodeJoinTimeout,
    495           *              False to not remove devices.
    496           *
    497           * @return      none
    498           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
   \                     bdb_setTCRequireKeyExchange:
    500          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    501            bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 17
   \   000008   02....       LJMP      ??Subroutine44_0 & 0xFFFF
    502          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine45_0
   \   000001                ; // Fall through to label ??Subroutine45_0
    503          
    504          
    505          
    506           /*********************************************************************
    507           * @fn          bdb_TCAddJoiningDevice
    508           *
    509           * @brief       Add a joining device to the list of devices that must request a
    510           *              key before bdbTrustCenterNodeJoinTimeout.
    511           *
    512           * @param       parentAddr - Address of the parent device
    513           * @param       JoiningExtAddr - IEEE address of the joining device
    514           *
    515           * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
    516           *                          ZInvalidParameter
    517           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
   \                     bdb_TCAddJoiningDevice:
    519          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
    520            bdb_joiningDeviceList_t* tempJoiningDescNode;
    521          
    522            if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
   \   00000E   74FE         MOV       A,#-0x2
   \   000010   6A           XRL       A,R2
   \   000011   7003         JNZ       ??bdb_TCAddJoiningDevice_0
   \   000013   74FF         MOV       A,#-0x1
   \   000015   6B           XRL       A,R3
   \                     ??bdb_TCAddJoiningDevice_0:
   \   000016   6004         JZ        ??bdb_TCAddJoiningDevice_1
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   7005         JNZ       ??bdb_TCAddJoiningDevice_2
    523            {
    524              return ZInvalidParameter;
   \                     ??bdb_TCAddJoiningDevice_1:
   \   00001C   7902         MOV       R1,#0x2
   \   00001E   02....       LJMP      ??bdb_TCAddJoiningDevice_3 & 0xFFFF
    525            }
    526          
    527            //If the list was empty and element was allocated, then start the timer
    528            if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCAddJoiningDevice_2:
   \   000021   8C..         MOV       ?V0,R4
   \   000023   8D..         MOV       ?V1,R5
   \   000025   75..00       MOV       ?V2,#0x0
   \   000028   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00002B   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00002E   7037         JNZ       ??bdb_TCAddJoiningDevice_4
    529            {
    530              bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \   000030                ; Setup parameters for call to function osal_mem_alloc
   \   000030   7A0D         MOV       R2,#0xd
   \   000032   7B00         MOV       R3,#0x0
   \   000034   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000037   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00003A   EA           MOV       A,R2
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   EB           MOV       A,R3
   \   00003E   F0           MOVX      @DPTR,A
    531              if(bdb_joiningDeviceList == NULL)
   \   00003F   F9           MOV       R1,A
   \   000040   EA           MOV       A,R2
   \   000041   49           ORL       A,R1
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??bdb_TCAddJoiningDevice_5 & 0xFFFF
    532              {
    533                return ZFailure;
    534              }
    535          
    536              osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
   \   000047                ; Setup parameters for call to function osal_start_reload_timer
   \   000047   90....       MOV       DPTR,#__Constant_3e8
   \   00004A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B08         MOV       R3,#0x8
   \   000051   90....       MOV       DPTR,#bdb_TaskID
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   12....       LCALL     `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
    537              tempJoiningDescNode = bdb_joiningDeviceList;
   \   00005E   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FE           MOV       R6,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   806F         SJMP      ??bdb_TCAddJoiningDevice_6
    538            }
    539            //if the list was not empty then add the entry at the end of the list
    540            else
    541            {
    542              tempJoiningDescNode = bdb_joiningDeviceList;
   \                     ??bdb_TCAddJoiningDevice_4:
   \   000067   12....       LCALL     ?Subroutine35 & 0xFFFF
    543          
    544              //Validate that this is not already in the list... somehow
    545              if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \                     ??CrossCallReturnLabel_119:
   \   00006A                ; Setup parameters for call to function osal_memcmp
   \   00006A   8882         MOV       DPL,R0
   \   00006C   F583         MOV       DPH,A
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A982         MOV       R1,DPL
   \   000072   AA83         MOV       R2,DPH
   \   000074   89..         MOV       ?V8,R1
   \   000076   8A..         MOV       ?V9,R2
   \   000078   75..00       MOV       ?V10,#0x0
   \   00007B   78..         MOV       R0,#?V8
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000080   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   E9           MOV       A,R1
   \   000087   7030         JNZ       ??bdb_TCAddJoiningDevice_7
    546              {
    547                //The device added is already in the list, refresh its time and do nothing else
    548                tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    549                return ZSuccess;
    550              }
    551          
    552              while(tempJoiningDescNode->nextDev != NULL)
   \                     ??bdb_TCAddJoiningDevice_8:
   \   000089   EE           MOV       A,R6
   \   00008A   240B         ADD       A,#0xb
   \   00008C   FE           MOV       R6,A
   \   00008D   5001         JNC       ??bdb_TCAddJoiningDevice_9
   \   00008F   0F           INC       R7
   \                     ??bdb_TCAddJoiningDevice_9:
   \   000090   F582         MOV       DPL,A
   \   000092   8F83         MOV       DPH,R7
   \   000094   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000097   6026         JZ        ??bdb_TCAddJoiningDevice_10
    553              {
    554                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \   000099   E8           MOV       A,R0
   \   00009A   FE           MOV       R6,A
   \   00009B   E9           MOV       A,R1
   \   00009C   FF           MOV       R7,A
    555          
    556                //Validate that this is not already in the list... somehow
    557                if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \   00009D                ; Setup parameters for call to function osal_memcmp
   \   00009D   8882         MOV       DPL,R0
   \   00009F   F583         MOV       DPH,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A982         MOV       R1,DPL
   \   0000A5   AA83         MOV       R2,DPH
   \   0000A7   89..         MOV       ?V8,R1
   \   0000A9   8A..         MOV       ?V9,R2
   \   0000AB   78..         MOV       R0,#?V8
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B0   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   60D0         JZ        ??bdb_TCAddJoiningDevice_8
    558                {
    559                  //The device added is already in the list, refresh its time and do nothing else
    560                  tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \                     ??bdb_TCAddJoiningDevice_7:
   \   0000B9   12....       LCALL     ?Subroutine18 & 0xFFFF
    561                  return ZSuccess;
   \                     ??CrossCallReturnLabel_8:
   \   0000BC   02....       LJMP      ??bdb_TCAddJoiningDevice_11 & 0xFFFF
    562                }
    563              }
    564          
    565              tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \                     ??bdb_TCAddJoiningDevice_10:
   \   0000BF                ; Setup parameters for call to function osal_mem_alloc
   \   0000BF   7A0D         MOV       R2,#0xd
   \   0000C1   7B00         MOV       R3,#0x0
   \   0000C3   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C6   8B..         MOV       ?V5,R3
   \   0000C8   A9..         MOV       R1,?V5
   \   0000CA   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    566              if(tempJoiningDescNode->nextDev == NULL)
   \                     ??CrossCallReturnLabel_116:
   \   0000CD   7004         JNZ       ??bdb_TCAddJoiningDevice_12
    567              {
    568                return ZFailure;
   \                     ??bdb_TCAddJoiningDevice_5:
   \   0000CF   7901         MOV       R1,#0x1
   \   0000D1   807D         SJMP      ??bdb_TCAddJoiningDevice_3
    569              }
    570          
    571              tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCAddJoiningDevice_12:
   \   0000D3   EA           MOV       A,R2
   \   0000D4   FE           MOV       R6,A
   \   0000D5   EB           MOV       A,R3
   \                     ??bdb_TCAddJoiningDevice_6:
   \   0000D6   FF           MOV       R7,A
    572            }
    573          
    574            if(pfnTCLinkKeyExchangeProcessCB)
   \   0000D7   EE           MOV       A,R6
   \   0000D8   2402         ADD       A,#0x2
   \   0000DA   F5..         MOV       ?V4,A
   \   0000DC   E4           CLR       A
   \   0000DD   3F           ADDC      A,R7
   \   0000DE   F5..         MOV       ?V5,A
   \   0000E0   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   0000E3   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000E6   603E         JZ        ??bdb_TCAddJoiningDevice_13
    575            {
    576              bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    577              osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   0000E8                ; Setup parameters for call to function osal_memcpy
   \   0000E8   85....       MOV       ?V8,?V4
   \   0000EB   85....       MOV       ?V9,?V5
   \   0000EE   75..00       MOV       ?V10,#0x0
   \   0000F1   78..         MOV       R0,#?V8
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F6   7C08         MOV       R4,#0x8
   \   0000F8   7D00         MOV       R5,#0x0
   \   0000FA   7404         MOV       A,#0x4
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
    578              bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
   \   000105   85..82       MOV       DPL,?XSP + 0
   \   000108   85..83       MOV       DPH,?XSP + 1
   \   00010B   E4           CLR       A
   \   00010C   F0           MOVX      @DPTR,A
    579          
    580              bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   00010D                ; Setup parameters for call to function bdb_SendMsg
   \   00010D   A8..         MOV       R0,?XSP + 0
   \   00010F   A9..         MOV       R1,?XSP + 1
   \   000111   88..         MOV       ?V8,R0
   \   000113   89..         MOV       ?V9,R1
   \   000115   78..         MOV       R0,#?V8
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011A   7C09         MOV       R4,#0x9
   \   00011C   7B00         MOV       R3,#0x0
   \   00011E   7A09         MOV       R2,#0x9
   \   000120   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    581            }
   \                     ??CrossCallReturnLabel_61:
   \   000123   12....       LCALL     ?DEALLOC_XSTACK8
    582          
    583            tempJoiningDescNode->nextDev = NULL;
   \                     ??bdb_TCAddJoiningDevice_13:
   \   000126   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000129   E4           CLR       A
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   F0           MOVX      @DPTR,A
    584            tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \   00012D   12....       LCALL     ?Subroutine18 & 0xFFFF
    585            tempJoiningDescNode->parentAddr = parentAddr;
   \                     ??CrossCallReturnLabel_9:
   \   000130   8E82         MOV       DPL,R6
   \   000132   8F83         MOV       DPH,R7
   \   000134   E5..         MOV       A,?V6
   \   000136   F0           MOVX      @DPTR,A
   \   000137   A3           INC       DPTR
   \   000138   E5..         MOV       A,?V7
   \   00013A   F0           MOVX      @DPTR,A
    586            osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
   \   00013B                ; Setup parameters for call to function osal_memcpy
   \   00013B   78..         MOV       R0,#?V0
   \   00013D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000140   7C08         MOV       R4,#0x8
   \   000142   7D00         MOV       R5,#0x0
   \   000144   AA..         MOV       R2,?V4
   \   000146   AB..         MOV       R3,?V5
   \   000148   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
    587          
    588            return ZSuccess;
   \                     ??bdb_TCAddJoiningDevice_11:
   \   00014E   7900         MOV       R1,#0x0
   \                     ??bdb_TCAddJoiningDevice_3:
   \   000150                REQUIRE ?Subroutine4
   \   000150                ; // Fall through to label ?Subroutine4
    589          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7409         MOV       A,#0x9
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   7F0B         MOV       R7,#0xb
   \   000007   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#bdbAttributes + 16
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine39_0
   \   000004                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000004   3F           ADDC      A,R7
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   7C08         MOV       R4,#0x8
   \   000002   7D00         MOV       R5,#0x0
   \   000004   A9..         MOV       R1,?V0
   \   000006   AA..         MOV       R2,?V1
   \   000008   AB..         MOV       R3,?V2
   \   00000A                REQUIRE ??Subroutine41_0
   \   00000A                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   EA           MOV       A,R2
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   EB           MOV       A,R3
   \   000008   F0           MOVX      @DPTR,A
   \   000009   EA           MOV       A,R2
   \   00000A   49           ORL       A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    590          
    591          /****************************************************************************
    592           * @fn          bdb_TCProcessJoiningList
    593           *
    594           * @brief       Process the timer to handle the joining devices if the TC link
    595           *              key is mandatory for all devices
    596           *
    597           * @param       none
    598           *
    599           * @return      none
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          void bdb_TCProcessJoiningList(void)
   \                     bdb_TCProcessJoiningList:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    603            bdb_joiningDeviceList_t* tempJoiningDescNode;
    604          
    605            if(bdb_joiningDeviceList)
   \   00000A   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00000D   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??bdb_TCProcessJoiningList_0 & 0xFFFF
    606            {
    607              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000015   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000018   12....       LCALL     ?Subroutine24 & 0xFFFF
    608          
    609              while(tempJoiningDescNode)
    610              {
    611                if(tempJoiningDescNode->NodeJoinTimeout)
   \                     ??CrossCallReturnLabel_14:
   \   00001B   E5..         MOV       A,?V0
   \   00001D   240A         ADD       A,#0xa
   \   00001F   F582         MOV       DPL,A
   \   000021   E4           CLR       A
   \   000022   35..         ADDC      A,?V1
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6007         JZ        ??bdb_TCProcessJoiningList_1
    612                {
    613                  tempJoiningDescNode->NodeJoinTimeout--;
   \   000029   14           DEC       A
   \   00002A   F0           MOVX      @DPTR,A
    614                }
    615          
    616                if(tempJoiningDescNode->NodeJoinTimeout == 0)
   \   00002B   6003         JZ        $+5
   \   00002D   02....       LJMP      ??bdb_TCProcessJoiningList_2 & 0xFFFF
    617                {
    618                  //Check if the key exchange is required
    619                  if(bdb_doTrustCenterRequireKeyExchange())
   \                     ??bdb_TCProcessJoiningList_1:
   \   000030   E5..         MOV       A,?V0
   \   000032   2402         ADD       A,#0x2
   \   000034   FE           MOV       R6,A
   \   000035   E4           CLR       A
   \   000036   35..         ADDC      A,?V1
   \   000038   FF           MOV       R7,A
   \   000039   8E..         MOV       ?V4,R6
   \   00003B   F5..         MOV       ?V5,A
   \   00003D   75..00       MOV       ?V6,#0x0
   \   000040   90....       MOV       DPTR,#bdbAttributes + 17
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6048         JZ        ??bdb_TCProcessJoiningList_3
    620                  {
    621                      AddrMgrEntry_t entry;
    622          
    623                      entry.user = ADDRMGR_USER_DEFAULT;
   \   000046   740A         MOV       A,#0xa
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   E4           CLR       A
   \   00004C   F0           MOVX      @DPTR,A
    624                      osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   78..         MOV       R0,#?V4
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   7C08         MOV       R4,#0x8
   \   000054   7D00         MOV       R5,#0x0
   \   000056   7410         MOV       A,#0x10
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
    625          
    626                      if(AddrMgrEntryLookupExt(&entry))
   \   000061                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000061   740A         MOV       A,#0xa
   \   000063   12....       LCALL     ?XSTACK_DISP101_8
   \   000066   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000069   E9           MOV       A,R1
   \   00006A   6022         JZ        ??bdb_TCProcessJoiningList_3
    627                      {
    628                        ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
   \   00006C                ; Setup parameters for call to function ZDSecMgrAPSRemove
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000075   740F         MOV       A,#0xf
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   AC82         MOV       R4,DPL
   \   00007C   AD83         MOV       R5,DPH
   \   00007E   740D         MOV       A,#0xd
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ?Subroutine26 & 0xFFFF
    629                      }
    630                  }
   \                     ??CrossCallReturnLabel_19:
   \   000086   12....       LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
   \   000089   7402         MOV       A,#0x2
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
    631          
    632                  //Expired device either is legacy device not using the TCLK entry or got
    633                  //removed from the network because of timeout, eitherway it is not using
    634                  //TCLK entry neither the Security user in the address manager, so free the entry
    635                  //in both tables.
    636          
    637                  uint16 keyNvIndex;
    638                  uint16 index;
    639                  APSME_TCLKDevEntry_t TCLKDevEntry;
    640                  uint8 found;
    641          
    642                  //Remove the entry in address manager
    643                  ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
   \                     ??bdb_TCProcessJoiningList_3:
   \   00008E                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00008E   EE           MOV       A,R6
   \   00008F   FA           MOV       R2,A
   \   000090   EF           MOV       A,R7
   \   000091   FB           MOV       R3,A
   \   000092   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
    644          
    645                  //search for the entry in the TCLK table
    646                  keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
   \   000095                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V2,A
   \   000098   F5..         MOV       ?V3,A
   \   00009A   78..         MOV       R0,#?V2
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A4   EE           MOV       A,R6
   \   0000A5   FA           MOV       R2,A
   \   0000A6   EF           MOV       A,R7
   \   0000A7   FB           MOV       R3,A
   \   0000A8   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   8A..         MOV       ?V2,R2
   \   0000B2   8B..         MOV       ?V3,R3
   \   0000B4   AE..         MOV       R6,?V2
   \   0000B6   AF..         MOV       R7,?V3
    647          
    648                  //If found, erase it.
    649                  if(found == TRUE)
   \   0000B8   85..82       MOV       DPL,?XSP + 0
   \   0000BB   85..83       MOV       DPH,?XSP + 1
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   6401         XRL       A,#0x1
   \   0000C1   706E         JNZ       ??bdb_TCProcessJoiningList_4
    650                  {
    651                    osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   0000C3                ; Setup parameters for call to function osal_memset
   \   0000C3   7C13         MOV       R4,#0x13
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   7900         MOV       R1,#0x0
   \   0000C9   7417         MOV       A,#0x17
   \   0000CB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CE   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    652                    TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   0000D1   7427         MOV       A,#0x27
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   74FF         MOV       A,#-0x1
   \   0000D8   F0           MOVX      @DPTR,A
    653          
    654                    //Increase the shift by one. Validate the maximum shift of the seed which is 15
    655                    index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
   \   0000D9   EE           MOV       A,R6
   \   0000DA   24EF         ADD       A,#-0x11
   \   0000DC   F8           MOV       R0,A
   \   0000DD   EF           MOV       A,R7
   \   0000DE   34FE         ADDC      A,#-0x2
   \   0000E0   F9           MOV       R1,A
    656          
    657                    TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
   \   0000E1   E8           MOV       A,R0
   \   0000E2   75F009       MOV       B,#0x9
   \   0000E5   A4           MUL       AB
   \   0000E6   F8           MOV       R0,A
   \   0000E7   AAF0         MOV       R2,B
   \   0000E9   75F009       MOV       B,#0x9
   \   0000EC   E9           MOV       A,R1
   \   0000ED   A4           MUL       AB
   \   0000EE   2A           ADD       A,R2
   \   0000EF   F9           MOV       R1,A
   \   0000F0   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   0000F2   28           ADD       A,R0
   \   0000F3   F8           MOV       R0,A
   \   0000F4   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000F6   39           ADDC      A,R1
   \   0000F7   F9           MOV       R1,A
   \   0000F8   8882         MOV       DPL,R0
   \   0000FA   F583         MOV       DPH,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   12....       LCALL     ?Subroutine8 & 0xFFFF
    658                    TCLinkKeyFrmCntr[index].txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_55:
   \   000103   8882         MOV       DPL,R0
   \   000105   8983         MOV       DPH,R1
   \   000107   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    659          
    660                    //Update the entry
    661                    osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??CrossCallReturnLabel_53:
   \   00010A                ; Setup parameters for call to function osal_nv_write
   \   00010A   7417         MOV       A,#0x17
   \   00010C   12....       LCALL     ?XSTACK_DISP100_8
   \   00010F   88..         MOV       ?V2,R0
   \   000111   89..         MOV       ?V3,R1
   \   000113   78..         MOV       R0,#?V2
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000118   75..13       MOV       ?V2,#0x13
   \   00011B   75..00       MOV       ?V3,#0x0
   \   00011E   78..         MOV       R0,#?V2
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000123   7C00         MOV       R4,#0x0
   \   000125   7D00         MOV       R5,#0x0
   \   000127   EE           MOV       A,R6
   \   000128   FA           MOV       R2,A
   \   000129   EF           MOV       A,R7
   \   00012A   FB           MOV       R3,A
   \   00012B   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    662                  }
   \                     ??CrossCallReturnLabel_105:
   \   00012E   12....       LCALL     ?DEALLOC_XSTACK8
    663          
    664                  if(pfnTCLinkKeyExchangeProcessCB)
   \                     ??bdb_TCProcessJoiningList_4:
   \   000131   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000134   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000137   6035         JZ        ??bdb_TCProcessJoiningList_5
    665                  {
    666                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    667                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   000139                ; Setup parameters for call to function osal_memcpy
   \   000139   78..         MOV       R0,#?V4
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013E   7C08         MOV       R4,#0x8
   \   000140   7D00         MOV       R5,#0x0
   \   000142   7405         MOV       A,#0x5
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
    668                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
   \   00014D   7401         MOV       A,#0x1
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   7402         MOV       A,#0x2
   \   000154   F0           MOVX      @DPTR,A
    669          
    670                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   000155                ; Setup parameters for call to function bdb_SendMsg
   \   000155   14           DEC       A
   \   000156   12....       LCALL     ?XSTACK_DISP100_8
   \   000159   88..         MOV       ?V2,R0
   \   00015B   89..         MOV       ?V3,R1
   \   00015D   78..         MOV       R0,#?V2
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000162   7C09         MOV       R4,#0x9
   \   000164   7B00         MOV       R3,#0x0
   \   000166   7A09         MOV       R2,#0x9
   \   000168   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    671                  }
   \                     ??CrossCallReturnLabel_62:
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
    672          
    673                  //Free the device from the list
    674                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCProcessJoiningList_5:
   \   00016E                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   00016E   AA..         MOV       R2,?V0
   \   000170   AB..         MOV       R3,?V1
   \   000172   12....       LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    675                }
    676                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCProcessJoiningList_2:
   \   000175   E5..         MOV       A,?V0
   \   000177   12....       LCALL     ?Subroutine38 & 0xFFFF
    677              }
    678            }
   \                     ??CrossCallReturnLabel_34:
   \   00017A   35..         ADDC      A,?V1
   \   00017C   F583         MOV       DPH,A
   \   00017E   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000181   6003         JZ        $+5
   \   000183   02....       LJMP      ??CrossCallReturnLabel_14 & 0xFFFF
    679          
    680            //we are done with the list
    681            if(bdb_joiningDeviceList == NULL)
   \   000186   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000189   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00018C   7003         JNZ       ??CrossCallReturnLabel_108
    682            {
    683              osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \                     ??bdb_TCProcessJoiningList_0:
   \   00018E                ; Setup parameters for call to function osal_stop_timerEx
   \   00018E   12....       LCALL     ?Subroutine20 & 0xFFFF
    684            }
    685          }
   \                     ??CrossCallReturnLabel_108:
   \   000191   742A         MOV       A,#0x2a
   \   000193   12....       LCALL     ?DEALLOC_XSTACK8
   \   000196                REQUIRE ?Subroutine5
   \   000196                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine42_0
   \   000001                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B08         MOV       R3,#0x8
   \   000004                REQUIRE ??Subroutine57_0
   \   000004                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   E5..         MOV       A,?V0
   \   000009   45..         ORL       A,?V1
   \   00000B   22           RET
    686          
    687          
    688          
    689          /****************************************************************************
    690           * @fn          bdb_TCjoiningDeviceComplete
    691           *
    692           * @brief       This function frees a joining device from the list that has
    693           *              finished TC link key exchange process
    694           *
    695           * @param       JoiningExtAddr - Extended address of the device
    696           *
    697           * @return      none
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
   \                     bdb_TCjoiningDeviceComplete:
    700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    701            bdb_joiningDeviceList_t* tempJoiningDescNode;
    702          
    703            if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
   \   00000E   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000011   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??CrossCallReturnLabel_109 & 0xFFFF
   \   000019   EA           MOV       A,R2
   \   00001A   4B           ORL       A,R3
   \   00001B   607D         JZ        ??CrossCallReturnLabel_109
    704            {
    705              tempJoiningDescNode = bdb_joiningDeviceList;
   \   00001D   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A982         MOV       R1,DPL
   \   000028   AA83         MOV       R2,DPH
   \   00002A   89..         MOV       ?V4,R1
   \   00002C   8A..         MOV       ?V5,R2
   \   00002E   75..00       MOV       ?V6,#0x0
   \   000031                ; Setup parameters for call to function osal_memcmp
   \   000031   85....       MOV       ?V8,?V0
   \   000034   85....       MOV       ?V9,?V1
   \   000037   75..00       MOV       ?V10,#0x0
   \   00003A   78..         MOV       R0,#?V8
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003F   7C08         MOV       R4,#0x8
   \   000041   7D00         MOV       R5,#0x0
   \   000043   AB..         MOV       R3,?V6
   \   000045   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   E9           MOV       A,R1
   \   00004C   6037         JZ        ??bdb_TCjoiningDeviceComplete_0
    706          
    707              while(tempJoiningDescNode != NULL)
    708              {
    709                if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
    710                {
    711                  if(pfnTCLinkKeyExchangeProcessCB)
   \   00004E   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000051   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000054   6026         JZ        ??bdb_TCjoiningDeviceComplete_1
    712                  {
    713                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    714                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   000056                ; Setup parameters for call to function osal_memcpy
   \   000056   78..         MOV       R0,#?V4
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005B   7C08         MOV       R4,#0x8
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   7404         MOV       A,#0x4
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
    715                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
   \   00006A   12....       LCALL     ?Subroutine7 & 0xFFFF
    716          
    717                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    718                  }
   \                     ??CrossCallReturnLabel_44:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7C09         MOV       R4,#0x9
   \   000072   7B00         MOV       R3,#0x0
   \   000074   7A09         MOV       R2,#0x9
   \   000076   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
    719          
    720                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCjoiningDeviceComplete_1:
   \   00007C                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   00007C   EE           MOV       A,R6
   \   00007D   FA           MOV       R2,A
   \   00007E   EF           MOV       A,R7
   \   00007F   FB           MOV       R3,A
   \   000080   12....       LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    721                  break;
   \   000083   800A         SJMP      ??bdb_TCjoiningDeviceComplete_2
    722                }
    723                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCjoiningDeviceComplete_0:
   \   000085   12....       LCALL     ?Subroutine32 & 0xFFFF
    724              }
   \                     ??CrossCallReturnLabel_29:
   \   000088   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00008B   EE           MOV       A,R6
   \   00008C   4F           ORL       A,R7
   \   00008D   7091         JNZ       ??CrossCallReturnLabel_120
    725          
    726              if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCjoiningDeviceComplete_2:
   \   00008F   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000092   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000095   7003         JNZ       ??CrossCallReturnLabel_109
    727              {
    728                osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \   000097                ; Setup parameters for call to function osal_stop_timerEx
   \   000097   12....       LCALL     ?Subroutine20 & 0xFFFF
    729              }
    730            }
    731          }
   \                     ??CrossCallReturnLabel_109:
   \   00009A   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7401         MOV       A,#0x1
   \   000008                REQUIRE ??Subroutine40_0
   \   000008                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    732          
    733          
    734          
    735          /****************************************************************************
    736           * @fn          bdb_TCJoiningDeviceFree
    737           *
    738           * @brief       This function frees a joining device from the list.
    739           *
    740           * @param       ZSuccess - If the device was found and erased
    741           * @param       ZInvalidParameter - Not found
    742           *
    743           * @return      none
    744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
   \                     bdb_TCJoiningDeviceFree:
    746          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A982         MOV       R1,DPL
   \   000011   AA83         MOV       R2,DPH
   \   000013   89..         MOV       ?V4,R1
   \   000015   8A..         MOV       ?V5,R2
   \   000017   75..00       MOV       ?V6,#0x0
   \   00001A                ; Setup parameters for call to function osal_memcmp
   \   00001A   78..         MOV       R0,#?V4
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001F   7C08         MOV       R4,#0x8
   \   000021   7D00         MOV       R5,#0x0
   \   000023   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000026   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   E9           MOV       A,R1
   \   00002D   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000030   6018         JZ        ??bdb_TCJoiningDeviceFree_0
    747            bdb_joiningDeviceList_t* descCurrent;
    748            bdb_joiningDeviceList_t* descPrev;
    749          
    750            //validate empty list?
    751          
    752            //Is it the first?
    753            if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    754            {
    755              descCurrent = bdb_joiningDeviceList;
   \   000032   12....       LCALL     ?Subroutine26 & 0xFFFF
    756              bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
   \                     ??CrossCallReturnLabel_20:
   \   000035   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000038   E0           MOVX      A,@DPTR
   \   000039   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00003C   3B           ADDC      A,R3
   \   00003D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000040   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000043   E8           MOV       A,R0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E9           MOV       A,R1
   \   000047   F0           MOVX      @DPTR,A
    757              osal_mem_free( descCurrent );
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   803E         SJMP      ??bdb_TCJoiningDeviceFree_1
    758              return ZSuccess;
    759            }
    760          
    761            descPrev = NULL;
    762            descCurrent = bdb_joiningDeviceList;
    763          
    764            while(descCurrent != NULL)
    765            {
    766              if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    767              {
    768                descPrev = descCurrent;
    769                break;
    770              }
    771              descCurrent = descCurrent->nextDev;
   \                     ??bdb_TCJoiningDeviceFree_0:
   \   00004A   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00004D   6040         JZ        ??bdb_TCJoiningDeviceFree_2
   \   00004F   EA           MOV       A,R2
   \   000050   240B         ADD       A,#0xb
   \   000052   FE           MOV       R6,A
   \   000053   E4           CLR       A
   \   000054   3B           ADDC      A,R3
   \   000055   FF           MOV       R7,A
   \   000056                ; Setup parameters for call to function osal_memcmp
   \   000056   78..         MOV       R0,#?V4
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005B   7C08         MOV       R4,#0x8
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   \   000069   E9           MOV       A,R1
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   60DA         JZ        ??bdb_TCJoiningDeviceFree_0
    772            }
    773            if(descPrev == NULL)
    774            {
    775              //Not found
    776              return ZInvalidParameter;
    777            }
    778          
    779            descPrev->nextDev = descPrev->nextDev->nextDev;
   \   000070   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000073   C8           XCH       A,R0
   \   000074   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000077   38           ADDC      A,R0
   \   000078   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   E8           MOV       A,R0
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   E9           MOV       A,R1
   \   000083   F0           MOVX      @DPTR,A
    780          
    781            osal_mem_free( JoiningDeviceToRemove );
   \   000084                ; Setup parameters for call to function osal_mem_free
   \   000084   AA..         MOV       R2,?V0
   \   000086   AB..         MOV       R3,?V1
   \                     ??bdb_TCJoiningDeviceFree_1:
   \   000088   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    782            return ZSuccess;
   \   00008B   7900         MOV       R1,#0x0
   \   00008D   8002         SJMP      ??bdb_TCJoiningDeviceFree_3
   \                     ??bdb_TCJoiningDeviceFree_2:
   \   00008F   7902         MOV       R1,#0x2
   \                     ??bdb_TCJoiningDeviceFree_3:
   \   000091   02....       LJMP      ?Subroutine5 & 0xFFFF
    783          
    784          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A982         MOV       R1,DPL
   \   00000B   AA83         MOV       R2,DPH
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine61_0
   \   000002                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    785          
    786           /*********************************************************************
    787           * @fn          bdb_setJoinUsesInstallCodeKey
    788           *
    789           * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
    790           *
    791           * @param       set - If TRUE only devices with IC register in TC can join the
    792           *              nwk, otherwise devices may or not have a IC register
    793           *
    794           * @return      none
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          void bdb_setJoinUsesInstallCodeKey(bool set)
   \                     bdb_setJoinUsesInstallCodeKey:
    797          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    798            bdbAttributes.bdbJoinUsesInstallCodeKey = set;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 15
   \   000008   F0           MOVX      @DPTR,A
    799            if(set)
   \   000009   90....       MOV       DPTR,#zgAllowInstallCodes
   \   00000C   6004         JZ        ??bdb_setJoinUsesInstallCodeKey_0
    800            {
    801              zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   00000E   7402         MOV       A,#0x2
   \   000010   8002         SJMP      ??bdb_setJoinUsesInstallCodeKey_1
    802            }
    803            else
    804            {
    805              zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
   \                     ??bdb_setJoinUsesInstallCodeKey_0:
   \   000012   7401         MOV       A,#0x1
    806            }
   \                     ??bdb_setJoinUsesInstallCodeKey_1:
   \   000014   02....       LJMP      ??Subroutine44_0 & 0xFFFF
    807          }
    808          #endif
    809          
    810           /*********************************************************************
    811           * @fn          bdb_StartCommissioning
    812           *
    813           * @brief       Start the commissioning process setting the commissioning mode given.
    814           *
    815           * @param       mode - refer to bdbCommissioningMode
    816           *
    817           * @return      none
    818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          void bdb_StartCommissioning(uint8 mode)
   \                     bdb_StartCommissioning:
    820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    821            //Application cannot request to set the device in initialization mode or parent lost
    822            mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
    823          
    824          #ifdef BDB_TL_INITIATOR
    825            if ( touchlinkFNReset == TRUE )
    826            {
    827              return;
    828            }
    829          #else
    830            //Commissioning mode used only for initiator
    831            mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   00000C   53..CE       ANL       ?V0,#0xce
    832          #endif
    833          
    834          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)
    835            //Commissioning mode used only for devices with F&B
    836            mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
    837          #endif
    838          
    839            //If we have running process or the machine state is triggered, then just append and it will be excecuted
    840            if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
   \   00000F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??bdb_StartCommissioning_0
   \   000015                ; Setup parameters for call to function osal_get_timeoutEx
   \   000015   7A04         MOV       R2,#0x4
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00001C   6024         JZ        ??bdb_StartCommissioning_1
    841            {
    842          #if ZG_BUILD_ENDDEVICE_TYPE
    843              if(ZG_DEVICE_ENDDEVICE_TYPE)
    844              {
    845                //Devices with parent lost are not allowed to perform actions
    846                if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
    847                {
    848                  return;
    849                }
    850              }
    851          #endif
    852          
    853              //If we are on the network and got requested to do nwk steering, we do not need to wait other process,
    854              // just send permit joining and report the application
    855              if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
   \                     ??bdb_StartCommissioning_0:
   \   00001E   90....       MOV       DPTR,#bdbAttributes + 14
   \   000021   E0           MOVX      A,@DPTR
   \   000022   6010         JZ        ??bdb_StartCommissioning_2
   \   000024   E5..         MOV       A,?V0
   \   000026   A2E1         MOV       C,0xE0 /* A   */.1
   \   000028   500A         JNC       ??bdb_StartCommissioning_2
    856              {
    857                bdb_nwkSteeringDeviceOnNwk();
    858                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   00002A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00002A   7A01         MOV       R2,#0x1
   \   00002C   7904         MOV       R1,#0x4
   \   00002E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    859          
    860                //Clean nwk steering
    861                mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   000031   63..02       XRL       ?V0,#0x2
    862              }
    863          
    864              //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
    865              bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_2:
   \   000034   743F         MOV       A,#0x3f
   \   000036   55..         ANL       A,?V0
   \   000038   F8           MOV       R0,A
   \   000039   90....       MOV       DPTR,#bdbAttributes + 11
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   48           ORL       A,R0
   \   00003E   F0           MOVX      @DPTR,A
    866              return;
   \   00003F   02....       LJMP      ??bdb_StartCommissioning_3 & 0xFFFF
    867            }
    868          
    869            //Save the commissioning modes valid requested
    870            bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_1:
   \   000042   743F         MOV       A,#0x3f
   \   000044   55..         ANL       A,?V0
   \   000046   FE           MOV       R6,A
   \   000047   90....       MOV       DPTR,#bdbAttributes + 11
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   4E           ORL       A,R6
   \   00004C   F0           MOVX      @DPTR,A
    871          
    872          
    873            //Start processing the initialization, once per power cycle.
    874            if(!bdb_initialization)
   \   00004D   90....       MOV       DPTR,#bdb_initialization
   \   000050   E0           MOVX      A,@DPTR
   \   000051   6003         JZ        $+5
   \   000053   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    875            {
    876              bdb_initialization = TRUE;
   \   000056   7401         MOV       A,#0x1
   \   000058   12....       LCALL     ?Subroutine11 & 0xFFFF
    877          
    878          #ifdef BDB_REPORTING
    879              //Delete NV data if startup was with factory reset
    880              if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
    881              {
    882                //Factory reset bdb reporting NV data
    883                uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
    884                if ( attrRepNvLen > 0 )
    885                {
    886                  osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
    887                }
    888              }
    889          
    890              //Construct the Endpoint-cluster array
    891              bdb_RepConstructReportingData();
    892          #endif //BDB_REPORTING
    893          
    894              osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??CrossCallReturnLabel_2:
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   75..01       MOV       ?V2,#0x1
   \   000061   75..00       MOV       ?V3,#0x0
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV       R4,#0x0
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   7A55         MOV       R2,#0x55
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
    895          
    896              //Are we on a network
    897              if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
   \   000079   90....       MOV       DPTR,#bdbAttributes + 14
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   6401         XRL       A,#0x1
   \   00007F   6003         JZ        $+5
   \   000081   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    898              {
    899          #ifdef ZG_BUILD_JOINING_TYPE
    900                //Only for joining devices validate the joining procedure
    901                if(ZG_DEVICE_JOINING_TYPE)
   \   000084   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000087   E0           MOVX      A,@DPTR
   \   000088   6401         XRL       A,#0x1
   \   00008A   6008         JZ        ??bdb_StartCommissioning_5
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   6402         XRL       A,#0x2
   \   00008F   6003         JZ        $+5
   \   000091   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
    902                {
    903                  //If we got into a network
    904                  if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
   \                     ??bdb_StartCommissioning_5:
   \   000094                ; Setup parameters for call to function osal_isbufset
   \   000094   7C08         MOV       R4,#0x8
   \   000096   7900         MOV       R1,#0x0
   \   000098   90....       MOV       DPTR,#AIB_apsTrustCenterAddress
   \   00009B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00009E   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   0000A1   E9           MOV       A,R1
   \   0000A2   6003         JZ        $+5
   \   0000A4   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
    905                  {
    906                    //Which is not distributed
    907                    if(!APSME_IsDistributedSecurity())
   \   0000A7                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0000A7   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000AA   E9           MOV       A,R1
   \   0000AB   6003         JZ        $+5
   \   0000AD   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
    908                    {
    909                      uint8 keyAttributes;
    910                      osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
   \   0000B0                ; Setup parameters for call to function osal_nv_read
   \   0000B0   A8..         MOV       R0,?XSP + 0
   \   0000B2   A9..         MOV       R1,?XSP + 1
   \   0000B4   88..         MOV       ?V2,R0
   \   0000B6   89..         MOV       ?V3,R1
   \   0000B8   78..         MOV       R0,#?V2
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   75..01       MOV       ?V2,#0x1
   \   0000C0   75..00       MOV       ?V3,#0x0
   \   0000C3   78..         MOV       R0,#?V2
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   7C10         MOV       R4,#0x10
   \   0000CA   7D00         MOV       R5,#0x0
   \   0000CC   7A11         MOV       R2,#0x11
   \   0000CE   7B01         MOV       R3,#0x1
   \   0000D0   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000D3   7404         MOV       A,#0x4
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
    911                      //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
    912                      if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
   \   0000D8   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   607A         JZ        ??bdb_StartCommissioning_6
   \   0000DE   85..82       MOV       DPL,?XSP + 0
   \   0000E1   85..83       MOV       DPH,?XSP + 1
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   64FD         XRL       A,#0xfd
   \   0000E7   606F         JZ        ??bdb_StartCommissioning_6
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   6402         XRL       A,#0x2
   \   0000EC   606A         JZ        ??bdb_StartCommissioning_6
    913                      {
    914                        //Force to initialize the entry
    915                        APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
    916          
    917                        osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   0000EE                ; Setup parameters for call to function osal_memset
   \   0000EE   7C13         MOV       R4,#0x13
   \   0000F0   7D00         MOV       R5,#0x0
   \   0000F2   7900         MOV       R1,#0x0
   \   0000F4   7401         MOV       A,#0x1
   \   0000F6   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F9   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    918                        APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   0000FC   7411         MOV       A,#0x11
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   74FF         MOV       A,#-0x1
   \   000103   F0           MOVX      @DPTR,A
    919                        osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
   \   000104                ; Setup parameters for call to function osal_nv_write
   \   000104   7401         MOV       A,#0x1
   \   000106   12....       LCALL     ?XSTACK_DISP100_8
   \   000109   88..         MOV       ?V2,R0
   \   00010B   89..         MOV       ?V3,R1
   \   00010D   78..         MOV       R0,#?V2
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000112   75..13       MOV       ?V2,#0x13
   \   000115   75..00       MOV       ?V3,#0x0
   \   000118   78..         MOV       R0,#?V2
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011D   7C00         MOV       R4,#0x0
   \   00011F   7D00         MOV       R5,#0x0
   \   000121   7A11         MOV       R2,#0x11
   \   000123   7B01         MOV       R3,#0x1
   \   000125   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000128   12....       LCALL     ?DEALLOC_XSTACK8
    920                        TCLinkKeyFrmCntr[0].txFrmCntr = 0;
   \   00012B   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   00012E   12....       LCALL     ?Subroutine8 & 0xFFFF
    921                        TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_56:
   \   000131   A3           INC       DPTR
   \   000132   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    922          
    923          
    924                        //reset the device parameters to FN
    925                        bdbAttributes.bdbNodeIsOnANetwork = FALSE;
   \                     ??CrossCallReturnLabel_54:
   \   000135   90....       MOV       DPTR,#bdbAttributes + 14
   \   000138   12....       LCALL     ?Subroutine11 & 0xFFFF
    926                        osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??CrossCallReturnLabel_3:
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013E   75..01       MOV       ?V2,#0x1
   \   000141   75..00       MOV       ?V3,#0x0
   \   000144   78..         MOV       R0,#?V2
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000149   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00014C   12....       LCALL     ?DEALLOC_XSTACK8
    927                        zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   00014F                ; Setup parameters for call to function zgWriteStartupOptions
   \   00014F   7A03         MOV       R2,#0x3
   \   000151   79FF         MOV       R1,#-0x1
   \   000153   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    928          
    929                        //Then start the commissioning process requested
    930                        bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000156   803B         SJMP      ??bdb_StartCommissioning_7
    931                        osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
    932                        return;
    933                      }
    934                    }
    935                  }
    936                }
    937          #endif //ZG_BUILD_JOINING_TYPE
    938          
    939                //Set the initialization
    940                bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
    941                bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \                     ??bdb_StartCommissioning_6:
   \   000158   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00015B   7407         MOV       A,#0x7
   \   00015D   F0           MOVX      @DPTR,A
    942                bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \   00015E   7410         MOV       A,#0x10
   \   000160   4E           ORL       A,R6
   \   000161   F8           MOV       R0,A
   \   000162   90....       MOV       DPTR,#bdbAttributes + 11
   \   000165   E0           MOVX      A,@DPTR
   \   000166   48           ORL       A,R0
   \   000167   F0           MOVX      @DPTR,A
    943          
    944                if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   000168                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000168   7900         MOV       R1,#0x0
   \   00016A   7A00         MOV       R2,#0x0
   \   00016C   7B00         MOV       R3,#0x0
   \   00016E   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   000171   E9           MOV       A,R1
   \   000172   602F         JZ        ??bdb_StartCommissioning_3
    945                {
    946          #ifdef BDB_REPORTING
    947                  //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
    948                  bdb_RepUpdateMarkBindings();
    949          #endif
    950                  return;
    951                }
    952                bdb_setNodeIsOnANetwork(FALSE);
   \   000174                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000174   7900         MOV       R1,#0x0
   \   000176   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    953                //Not in the network
    954                bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   000179                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000179   7A00         MOV       R2,#0x0
   \   00017B   7907         MOV       R1,#0x7
   \   00017D   800F         SJMP      ??bdb_StartCommissioning_8
    955                return;
    956              }
    957            }
    958          
    959            //Got requested only to initialize, if so, report that it failed
    960            if(bdbAttributes.bdbCommissioningMode == 0)
   \                     ??bdb_StartCommissioning_4:
   \   00017F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000182   E0           MOVX      A,@DPTR
   \   000183   700E         JNZ       ??bdb_StartCommissioning_7
    961            {
    962              //Set the initialization state and report it to fail
    963              bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \   000185   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000188   7407         MOV       A,#0x7
   \   00018A   F0           MOVX      @DPTR,A
    964              bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   00018B                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00018B   7A00         MOV       R2,#0x0
   \   00018D   F9           MOV       R1,A
   \                     ??bdb_StartCommissioning_8:
   \   00018E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    965              return;
   \   000191   8010         SJMP      ??bdb_StartCommissioning_3
    966            }
    967          
    968          
    969            //Start the commissioning process
    970            bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_StartCommissioning_7:
   \   000193   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000196   E4           CLR       A
   \   000197   F0           MOVX      @DPTR,A
    971            osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
   \   000198                ; Setup parameters for call to function osal_set_event
   \   000198   7A04         MOV       R2,#0x4
   \   00019A   FB           MOV       R3,A
   \   00019B   90....       MOV       DPTR,#bdb_TaskID
   \   00019E   E0           MOVX      A,@DPTR
   \   00019F   F9           MOV       R1,A
   \   0001A0   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    972          }
   \                     ??bdb_StartCommissioning_3:
   \   0001A3   7414         MOV       A,#0x14
   \   0001A5   02....       LJMP      ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   000004   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000007   78..         MOV       R0,#?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   4C           ORL       A,R4
   \   00000B   4D           ORL       A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A55         MOV       R2,#0x55
   \   000006                REQUIRE ??Subroutine55_0
   \   000006                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0
    973          
    974          
    975           /*********************************************************************
    976           * @fn          bdb_NotifyCommissioningModeStart
    977           *
    978           * @brief       Notify the user about a commissioning method just started
    979           *
    980           * @param       commissioningMode
    981           *
    982           * @return      none
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
   \                     bdb_NotifyCommissioningModeStart:
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    986            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
    987          
    988            bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
    989            bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
   \   000011   12....       LCALL     ?Subroutine7 & 0xFFFF
    990            //Remaining commissioning modes are set just before the call to the application to avoid race conditions
    991          
    992            bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \                     ??CrossCallReturnLabel_45:
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00001A   12....       LCALL     ?DEALLOC_XSTACK8
    993          }
   \   00001D   7403         MOV       A,#0x3
   \   00001F   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7C03         MOV       R4,#0x3
   \   000002   7B00         MOV       R3,#0x0
   \   000004   7A0A         MOV       R2,#0xa
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0
    994          
    995          
    996          
    997          #if (ZG_BUILD_JOINING_TYPE)
    998           /*********************************************************************
    999           * @fn          bdb_setNodeJoinLinkKeyType
   1000           *
   1001           * @brief       Set the key type in use in the network joined. Global centralized key is used by default
   1002           *
   1003           * @param       none
   1004           *
   1005           * @return      none
   1006           */
   1007          void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
   1008          {
   1009            bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
   1010          }
   1011          #endif
   1012          
   1013           /*********************************************************************
   1014           * @fn          bdb_setFN
   1015           *
   1016           * @brief       Set configuration for FN. This FN configuration will be perfome
   1017           *              upon call to ZDOInitDevice
   1018           *
   1019           * @param       none
   1020           *
   1021           * @return      none
   1022           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1023          void bdb_setFN(void)
   \                     bdb_setFN:
   1024          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1025            bdb_setNodeIsOnANetwork(FALSE);
   \   000004                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1026          
   1027          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
   1028              touchLink_InitFreeRanges( TRUE );
   1029              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1030          #endif
   1031          #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET )
   1032              touchLink_InitFreeRanges( FALSE );
   1033              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1034          #endif
   1035          
   1036            //Set the device as factory new
   1037            zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A03         MOV       R2,#0x3
   \   00000B   79FF         MOV       R1,#-0x1
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1038          }
   \   000010   80..         SJMP      ??Subroutine45_0
   1039          
   1040           /*********************************************************************
   1041           * @fn          bdb_resetLocalAction
   1042           *
   1043           * @brief       Application interface to perform BDB Reset to FN.
   1044           *
   1045           * @param       none
   1046           *
   1047           * @return      none
   1048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1049          void bdb_resetLocalAction(void)
   \                     bdb_resetLocalAction:
   1050          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1051            //Process reset as nwk leave if the device is on the network and is able to process it
   1052            if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
   1053            {
   1054              NLME_LeaveReq_t leaveReq;
   1055              // Set every field to 0
   1056              osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   1057          
   1058              bdb_setFN();
   1059          
   1060              NLME_LeaveReq( &leaveReq );
   1061          
   1062              return;
   1063            }
   1064            else
   1065            {
   1066              bdb_setFN();
   \   000004                ; Setup parameters for call to function bdb_setFN
   \   000004   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1067          
   1068              ZDApp_ResetTimerStart( 500 );
   \   000007                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000007   7AF4         MOV       R2,#-0xc
   \   000009   7B01         MOV       R3,#0x1
   \   00000B   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1069            }
   1070          }
   \   00000E   80..         SJMP      ??Subroutine45_0
   1071          
   1072          
   1073           /*********************************************************************
   1074           * @fn          bdb_parentLost
   1075           *
   1076           * @brief       Notify bdb that connection with parent is lost
   1077           *
   1078           * @return      none
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          void bdb_parentLost(void)
   \                     bdb_parentLost:
   1081          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1082          #if ZG_BUILD_ENDDEVICE_TYPE
   1083            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1084            {
   1085              while(pBDBListNwk)
   1086              {
   1087                bdb_nwkDescFree(pBDBListNwk);
   1088              }
   1089          
   1090              nwk_desc_list_free();
   1091              if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   1092              {
   1093                //If parent lost during TCLK exchange, then report TCLK exchange fail
   1094                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
   1095                {
   1096                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   1097                  return;
   1098                }
   1099                bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
   1100          
   1101              }
   1102              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   1103              NLME_OrphanStateSet();
   1104              ZDApp_ChangeState( DEV_NWK_ORPHAN );
   1105          
   1106              // turn receiver off while in orphan state
   1107              byte temp = FALSE;
   1108              ZMacSetReq(ZMacRxOnIdle, &temp);
   1109          
   1110              bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
   1111            }
   1112          #endif
   1113          }
   \   000000   02....       LJMP      ?BRET
   1114          
   1115          
   1116          
   1117          
   1118          
   1119           /*********************************************************************
   1120           * @fn          bdb_NetworkRestoredResumeState
   1121           *
   1122           * @brief       Restore the state of child device after parent lost
   1123           *
   1124           * @return      none
   1125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1126          void bdb_NetworkRestoredResumeState(void)
   \                     bdb_NetworkRestoredResumeState:
   1127          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1128          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
   1129          #if ZG_BUILD_ENDDEVICE_TYPE
   1130            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1131            {
   1132              uint8 restoreSimpleDesc = FALSE;
   1133              //If restored when F&B still enabled, then restore the simple descriptors attempts
   1134              if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   1135              {
   1136                bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
   1137          
   1138                pRespondentTemp = pRespondentHead;
   1139          
   1140                while(pRespondentTemp != NULL)
   1141                {
   1142                  if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
   1143                  {
   1144                    pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
   1145                    restoreSimpleDesc = TRUE;
   1146                  }
   1147                  pRespondentTemp = pRespondentTemp->pNext;
   1148                }
   1149              }
   1150              if(restoreSimpleDesc)
   1151              {
   1152                //Restore the simple Descriptor sending after 1 second of restoring the network
   1153                osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
   1154              }
   1155            }
   1156          #endif
   1157          #endif
   1158          }
   \   000000   02....       LJMP      ?BRET
   1159          
   1160          #if ZG_BUILD_ENDDEVICE_TYPE
   1161           /*********************************************************************
   1162           * @fn          bdb_ZedAttemptRecoverNwk
   1163           *
   1164           * @brief       Instruct the ZED to try to rejoin its previews network
   1165           *
   1166           * @return      success if the attempt is being excecuted
   1167           *              False if device do not have nwk parameters to perform this action
   1168           */
   1169          uint8 bdb_ZedAttemptRecoverNwk(void)
   1170          {
   1171            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1172            {
   1173              if(bdbAttributes.bdbNodeIsOnANetwork)
   1174              {
   1175                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
   1176                {
   1177                  if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   1178                  {
   1179                    return ZSuccess;
   1180                  }
   1181                }
   1182              }
   1183            }
   1184            return ZFailure;
   1185          }
   1186          
   1187          #endif
   1188          
   1189           /*********************************************************************
   1190           * @fn          bdb_reportCommissioningState
   1191           *
   1192           * @brief       Process the result of a BDB main state attempt.
   1193           *
   1194           * @param       bdbCommissioningState - MainState that is issuing fail
   1195           * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
   1196           *
   1197           * @return      none
   1198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1199          void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
   \                     bdb_reportCommissioningState:
   1200          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
   1201            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   1202            //Process only if we are in that state, or if we are on parent lost and processing F&B
   1203            if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
   1204               || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
   \   00000E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6E           XRL       A,R6
   \   000013   6013         JZ        ??bdb_reportCommissioningState_0
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6408         XRL       A,#0x8
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   00001D   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6406         XRL       A,#0x6
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1205            {
   1206              switch(bdbCommissioningState)
   \                     ??bdb_reportCommissioningState_0:
   \   000028   E9           MOV       A,R1
   \   000029   24FE         ADD       A,#-0x2
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
   \   000030   24FE         ADD       A,#-0x2
   \   000032   6012         JZ        ??bdb_reportCommissioningState_3
   \   000034   14           DEC       A
   \   000035   604B         JZ        ??bdb_reportCommissioningState_4
   \   000037   14           DEC       A
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
   \   00003D   14           DEC       A
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
   \   000043   02....       LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
   1207              {
   1208          #if (ZG_BUILD_JOINING_TYPE)
   1209                case BDB_COMMISSIONING_STATE_JOINING:
   1210                  if(ZG_DEVICE_JOINING_TYPE)
   1211                  {
   1212                    //Prepare for the next state or commissioning mode to be excecuted
   1213                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   1214          
   1215                    if(didSuccess)
   1216                    {
   1217                      //Next state is TC link key exchange
   1218                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
   1219                      //Free the list of nwk discovered
   1220                      while(pBDBListNwk)
   1221                      {
   1222                        bdb_nwkDescFree(pBDBListNwk);
   1223                      }
   1224          
   1225                      //Set the poll rate of the ZED joining device to 1 second to allow TCLK
   1226                      //exchange be perfomed successfully in cases in which application has a
   1227                      //slow pollrate
   1228                      NLME_SetPollRate(TCLK_POLL_RATE);
   1229          
   1230                      //No notification in this step
   1231                      return;
   1232                    }
   1233                    else
   1234                    {
   1235                    	AT_ERROR(AT_NO_NETWORK);
   1236                      uint8 temp = FALSE;
   1237                      //If fail, then restore poll rate
   1238                      NLME_SetPollRate(POLL_RATE);
   1239                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1240                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   1241                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   1242                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   1243          
   1244                      //Turn off the radio
   1245                      ZMacSetReq(ZMacRxOnIdle, &temp);
   1246                      //Set the device to FN, to start as new for subsequent attempts
   1247                      bdb_setFN();
   1248                      NLME_ResetRequest();
   1249                      ZDApp_ChangeState( DEV_HOLD );
   1250          
   1251                      //Free the list of nwk discovered
   1252                      while(pBDBListNwk)
   1253                      {
   1254                        bdb_nwkDescFree(pBDBListNwk);
   1255                      }
   1256                    }
   1257                  }
   1258                break;
   1259          
   1260                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   1261                  if(ZG_DEVICE_JOINING_TYPE)
   1262                  {
   1263                    if(didSuccess)
   1264                    {
   1265                      //Clear any setting that would set the device as FN
   1266                      zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   1267          
   1268                      //Next state is nwk steering on the nwk (permit joining)
   1269                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   1270                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
   1271          
   1272                      //Set the poll rate to the application default after TCLK success
   1273                      NLME_SetPollRate(POLL_RATE);
   1274          
   1275                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
   1276                      //No notification to the user is needed
   1277                      return;
   1278                    }
   1279                    else
   1280                    {
   1281                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   1282                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
   1283          
   1284                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   1285          
   1286                      //No process shall be attempted after this fail
   1287                      bdbAttributes.bdbCommissioningMode = 0;
   1288          
   1289                      //Fill the context for the user notification
   1290                      osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
   1291                    }
   1292                  }
   1293                break;
   1294          #endif
   1295          
   1296                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   1297                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_3:
   \   000046   7401         MOV       A,#0x1
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   7401         MOV       A,#0x1
   \   00004D   F0           MOVX      @DPTR,A
   1298                  if(didSuccess)
   \   00004E   EA           MOV       A,R2
   \   00004F   90....       MOV       DPTR,#bdbAttributes + 10
   \   000052   6011         JZ        ??bdb_reportCommissioningState_8
   1299                  {
   1300                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000054   E4           CLR       A
   \   000055   F0           MOVX      @DPTR,A
   1301          
   1302          #if (ZG_BUILD_RTR_TYPE)
   1303                    //Update ZDApp state
   1304                    if(ZG_DEVICE_RTRONLY_TYPE)
   \   000056   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6401         XRL       A,#0x1
   \   00005C   700A         JNZ       ??bdb_reportCommissioningState_9
   1305                    {
   1306                      ZDApp_ChangeState( DEV_ROUTER );
   \   00005E                ; Setup parameters for call to function ZDApp_ChangeState
   \   00005E   7907         MOV       R1,#0x7
   \   000060   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000063   8003         SJMP      ??bdb_reportCommissioningState_9
   1307                    }
   1308          #endif
   1309          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1310                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1311                    {
   1312                      ZDApp_ChangeState( DEV_END_DEVICE );
   1313                    }
   1314          #endif
   1315                  }
   1316          #if (ZG_BUILD_COORDINATOR_TYPE)
   1317                  else
   1318                  {
   1319                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1320                    {
   1321                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_8:
   \   000065   7402         MOV       A,#0x2
   \   000067   F0           MOVX      @DPTR,A
   1322                    }
   1323                  }
   1324          #endif
   1325          
   1326                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_9:
   \   000068   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00006B   E4           CLR       A
   \   00006C   F0           MOVX      @DPTR,A
   1327                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   00006D                ; Setup parameters for call to function osal_start_timerEx
   \   00006D   90....       MOV       DPTR,#__Constant_32
   \   000070   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000073   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   1328                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   000079   90....       MOV       DPTR,#bdbAttributes + 11
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C2E1         CLR       0xE0 /* A   */.1
   \   00007F   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1329                break;
   1330          
   1331                case BDB_COMMISSIONING_STATE_FORMATION:
   1332                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
   \                     ??bdb_reportCommissioningState_4:
   \   000082   7401         MOV       A,#0x1
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   7402         MOV       A,#0x2
   \   000089   F0           MOVX      @DPTR,A
   1333          
   1334                  if(didSuccess)
   \   00008A   EA           MOV       A,R2
   \   00008B   90....       MOV       DPTR,#bdbAttributes + 10
   \   00008E   6019         JZ        ??bdb_reportCommissioningState_11
   1335                  {
   1336                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000090   E4           CLR       A
   \   000091   F0           MOVX      @DPTR,A
   1337          
   1338                    //Clear any setting that would set the device as FN
   1339                    zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000092                ; Setup parameters for call to function zgWriteStartupOptions
   \   000092   7A03         MOV       R2,#0x3
   \   000094   F9           MOV       R1,A
   \   000095   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1340          
   1341                     //Update ZDApp State
   1342          #if (ZG_BUILD_RTR_TYPE)
   1343                    if(ZG_DEVICE_RTRONLY_TYPE)
   \   000098   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   6401         XRL       A,#0x1
   \   00009E   7005         JNZ       ??bdb_reportCommissioningState_12
   1344                    {
   1345                      ZDApp_ChangeState( DEV_ROUTER );
   \   0000A0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A0   7907         MOV       R1,#0x7
   \   0000A2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1346                    }
   1347          #endif
   1348          #if (ZG_BUILD_COORDINATOR_TYPE)
   1349                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1350                    {
   1351                      ZDApp_ChangeState( DEV_ZB_COORD );
   \                     ??bdb_reportCommissioningState_12:
   \   0000A5                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A5   7909         MOV       R1,#0x9
   \   0000A7   8039         SJMP      ??bdb_reportCommissioningState_13
   1352                    }
   1353          #endif
   1354                  }
   1355                  else
   1356                  {
   1357                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
   \                     ??bdb_reportCommissioningState_11:
   \   0000A9   7408         MOV       A,#0x8
   \   0000AB   F0           MOVX      @DPTR,A
   1358                    //If not on the nwk, then restart the nwk parameters
   1359          #if (ZG_BUILD_RTR_TYPE)
   1360                    if(ZG_DEVICE_RTR_TYPE)
   \   0000AC   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   6004         JZ        ??bdb_reportCommissioningState_14
   \   0000B2   6401         XRL       A,#0x1
   \   0000B4   702F         JNZ       ??bdb_reportCommissioningState_15
   1361                    {
   1362                      if (!notdoFNCmd) {
   \                     ??bdb_reportCommissioningState_14:
   \   0000B6   90....       MOV       DPTR,#notdoFNCmd
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   7007         JNZ       ??bdb_reportCommissioningState_16
   1363                        AT_ERROR(AT_FORM_NWK_FAIL);
   \   0000BC                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000BC   7A01         MOV       R2,#0x1
   \   0000BE   7925         MOV       R1,#0x25
   \   0000C0   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   1364                      }
   1365                      if(!bdbAttributes.bdbNodeIsOnANetwork)
   \                     ??bdb_reportCommissioningState_16:
   \   0000C3   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   701C         JNZ       ??bdb_reportCommissioningState_15
   1366                      {
   1367                        uint8 temp = FALSE;
   \   0000C9   7403         MOV       A,#0x3
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E4           CLR       A
   \   0000CF   F0           MOVX      @DPTR,A
   1368                        //Turn off the radio
   1369                        ZMacSetReq(ZMacRxOnIdle, &temp);
   \   0000D0                ; Setup parameters for call to function ZMacSetReq
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D5   7952         MOV       R1,#0x52
   \   0000D7   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1370                        //Set the device to FN, to start as new for subsequent attempts
   1371                        bdb_setFN();
   \   0000DA                ; Setup parameters for call to function bdb_setFN
   \   0000DA   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1372                        NLME_ResetRequest();
   \   0000DD                ; Setup parameters for call to function NLME_ResetRequest
   \   0000DD   12....       LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
   1373                        ZDApp_ChangeState( DEV_HOLD );
   \   0000E0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000E0   7900         MOV       R1,#0x0
   \                     ??bdb_reportCommissioningState_13:
   \   0000E2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1374                      }
   1375                    }
   1376          #endif
   1377                  }
   1378                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_15:
   \   0000E5   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000E8   E4           CLR       A
   \   0000E9   F0           MOVX      @DPTR,A
   1379                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0000EA                ; Setup parameters for call to function osal_start_timerEx
   \   0000EA   90....       MOV       DPTR,#__Constant_32
   \   0000ED   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F0   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
   1380                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \   0000F6   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   C2E2         CLR       0xE0 /* A   */.2
   \   0000FC   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1381                break;
   1382          
   1383          
   1384                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   1385          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
   1386                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_5:
   \   0000FF   7401         MOV       A,#0x1
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   7403         MOV       A,#0x3
   \   000106   F0           MOVX      @DPTR,A
   1387          
   1388                  //Do not notify the status if we have another identify to send
   1389                  if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000107   90....       MOV       DPTR,#bdbAttributes + 10
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   7006         JNZ       ??bdb_reportCommissioningState_17
   1390                  {
   1391                    //Success at least once during F&B as initiator, mark it
   1392                    bdb_FBStateSuccessLatch = TRUE;
   \   00010D   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   000110   7401         MOV       A,#0x1
   \   000112   F0           MOVX      @DPTR,A
   1393                  }
   1394          
   1395                  //Will we process another indentify?
   1396                  if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
   \                     ??bdb_reportCommissioningState_17:
   \   000113   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000116   E0           MOVX      A,@DPTR
   \   000117   6003         JZ        $+5
   \   000119   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   00011C                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00011C   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00011F   6003         JZ        $+5
   \   000121   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000124                ; Setup parameters for call to function osal_get_timeoutEx
   \   000124   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000127   6003         JZ        $+5
   \   000129   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1397                  {
   1398                    // Dealocate respondent list and clean all the F&B process
   1399                    pRespondentCurr = NULL;
   \   00012C   90....       MOV       DPTR,#pRespondentCurr
   \   00012F   E4           CLR       A
   \   000130   F0           MOVX      @DPTR,A
   \   000131   A3           INC       DPTR
   \   000132   F0           MOVX      @DPTR,A
   1400                    pRespondentNext = NULL;
   \   000133   90....       MOV       DPTR,#pRespondentNext
   \   000136   F0           MOVX      @DPTR,A
   \   000137   A3           INC       DPTR
   \   000138   F0           MOVX      @DPTR,A
   1401                    bdb_zclRespondentListClean( &pRespondentHead );
   \   000139                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   000139   7A..         MOV       R2,#pRespondentHead & 0xff
   \   00013B   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   00013D   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
   1402                    osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000140                ; Setup parameters for call to function osal_stop_timerEx
   \   000140   7A00         MOV       R2,#0x0
   \   000142   7B40         MOV       R3,#0x40
   \   000144   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   1403          
   1404                    //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
   1405                    if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
   \                     ??CrossCallReturnLabel_111:
   \   000147   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   600A         JZ        ??bdb_reportCommissioningState_18
   \   00014D   90....       MOV       DPTR,#bdbAttributes + 10
   \   000150   E0           MOVX      A,@DPTR
   \   000151   640B         XRL       A,#0xb
   \   000153   7002         JNZ       ??bdb_reportCommissioningState_18
   1406                    {
   1407                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000155   E4           CLR       A
   \   000156   F0           MOVX      @DPTR,A
   1408                    }
   1409          
   1410                    //Set default state
   1411                    bdb_FBStateSuccessLatch = FALSE;
   \                     ??bdb_reportCommissioningState_18:
   \   000157   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   00015A   E4           CLR       A
   \   00015B   F0           MOVX      @DPTR,A
   1412          
   1413                    //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
   1414                    if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \   00015C   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   6406         XRL       A,#0x6
   \   000162   7010         JNZ       ??bdb_reportCommissioningState_19
   1415                    {
   1416                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000164   E4           CLR       A
   \   000165   F0           MOVX      @DPTR,A
   1417                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   000166                ; Setup parameters for call to function osal_start_timerEx
   \   000166   90....       MOV       DPTR,#__Constant_32
   \   000169   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00016C   12....       LCALL     ?Subroutine13 & 0xFFFF
   1418                    }
   \                     ??CrossCallReturnLabel_93:
   \   00016F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000172   800A         SJMP      ??bdb_reportCommissioningState_20
   1419                    else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \                     ??bdb_reportCommissioningState_19:
   \   000174   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000177   E0           MOVX      A,@DPTR
   \   000178   6406         XRL       A,#0x6
   \   00017A   7002         JNZ       ??bdb_reportCommissioningState_20
   1420                    {
   1421                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00017C   E4           CLR       A
   \   00017D   F0           MOVX      @DPTR,A
   1422                    }
   1423          
   1424                    bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_20:
   \   00017E   90....       MOV       DPTR,#bdbAttributes + 11
   \   000181   E0           MOVX      A,@DPTR
   \   000182   C2E3         CLR       0xE0 /* A   */.3
   \   000184   8074         SJMP      ??bdb_reportCommissioningState_10
   1425                  }
   1426                  else
   1427                  {
   1428                    return;
   1429                  }
   1430          
   1431          #endif
   1432                break;
   1433                case BDB_COMMISSIONING_STATE_TL:
   1434                  // Set NWK task to run
   1435                  nwk_setStateIdle( FALSE );
   \                     ??bdb_reportCommissioningState_2:
   \   000186                ; Setup parameters for call to function nwk_setStateIdle
   \   000186   7900         MOV       R1,#0x0
   \   000188   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1436                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
   \   00018B   7401         MOV       A,#0x1
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   7404         MOV       A,#0x4
   \   000192   F0           MOVX      @DPTR,A
   1437                  if(didSuccess)
   \   000193   EF           MOV       A,R7
   \   000194   6014         JZ        ??bdb_reportCommissioningState_21
   1438                  {
   1439                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000196   90....       MOV       DPTR,#bdbAttributes + 10
   \   000199   E4           CLR       A
   \   00019A   F0           MOVX      @DPTR,A
   1440                    bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
   \   00019B   A3           INC       DPTR
   \   00019C   F0           MOVX      @DPTR,A
   1441          
   1442                    //Update ZDApp state
   1443          #if (ZG_BUILD_RTR_TYPE)
   1444                    if(ZG_DEVICE_RTRONLY_TYPE)
   \   00019D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   6401         XRL       A,#0x1
   \   0001A3   7005         JNZ       ??bdb_reportCommissioningState_21
   1445                    {
   1446                      ZDApp_ChangeState( DEV_ROUTER );
   \   0001A5                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001A5   7907         MOV       R1,#0x7
   \   0001A7   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1447                    }
   1448          #endif
   1449          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1450                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1451                    {
   1452                      ZDApp_ChangeState( DEV_END_DEVICE );
   1453                    }
   1454          #endif
   1455                  }
   1456                  //The fail status is already set from the calling function to report commissioning process
   1457          
   1458                  // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
   1459                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_21:
   \   0001AA   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001AD   E4           CLR       A
   \   0001AE   F0           MOVX      @DPTR,A
   1460                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0001AF                ; Setup parameters for call to function osal_start_timerEx
   \   0001AF   90....       MOV       DPTR,#__Constant_32
   \   0001B2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001B5   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0001B8   12....       LCALL     ?DEALLOC_XSTACK8
   1461                  //Clear the event
   1462                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   0001BB   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   C2E0         CLR       0xE0 /* A   */.0
   \   0001C1   8037         SJMP      ??bdb_reportCommissioningState_10
   1463          
   1464                break;
   1465          
   1466                case BDB_INITIALIZATION:
   1467                  //Notify user about successfull initialization
   1468                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_6:
   \   0001C3   7401         MOV       A,#0x1
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   E4           CLR       A
   \   0001C9   F0           MOVX      @DPTR,A
   1469                  if(didSuccess)
   \   0001CA   EA           MOV       A,R2
   \   0001CB   6021         JZ        ??bdb_reportCommissioningState_22
   1470                  {
   1471                    //Update ZDApp state
   1472          #if (ZG_BUILD_COORDINATOR_TYPE)
   1473                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1474                    {
   1475                      ZDApp_ChangeState( DEV_ZB_COORD );
   \   0001CD                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001CD   7909         MOV       R1,#0x9
   \   0001CF   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1476                    }
   1477          #endif
   1478          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1479                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1480                    {
   1481                      uint32 pollrate = POLL_RATE;
   1482                      NLME_SetPollRate(pollrate);
   1483                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   1484          
   1485                    }
   1486          #endif
   1487                    ZDApp_RestoreNwkSecMaterial();
   \   0001D2                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   0001D2   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1488                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   0001D5   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001D8   740D         MOV       A,#0xd
   \   0001DA   F0           MOVX      @DPTR,A
   1489                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0001DB   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001DE   E4           CLR       A
   \   0001DF   F0           MOVX      @DPTR,A
   1490                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
   \   0001E0                ; Setup parameters for call to function osal_start_timerEx
   \   0001E0   90....       MOV       DPTR,#__Constant_c8
   \   0001E3   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001E6   12....       LCALL     ?Subroutine13 & 0xFFFF
   1491                  }
   \                     ??CrossCallReturnLabel_95:
   \   0001E9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EC   8006         SJMP      ??bdb_reportCommissioningState_23
   1492                  else
   1493                  {
   1494          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1495                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1496                    {
   1497                      if(bdb_isDeviceNonFactoryNew())
   1498                      {
   1499                        //Notify the user about losing parent
   1500                        bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   1501                        bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   1502          
   1503                        //Update ZDApp state
   1504                        ZDApp_ChangeState( DEV_NWK_ORPHAN );
   1505                      }
   1506                    }
   1507          #endif
   1508                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_22:
   \   0001EE   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001F1   7402         MOV       A,#0x2
   \   0001F3   F0           MOVX      @DPTR,A
   1509                  }
   1510                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_23:
   \   0001F4   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   C2E4         CLR       0xE0 /* A   */.4
   \                     ??bdb_reportCommissioningState_10:
   \   0001FA   F0           MOVX      @DPTR,A
   1511          
   1512                break;
   1513          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1514                case BDB_PARENT_LOST:
   1515                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   1516                  if(ZG_DEVICE_ENDDEVICE_TYPE)
   1517                  {
   1518                    if(didSuccess)
   1519                    {
   1520                      uint32 pollrate = POLL_RATE;
   1521                      bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;
   1522                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
   1523                      NLME_SetPollRate(pollrate);
   1524                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
   1525                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   1526                      //Update ZDApp state
   1527                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   1528          
   1529                      bdb_NetworkRestoredResumeState();
   1530                    }
   1531                    else
   1532                    {
   1533                      bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   1534                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1535          
   1536                      NLME_SetPollRate(0);
   1537          
   1538                    }
   1539                  }
   1540                break;
   1541          #endif
   1542              }
   1543          #ifdef MT_APP_CNF_FUNC
   1544              //Notify the user about the status, the main state which has failed
   1545              bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   1546          
   1547              bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1548          #else
   1549              if(pfnCommissioningStatusCB)
   \                     ??bdb_reportCommissioningState_7:
   \   0001FB   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0001FE   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000201   6016         JZ        ??bdb_reportCommissioningState_1
   1550              {
   1551                //Notify the user about the status, the main state which has failed
   1552                bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   \   000203   90....       MOV       DPTR,#bdbAttributes + 10
   \   000206   E0           MOVX      A,@DPTR
   \   000207   85..82       MOV       DPL,?XSP + 0
   \   00020A   85..83       MOV       DPH,?XSP + 1
   \   00020D   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   1553          
   1554                bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1555              }
   1556          #endif
   1557            }
   \                     ??CrossCallReturnLabel_46:
   \   000210   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000213   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000216   12....       LCALL     ?DEALLOC_XSTACK8
   1558          }
   \                     ??bdb_reportCommissioningState_1:
   \   000219   7404         MOV       A,#0x4
   \   00021B   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B40         MOV       R3,#0x40
   \   000004                REQUIRE ??Subroutine46_0
   \   000004                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV       DPTR,#pRespondentHead
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0
   1559          
   1560          
   1561           /*********************************************************************
   1562           * @fn          bdb_nwkFormationAttempt
   1563           *
   1564           * @brief       Process a nwk formation attempt.
   1565           *
   1566           * @param       didSuccess - TRUE if the nwk formation was success, FALSE
   1567           *                         otherwise and try secondary channel
   1568           *
   1569           * @return      none
   1570           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1571          void bdb_nwkFormationAttempt(bool didSuccess)
   \                     bdb_nwkFormationAttempt:
   1572          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1573            if(didSuccess)
   \   000006   6004         JZ        ??bdb_nwkFormationAttempt_0
   1574            {
   1575              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
   \   000008                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000008   7A01         MOV       R2,#0x1
   \   00000A   801F         SJMP      ??bdb_nwkFormationAttempt_1
   1576            }
   1577            else
   1578            {
   1579              //Can we try the secondary channel set?
   1580              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkFormationAttempt_0:
   \   00000C   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6017         JZ        ??bdb_nwkFormationAttempt_2
   \   000012   90....       MOV       DPTR,#bdbAttributes
   \   000015   12....       LCALL     ?XLOAD_R0123
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   4A           ORL       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   600B         JZ        ??bdb_nwkFormationAttempt_2
   1581              {
   1582                vDoPrimaryScan = FALSE;
   \   00001E   90....       MOV       DPTR,#vDoPrimaryScan
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   1583                bdb_nwkJoiningFormation(FALSE);
   \   000023                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   \   000027   8007         SJMP      ??bdb_nwkFormationAttempt_3
   1584              }
   1585              else
   1586              {
   1587                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkFormationAttempt_2:
   \   000029                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000029   7A00         MOV       R2,#0x0
   \                     ??bdb_nwkFormationAttempt_1:
   \   00002B   7905         MOV       R1,#0x5
   \   00002D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1588              }
   1589            }
   1590          }
   \                     ??bdb_nwkFormationAttempt_3:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   1591          
   1592          
   1593          
   1594          /*********************************************************************
   1595           * @fn          bdb_isDeviceNonFactoryNew
   1596           *
   1597           * @brief       Returns the state of bdbNodeIsOnANetwork attribute
   1598           *
   1599           * @param       none
   1600           *
   1601           * @return      bdbNodeIsOnANetwork
   1602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1603          bool bdb_isDeviceNonFactoryNew(void)
   \                     bdb_isDeviceNonFactoryNew:
   1604          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1605            return bdbAttributes.bdbNodeIsOnANetwork;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007                REQUIRE ?Subroutine6
   \   000007                ; // Fall through to label ?Subroutine6
   1606          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   F9           MOV       R1,A
   \   000001   02....       LJMP      ??Subroutine45_0 & 0xFFFF
   1607          
   1608          
   1609          /*********************************************************************
   1610           * @fn          bdb_doTrustCenterRequireKeyExchange
   1611           *
   1612           * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
   1613           *
   1614           * @param       none
   1615           *
   1616           * @return      bdbTrustCenterRequireKeyExchange
   1617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1618          bool bdb_doTrustCenterRequireKeyExchange(void)
   \                     bdb_doTrustCenterRequireKeyExchange:
   1619          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1620          #if (ZG_BUILD_COORDINATOR_TYPE)
   1621            return bdbAttributes.bdbTrustCenterRequireKeyExchange;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 17
   \   000007   80..         SJMP      ?Subroutine6
   1622          #else
   1623            return 0;
   1624          #endif
   1625          }
   1626          
   1627          /*********************************************************************
   1628           * @fn      bdb_rejoinNwk
   1629           *
   1630           * @brief   Attempt to rejoin/resume a nwk from nv parameters
   1631           *
   1632           * @param   none
   1633           *
   1634           * @return  ZStatus_t
   1635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1636          ZStatus_t bdb_rejoinNwk(void)
   \                     bdb_rejoinNwk:
   1637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1638            ZStatus_t rejoinStatus = ZSuccess;
   \   00000A   7E00         MOV       R6,#0x0
   1639          
   1640            //Update the seq number
   1641            _NIB.SequenceNum ++;
   \   00000C   90....       MOV       DPTR,#_NIB
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   04           INC       A
   \   000011   F0           MOVX      @DPTR,A
   1642          
   1643            osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   75....       MOV       ?V0,#_NIB & 0xff
   \   000015   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..01       MOV       ?V0,#0x1
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A21         MOV       R2,#0x21
   \   00002D   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1644          
   1645            // Transition state machine to correct rejoin state based on nwk key
   1646            if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   000033                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000038   E9           MOV       A,R1
   \   000039   6401         XRL       A,#0x1
   \   00003B   7004         JNZ       ??bdb_rejoinNwk_0
   1647            {
   1648              ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   00003D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00003D   7904         MOV       R1,#0x4
   \   00003F   8002         SJMP      ??bdb_rejoinNwk_1
   1649            }
   1650            else
   1651            {
   1652              ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \                     ??bdb_rejoinNwk_0:
   \   000041                ; Setup parameters for call to function ZDApp_ChangeState
   \   000041   790E         MOV       R1,#0xe
   \                     ??bdb_rejoinNwk_1:
   \   000043   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1653            }
   1654          
   1655            // Before trying to do rejoin, check if the device has a valid short address
   1656            // If not, generate a random short address for itself
   1657            if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000046   90....       MOV       DPTR,#_NIB + 20
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   64FE         XRL       A,#0xfe
   \   00004C   7003         JNZ       ??bdb_rejoinNwk_2
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F4           CPL       A
   \                     ??bdb_rejoinNwk_2:
   \   000051   7002         JNZ       ??bdb_rejoinNwk_3
   1658            {
   1659              rejoinStatus = ZFailure;
   \   000053   7E01         MOV       R6,#0x1
   1660            }
   1661          
   1662            // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1663            if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??bdb_rejoinNwk_3:
   \   000055   90....       MOV       DPTR,#_NIB + 33
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F4           CPL       A
   \   00005A   7003         JNZ       ??bdb_rejoinNwk_4
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F4           CPL       A
   \                     ??bdb_rejoinNwk_4:
   \   00005F   7004         JNZ       ??bdb_rejoinNwk_5
   1664            {
   1665              rejoinStatus = ZFailure;
   \   000061   7E01         MOV       R6,#0x1
   \   000063   803A         SJMP      ??bdb_rejoinNwk_6
   1666            }
   1667          
   1668            if(rejoinStatus == ZSuccess)
   \                     ??bdb_rejoinNwk_5:
   \   000065   EE           MOV       A,R6
   \   000066   A2E0         MOV       C,0xE0 /* A   */.0
   \   000068   4035         JC        ??bdb_rejoinNwk_6
   1669            {
   1670              uint8 tmp = true;
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   7401         MOV       A,#0x1
   \   000072   F0           MOVX      @DPTR,A
   1671              ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000073                ; Setup parameters for call to function ZMacSetReq
   \   000073   AA..         MOV       R2,?XSP + 0
   \   000075   AB..         MOV       R3,?XSP + 1
   \   000077   7952         MOV       R1,#0x52
   \   000079   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1672          
   1673              // Perform Secure or Unsecure Rejoin depending on available configuration
   1674              if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   00007C                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00007C   7901         MOV       R1,#0x1
   \   00007E   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000081   E9           MOV       A,R1
   \   000082   6401         XRL       A,#0x1
   \   000084   90....       MOV       DPTR,#_NIB + 22
   \   000087   700B         JNZ       ??bdb_rejoinNwk_7
   1675              {
   1676                rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \   000089                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F9           MOV       R1,A
   \   00008B   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00008D   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00008F   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   000092   8009         SJMP      ??bdb_rejoinNwk_8
   1677              }
   1678              else
   1679              {
   1680                rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \                     ??bdb_rejoinNwk_7:
   \   000094                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000098   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00009A   12....       LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??bdb_rejoinNwk_8:
   \   00009D   E9           MOV       A,R1
   \   00009E   FE           MOV       R6,A
   1681              }
   1682            }
   1683          
   1684            return rejoinStatus;
   \                     ??bdb_rejoinNwk_6:
   \   00009F   EE           MOV       A,R6
   \   0000A0   F9           MOV       R1,A
   \   0000A1   7401         MOV       A,#0x1
   \   0000A3   02....       LJMP      ?Subroutine1 & 0xFFFF
   1685          }
   1686          
   1687          #if (ZG_BUILD_JOINING_TYPE)
   1688           /*********************************************************************
   1689           * @fn          bdb_nwkDiscoveryAttempt
   1690           *
   1691           * @brief       Process a nwk discovery attempt
   1692           *
   1693           * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if
   1694           *                           no suitable nwks were found, try secondary channel
   1695           *
   1696           * @return      none
   1697           */
   1698          void bdb_nwkDiscoveryAttempt(bool didSuccess)
   1699          {
   1700            uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   1701          
   1702            if(didSuccess)
   1703            {
   1704              bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
   1705            }
   1706            else
   1707            {
   1708              //Can we try the secondary channel set?
   1709              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   1710              {
   1711                vDoPrimaryScan = FALSE;
   1712                bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   1713          
   1714                ZDApp_NetworkInit( 50 );
   1715              }
   1716              else
   1717              {
   1718                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   1719              }
   1720            }
   1721          }
   1722          
   1723           /*********************************************************************
   1724           * @fn          bdb_filterNwkDisc
   1725           *
   1726           * @brief       Filter the nwks found and attempt to join the suitable nwks
   1727           *              Here the application can include nwk filters
   1728           *
   1729           * @param       none
   1730           *
   1731           * @return      none
   1732           */
   1733          void bdb_filterNwkDisc(void)
   1734          {
   1735            networkDesc_t* pNwkDesc;
   1736            uint8 i = 0;
   1737            uint8 ResultCount = 0;
   1738            uint8 stackProfile = 0;
   1739            uint8 stackProfilePro = 0;
   1740          
   1741            pBDBListNwk  = nwk_getNwkDescList();
   1742            nwk_desc_list_release();
   1743          
   1744            pNwkDesc = pBDBListNwk;
   1745            while (pNwkDesc)
   1746            {
   1747              ResultCount++;
   1748              pNwkDesc = pNwkDesc->nextDesc;
   1749            }
   1750          
   1751            if(pBDBListNwk)
   1752            {
   1753              if(pfnFilterNwkDesc)
   1754              {
   1755                pfnFilterNwkDesc(pBDBListNwk, ResultCount);
   1756              }
   1757          
   1758              for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   1759              {
   1760                pNwkDesc = pBDBListNwk;
   1761          
   1762                if(pNwkDesc)
   1763                {
   1764                  for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   1765                  {
   1766                    if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   1767                    {
   1768                      // If the extended Pan ID is commissioned to a non zero value
   1769                      // Only join the Pan that has match EPID
   1770                      if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1771                      {
   1772                        //Remove from the list
   1773                        bdb_nwkDescFree(pNwkDesc);
   1774                        ResultCount--;
   1775                        continue;
   1776                      }
   1777                    }
   1778                    else if ( zgConfigPANID != 0xFFFF )
   1779                    {
   1780                      // PAN Id is preconfigured. check if it matches
   1781                      if ( pNwkDesc->panId != zgConfigPANID )
   1782                      {
   1783                        //Remove from the list
   1784                        bdb_nwkDescFree(pNwkDesc);
   1785                        ResultCount--;
   1786                        continue;
   1787                      }
   1788                    }
   1789          
   1790                    if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   1791                    {
   1792                      // check that network is allowing joining
   1793                      if ( ZSTACK_ROUTER_BUILD )
   1794                      {
   1795                        if ( stackProfilePro == FALSE )
   1796                        {
   1797                          if ( !pNwkDesc->routerCapacity )
   1798                          {
   1799                            //Remove from the list
   1800                            bdb_nwkDescFree(pNwkDesc);
   1801                            ResultCount--;
   1802                            continue;
   1803                          }
   1804                        }
   1805                        else
   1806                        {
   1807                          if ( !pNwkDesc->deviceCapacity )
   1808                          {
   1809                            //Remove from the list
   1810                            bdb_nwkDescFree(pNwkDesc);
   1811                            ResultCount--;
   1812                            continue;
   1813                          }
   1814                        }
   1815                      }
   1816                      else if ( ZSTACK_END_DEVICE_BUILD )
   1817                      {
   1818                        if ( !pNwkDesc->deviceCapacity )
   1819                        {
   1820                          //Remove from the list
   1821                          bdb_nwkDescFree(pNwkDesc);
   1822                          ResultCount--;
   1823                          continue;
   1824                        }
   1825                      }
   1826                    }
   1827          
   1828                    // check version of zigbee protocol
   1829                    if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1830                      continue;
   1831          
   1832                    // check version of stack profile
   1833                    if ( pNwkDesc->stackProfile != zgStackProfile  )
   1834                    {
   1835                      if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1836                          || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   1837                      {
   1838                        stackProfilePro = TRUE;
   1839                      }
   1840          
   1841                      if ( stackProfile == 0 )
   1842                      {
   1843                        //Remove from the list
   1844                        bdb_nwkDescFree(pNwkDesc);
   1845                        ResultCount--;
   1846                        continue;
   1847                      }
   1848                    }
   1849                  }
   1850                }
   1851              }
   1852            }
   1853          }
   1854          
   1855           /*********************************************************************
   1856           * @fn          bdb_tryNwkAssoc
   1857           *
   1858           * @brief       Try to associate to the first network in the network descriptor list
   1859           *
   1860           * @param       none
   1861           *
   1862           * @return      none
   1863           */
   1864          static void bdb_tryNwkAssoc(void)
   1865          {
   1866            if(pBDBListNwk)
   1867            {
   1868              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   1869          
   1870              //Try the first in the list after the filtering
   1871              if(ZSuccess != bdb_joinProcess(pBDBListNwk))
   1872              {
   1873                //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
   1874                uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   1875                bdb_nwkDescFree(pBDBListNwk);
   1876                bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   1877              }
   1878            }
   1879            else
   1880            {
   1881              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
   1882              uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   1883          
   1884              bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   1885            }
   1886          }
   1887          
   1888          
   1889          
   1890           /*********************************************************************
   1891           * @fn          bdb_nwkAssocAttemt
   1892           *
   1893           * @brief       Process the result of an attempt to associate to a network
   1894           *
   1895           * @param       didSuccess - bool
   1896           *
   1897           * @return      none
   1898           */
   1899          void bdb_nwkAssocAttemt(bool didSuccess)
   1900          {
   1901            bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
   1902            uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   1903            uint8 status;
   1904          
   1905            if(didSuccess)
   1906            {
   1907              status = BDB_MSG_EVENT_SUCCESS;
   1908            }
   1909            else
   1910            {
   1911              if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
   1912              {
   1913                bdb_nwkAssocRetriesCount++;
   1914              }
   1915              else
   1916              {
   1917                //Free the first in the list and prepare for futher processing
   1918                bdb_nwkDescFree(pBDBListNwk);
   1919                bdb_nwkAssocRetriesCount = 0;
   1920              }
   1921              status = BDB_MSG_EVENT_FAIL;
   1922            }
   1923            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
   1924          }
   1925          
   1926          
   1927          /****************************************************************************
   1928           * @fn          bdb_nwkDescFree
   1929           *
   1930           * @brief       This function frees one network discovery data.
   1931           *
   1932           * @param       ZSuccess - If the device was found and erased
   1933           * @param       ZInvalidParameter - Not found
   1934           *
   1935           * @return      none
   1936           */
   1937          ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
   1938          {
   1939            networkDesc_t* current_desc;
   1940            networkDesc_t* prev_desc;
   1941          
   1942            current_desc = pBDBListNwk;
   1943          
   1944            while(current_desc != NULL)
   1945            {
   1946              if(current_desc == nodeDescToRemove)
   1947              {
   1948                if (current_desc == pBDBListNwk)
   1949                {
   1950                  pBDBListNwk = pBDBListNwk->nextDesc;
   1951                }
   1952                else
   1953                {
   1954                  prev_desc->nextDesc = current_desc->nextDesc;
   1955                }
   1956          
   1957                osal_mem_free( current_desc );
   1958          
   1959                return ZSuccess;
   1960              }
   1961          
   1962              prev_desc = current_desc;
   1963              current_desc = current_desc->nextDesc;
   1964            }
   1965          
   1966            return ZInvalidParameter;
   1967          }
   1968          
   1969          /*********************************************************************
   1970          * @fn          bdb_joinProcess
   1971          *
   1972          * @brief       Start the joining process for the selected nwk
   1973          *
   1974          * @return      ZStatus_t
   1975          */
   1976          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
   1977          {
   1978            ZStatus_t status;
   1979          
   1980            ZDApp_ChangeState( DEV_NWK_JOINING );
   1981            ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   1982          
   1983            status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1984                                  pChosenNwk->logicalChannel,
   1985                                  ZDO_Config_Node_Descriptor.CapabilityFlags,
   1986                                  pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
   1987          
   1988            if(status == ZSuccess)
   1989            {
   1990              // The receiver is on, turn network layer polling off.
   1991              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   1992              {
   1993                // for an End Device with NO Child Table Management process or for a Router
   1994                if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1995                     ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   1996                {
   1997                  NLME_SetPollRate( 0 );
   1998                  NLME_SetQueuedPollRate( 0 );
   1999                  NLME_SetResponseRate( 0 );
   2000                }
   2001              }
   2002              else
   2003              {
   2004                if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   2005                {
   2006                  ZDApp_SavedPollRate = zgPollRate;
   2007                  NLME_SetPollRate( zgRejoinPollRate );
   2008                }
   2009              }
   2010            }
   2011            return status;
   2012          }
   2013          #endif
   2014          
   2015          
   2016           /*********************************************************************
   2017           * @fn          bdb_setChannelAttribute
   2018           *
   2019           * @brief       Set the primary or seconday channel for discovery or formation procedure
   2020           *
   2021           * @param       isPrimaryChannel - True if channel to set is primary,
   2022           *                                 False if the channel to set is secondary
   2023           *
   2024           * @param       channel - Channel mask
   2025           *
   2026           * @return      none
   2027           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2028          void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
   \                     bdb_setChannelAttribute:
   2029          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2030            if(isPrimaryChannel)
   \   00000D   E9           MOV       A,R1
   \   00000E   6005         JZ        ??bdb_setChannelAttribute_0
   2031            {
   2032              bdbAttributes.bdbPrimaryChannelSet = channel;
   \   000010   90....       MOV       DPTR,#bdbAttributes + 4
   \   000013   8003         SJMP      ??bdb_setChannelAttribute_1
   2033            }
   2034            else
   2035            {
   2036              bdbAttributes.bdbSecondaryChannelSet = channel;
   \                     ??bdb_setChannelAttribute_0:
   \   000015   90....       MOV       DPTR,#bdbAttributes
   \                     ??bdb_setChannelAttribute_1:
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2037            }
   2038          }
   \   00001D   80..         SJMP      ??Subroutine49_0
   2039          
   2040           /*********************************************************************
   2041           * @fn          bdb_setChannel
   2042           *
   2043           * @brief       Set channel and save it in Nv for joining/formation operations
   2044           *
   2045           * @param       channel - Channel mask
   2046           *
   2047           * @return      none
   2048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2049          void bdb_setChannel(uint32 channel)
   \                     bdb_setChannel:
   2050          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2051            //Assign the channel and save it into nv
   2052            vScanChannels = channel;
   \   00000D   90....       MOV       DPTR,#zgDefaultChannelList
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
   2053            runtimeChannel = channel;
   \   000015   90....       MOV       DPTR,#runtimeChannel
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2054          
   2055            osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   75....       MOV       ?V0,#zgDefaultChannelList & 0xff
   \   000020   75....       MOV       ?V1,#(zgDefaultChannelList >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..04       MOV       ?V0,#0x4
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A84         MOV       R2,#-0x7c
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003E   80..         SJMP      ?Subroutine2
   2056          }
   2057          
   2058          
   2059           /*********************************************************************
   2060           * @fn          bdb_nwkJoiningFormation
   2061           *
   2062           * @brief       Performs Joining/Formation operation on primary or secondary channel
   2063           *
   2064           * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
   2065           *
   2066           * @return      none
   2067           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2068          void bdb_nwkJoiningFormation(bool isJoining)
   \                     bdb_nwkJoiningFormation:
   2069          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2070          
   2071            if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
   \   000007   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   601C         JZ        ??bdb_nwkJoiningFormation_0
   \   00000D   90....       MOV       DPTR,#bdbAttributes + 4
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_X
   \   000015   E5..         MOV       A,?V0
   \   000017   45..         ORL       A,?V1
   \   000019   45..         ORL       A,?V2
   \   00001B   45..         ORL       A,?V3
   \   00001D   600A         JZ        ??bdb_nwkJoiningFormation_0
   2072            {
   2073              bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
   \   00001F                ; Setup parameters for call to function bdb_setChannel
   \   00001F   AA..         MOV       R2,?V0
   \   000021   AB..         MOV       R3,?V1
   \   000023   AC..         MOV       R4,?V2
   \   000025   AD..         MOV       R5,?V3
   \   000027   800B         SJMP      ??bdb_nwkJoiningFormation_1
   2074            }
   2075            else
   2076            {
   2077              vDoPrimaryScan = FALSE;
   \                     ??bdb_nwkJoiningFormation_0:
   \   000029   90....       MOV       DPTR,#vDoPrimaryScan
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
   2078              bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   00002E                ; Setup parameters for call to function bdb_setChannel
   \   00002E   90....       MOV       DPTR,#bdbAttributes
   \   000031   12....       LCALL     ?XLOAD_R2345
   \                     ??bdb_nwkJoiningFormation_1:
   \   000034   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   2079            }
   2080          
   2081            if(vScanChannels)
   \   000037   90....       MOV       DPTR,#zgDefaultChannelList
   \   00003A   12....       LCALL     ?XLOAD_R0123
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   4A           ORL       A,R2
   \   000040   4B           ORL       A,R3
   \   000041   601A         JZ        ??bdb_nwkJoiningFormation_2
   2082            {
   2083              if(ZG_DEVICE_RTRONLY_TYPE)
   \   000043   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   7007         JNZ       ??bdb_nwkJoiningFormation_3
   2084              {
   2085                if(isJoining)
   \   00004B   EE           MOV       A,R6
   \   00004C   7004         JNZ       ??bdb_nwkJoiningFormation_3
   2086                {
   2087                  ZDOInitDeviceEx(100,0);
   2088                }
   2089                else
   2090                {
   2091                  ZDOInitDeviceEx(100,1);
   \   00004E                ; Setup parameters for call to function ZDOInitDeviceEx
   \   00004E   7901         MOV       R1,#0x1
   \   000050   8002         SJMP      ??bdb_nwkJoiningFormation_4
   2092                }
   2093              }
   2094              //ZED can only join, and ZC can only create
   2095              else
   2096              {
   2097                ZDOInitDeviceEx(100,0);
   \                     ??bdb_nwkJoiningFormation_3:
   \   000052                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000052   7900         MOV       R1,#0x0
   \                     ??bdb_nwkJoiningFormation_4:
   \   000054   7A64         MOV       R2,#0x64
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00005B   800E         SJMP      ??bdb_nwkJoiningFormation_5
   2098              }
   2099            }
   2100            else
   2101            {
   2102              if(isJoining)
   \                     ??bdb_nwkJoiningFormation_2:
   \   00005D   EE           MOV       A,R6
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   6004         JZ        ??bdb_nwkJoiningFormation_6
   2103              {
   2104                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \   000062                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000062   7903         MOV       R1,#0x3
   \   000064   8002         SJMP      ??bdb_nwkJoiningFormation_7
   2105              }
   2106              else
   2107              {
   2108                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkJoiningFormation_6:
   \   000066                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000066   7905         MOV       R1,#0x5
   \                     ??bdb_nwkJoiningFormation_7:
   \   000068   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2109              }
   2110            }
   2111          }
   \                     ??bdb_nwkJoiningFormation_5:
   \   00006B   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   2112          
   2113          #if (ZG_BUILD_JOINING_TYPE)
   2114           /*********************************************************************
   2115           * @fn          bdb_tcLinkKeyExchangeAttempt
   2116           *
   2117           * @brief       Generic send msg for TC link key exchange process attempts
   2118           *
   2119           * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
   2120           * @param       bdbTCExchangeState - Step in which the attemp was done
   2121           *
   2122           * @return      none
   2123           */
   2124          void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
   2125          {
   2126            bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
   2127            uint8 dummy;
   2128            bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
   2129            if(didSuccess)
   2130            {
   2131              //Allow try since we are performing a new step.
   2132              osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
   2133              bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
   2134            }
   2135            else
   2136            {
   2137              bdbEventStatus = BDB_MSG_EVENT_FAIL;
   2138            }
   2139            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
   2140          }
   2141          
   2142          
   2143           /*********************************************************************
   2144           * @fn          bdb_requestVerifyTCLinkKey
   2145           *
   2146           * @brief       Attempt to verify the TC link key by sending Verify Key Request
   2147           *
   2148           * @param       none
   2149           *
   2150           * @return      none
   2151           */
   2152          void bdb_requestVerifyTCLinkKey(void)
   2153          {
   2154              uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2155              APSME_VerifyKeyReq_t vKey;
   2156          
   2157              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2158          
   2159              vKey.tcExtAddr = TC_ExtAddr;
   2160              vKey.keyType = KEY_TYPE_TC_LINK;
   2161          
   2162              APSME_VerifyKeyReq( &vKey );
   2163          
   2164              osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2165              osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
   2166          
   2167          }
   2168          
   2169          /*********************************************************************
   2170           * @fn          bdb_requestTCLinkKey
   2171           *
   2172           * @brief       Attempt to request a TC link key
   2173           *
   2174           * @param       none
   2175           *
   2176           * @return      none
   2177           */
   2178          void bdb_requestTCLinkKey(void)
   2179          {
   2180            zAddrType_t destAddr;
   2181            APSME_RequestKeyReq_t req;
   2182          
   2183            destAddr.addrMode = Addr16Bit;
   2184            destAddr.addr.shortAddr = 0x0000;
   2185          
   2186            req.dstAddr = destAddr.addr.shortAddr;
   2187            req.keyType = KEY_TYPE_TC_LINK;
   2188          
   2189            APSME_RequestKeyReq(&req);
   2190          
   2191            osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2192          
   2193            osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
   2194          }
   2195          
   2196          
   2197          /*********************************************************************
   2198           * @fn          bdb_requestTCStackVersion
   2199           *
   2200           * @brief       Attempt to request the TC stack version using ZDP Node desc if
   2201           *              join a Centralized nwk
   2202           *
   2203           * @param       none
   2204           *
   2205           * @return      none
   2206           */
   2207          void bdb_requestTCStackVersion(void)
   2208          {
   2209            if(requestNewTrustCenterLinkKey)
   2210            {
   2211              if(!APSME_IsDistributedSecurity())
   2212              {
   2213                if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
   2214                {
   2215                  zAddrType_t destAddr;
   2216          
   2217                  destAddr.addrMode = Addr16Bit;
   2218                  destAddr.addr.shortAddr = 0x0000;
   2219          
   2220                  ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);
   2221          
   2222                  osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2223                  osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
   2224                  return;
   2225                }
   2226                else
   2227                {
   2228                  if(pfnCBKETCLinkKeyExchange)
   2229                  {
   2230                    pfnCBKETCLinkKeyExchange();
   2231                  }
   2232                  return;
   2233                }
   2234              }
   2235              else
   2236              {
   2237                bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
   2238              }
   2239            }
   2240            else
   2241            {
   2242              //Key not required, set default which is global
   2243              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   2244            }
   2245            //TC link key not required or join distributed nwk
   2246            bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
   2247          }
   2248          #endif
   2249          
   2250          
   2251          /*********************************************************************
   2252           * @fn          bdb_nwkSteeringDeviceOnNwk
   2253           *
   2254           * @brief       Send ZDP mgmt permit joining
   2255           *
   2256           * @param       none
   2257           *
   2258           * @return      none
   2259           */
   2260          void bdb_nwkSteeringDeviceOnNwk(void)
   2261          {
   2262            /*
   2263             * Zigbee HomeAutomation don't need to permit joining
   2264             */
   2265            // zAddrType_t dstAddr;
   2266            // dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   2267            // dstAddr.addrMode = AddrBroadcast;
   2268            // // Trust Center significance is always true
   2269            // ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
   2270          }
   2271          
   2272          
   2273          /*********************************************************************
   2274           * @fn          bdb_startResumeCommissioningProcess
   2275           *
   2276           * @brief       Starts or resume the commissioning operations sets in the
   2277           *              commissioningMode attribute
   2278           *
   2279           * @param       none
   2280           *
   2281           * @return      none
   2282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2283          void bdb_startResumeCommissioningProcess(void)
   \                     bdb_startResumeCommissioningProcess:
   2284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2285          
   2286          #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
   2287            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
   2288            {
   2289              uint16 nwkAddr;
   2290          
   2291              //Does the device supports this commissioning mode?
   2292              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
   2293              {
   2294                //Clear previous state and substates
   2295                osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2296                bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
   2297          
   2298                // Get our short address
   2299                ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
   2300                if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
   2301                {
   2302                  initiatorSelectNwkParams();
   2303                }
   2304          
   2305                touchLinkInitiator_StartDevDisc( );
   2306          
   2307                bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
   2308              }
   2309              else
   2310              {
   2311                //Process the next commissioning mode
   2312                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   2313              }
   2314              return;
   2315            }
   2316          #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED
   2317          
   2318          #if ZG_BUILD_ENDDEVICE_TYPE
   2319            if(ZG_DEVICE_ENDDEVICE_TYPE)
   2320            {
   2321              if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   2322              {
   2323                //No commissioning process can be performed if the ZED has lost its parent
   2324                return;
   2325              }
   2326            }
   2327          #endif
   2328          
   2329            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
   \   00000A   90....       MOV       DPTR,#bdbAttributes + 11
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   A2E1         MOV       C,0xE0 /* A   */.1
   \   000010   5025         JNC       ??bdb_startResumeCommissioningProcess_0
   2330            {
   2331              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   000012   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000015   7404         MOV       A,#0x4
   \   000017   F0           MOVX      @DPTR,A
   2332          
   2333              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
   \   000018   90....       MOV       DPTR,#bdbAttributes + 12
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001E   5014         JNC       ??bdb_startResumeCommissioningProcess_1
   2334              {
   2335          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2336                bdb_ClearNetworkParams();
   2337          #endif
   2338                if(bdbAttributes.bdbNodeIsOnANetwork)
   \   000020   90....       MOV       DPTR,#bdbAttributes + 14
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6007         JZ        ??bdb_startResumeCommissioningProcess_2
   2339                {
   2340                  bdb_nwkSteeringDeviceOnNwk();
   2341                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   000026                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000026   7A01         MOV       R2,#0x1
   \   000028   7904         MOV       R1,#0x4
   \   00002A   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2342                }
   2343          #if (ZG_BUILD_JOINING_TYPE)
   2344                else
   2345                {
   2346                  if(ZG_DEVICE_JOINING_TYPE)
   2347                  {
   2348                    vDoPrimaryScan = TRUE;
   2349          
   2350                    //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
   2351                    osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
   2352                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
   2353                    bdb_nwkJoiningFormation(TRUE);
   2354                    bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
   2355                  }
   2356                }
   2357          #endif
   2358          #if (ZG_BUILD_COORDINATOR_TYPE)
   2359                if(ZG_DEVICE_COORDINATOR_TYPE)
   2360                {
   2361                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
   \                     ??bdb_startResumeCommissioningProcess_2:
   \   00002D                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00002D   7A00         MOV       R2,#0x0
   \   00002F   7904         MOV       R1,#0x4
   \   000031   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2362                }
   2363          #endif
   2364              }
   2365              return;
   \                     ??bdb_startResumeCommissioningProcess_1:
   \   000034   02....       LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2366            }
   2367          
   2368            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
   \                     ??bdb_startResumeCommissioningProcess_0:
   \   000037   A2E2         MOV       C,0xE0 /* A   */.2
   \   000039   5044         JNC       ??bdb_startResumeCommissioningProcess_4
   2369            {
   2370              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   00003B   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00003E   7405         MOV       A,#0x5
   \   000040   F0           MOVX      @DPTR,A
   2371          
   2372              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
   \   000041   90....       MOV       DPTR,#bdbAttributes + 12
   \   000044   E0           MOVX      A,@DPTR
   \   000045   A2E1         MOV       C,0xE0 /* A   */.1
   \   000047   502C         JNC       ??bdb_startResumeCommissioningProcess_5
   2373              {
   2374                if(!bdbAttributes.bdbNodeIsOnANetwork)
   \   000049   90....       MOV       DPTR,#bdbAttributes + 14
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   7026         JNZ       ??bdb_startResumeCommissioningProcess_5
   2375                {
   2376          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2377                bdb_ClearNetworkParams();
   2378          #endif
   2379                  vDoPrimaryScan = TRUE;
   \   00004F   90....       MOV       DPTR,#vDoPrimaryScan
   \   000052   7401         MOV       A,#0x1
   \   000054   F0           MOVX      @DPTR,A
   2380          
   2381                  osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   \   000055                ; Setup parameters for call to function osal_memset
   \   000055   7C04         MOV       R4,#0x4
   \   000057   7D00         MOV       R5,#0x0
   \   000059   7900         MOV       R1,#0x0
   \   00005B   7A..         MOV       R2,#bdbCommissioningProcedureState & 0xff
   \   00005D   7B..         MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
   \   00005F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2382                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   000062   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000065   7405         MOV       A,#0x5
   \   000067   F0           MOVX      @DPTR,A
   2383          
   2384                  bdb_nwkJoiningFormation(FALSE);
   \   000068                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000068   7900         MOV       R1,#0x0
   \   00006A   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   2385                  bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
   \   00006D                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   00006D   7902         MOV       R1,#0x2
   \   00006F   12....       LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   2386                  return;
   \   000072   02....       LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2387                }
   2388              }
   2389              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_startResumeCommissioningProcess_5:
   \   000075                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000075   7A00         MOV       R2,#0x0
   \   000077   7905         MOV       R1,#0x5
   \   000079   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2390              return;
   \   00007C   02....       LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2391            }
   2392          
   2393          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
   2394            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \                     ??bdb_startResumeCommissioningProcess_4:
   \   00007F   A2E3         MOV       C,0xE0 /* A   */.3
   \   000081   4003         JC        $+5
   \   000083   02....       LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2395            {
   2396              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
   \   000086   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000089   7406         MOV       A,#0x6
   \   00008B   F0           MOVX      @DPTR,A
   2397          
   2398              //Is the device on a network?
   2399              if(bdb_isDeviceNonFactoryNew())
   \   00008C   90....       MOV       DPTR,#bdbAttributes + 14
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   7003         JNZ       $+5
   \   000092   02....       LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
   2400              {
   2401                zclAttrRec_t attrRec;
   2402          
   2403                endPointDesc_t *bdb_CurrEpDescriptor = NULL;
   2404          
   2405                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000095                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000095   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   000098   8A..         MOV       ?V0,R2
   \   00009A   8B..         MOV       ?V1,R3
   \   00009C   AE..         MOV       R6,?V0
   \   00009E   AF..         MOV       R7,?V1
   2406          
   2407                //If not found endpoint with Identify cluster is found, then report fail
   2408                if(bdb_CurrEpDescriptor == NULL)
   \   0000A0   EA           MOV       A,R2
   \   0000A1   4F           ORL       A,R7
   \   0000A2   7003         JNZ       $+5
   \   0000A4   02....       LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
   2409                {
   2410                  bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   0000A7                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   2411                  return;
   2412                }
   2413          
   2414                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
   \   0000A7   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000AA   F8           MOV       R0,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000B3   4003         JC        $+5
   \   0000B5   02....       LJMP      ??bdb_startResumeCommissioningProcess_7 & 0xFFFF
   2415                {
   2416                  if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2417                            ATTRID_IDENTIFY_TIME, &attrRec ) )
   \   0000B8                ; Setup parameters for call to function zclFindAttrRec
   \   0000B8   7403         MOV       A,#0x3
   \   0000BA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BD   88..         MOV       ?V0,R0
   \   0000BF   89..         MOV       ?V1,R1
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7C00         MOV       R4,#0x0
   \   0000C8   7D00         MOV       R5,#0x0
   \   0000CA   7A03         MOV       R2,#0x3
   \   0000CC   7B00         MOV       R3,#0x0
   \   0000CE   8E82         MOV       DPL,R6
   \   0000D0   8F83         MOV       DPH,R7
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   F9           MOV       R1,A
   \   0000D4   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000D7   7402         MOV       A,#0x2
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV       A,R1
   \   0000DD   6072         JZ        ??bdb_startResumeCommissioningProcess_8
   2418                  {
   2419                    //Set it to at less 180
   2420                    if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
   \   0000DF   7409         MOV       A,#0x9
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000E7   C3           CLR       C
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   94B5         SUBB      A,#-0x4b
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   9400         SUBB      A,#0x0
   \   0000EF   5039         JNC       ??bdb_startResumeCommissioningProcess_9
   2421                    {
   2422                      *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
   \   0000F1   8882         MOV       DPL,R0
   \   0000F3   8983         MOV       DPH,R1
   \   0000F5   74B4         MOV       A,#-0x4c
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E4           CLR       A
   \   0000FA   F0           MOVX      @DPTR,A
   2423                       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   0000FB                ; Setup parameters for call to function osal_start_timerEx
   \   0000FB   90....       MOV       DPTR,#__Constant_3e8
   \   0000FE   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000101   7A00         MOV       R2,#0x0
   \   000103   7B20         MOV       R3,#0x20
   \   000105   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000108   12....       LCALL     ?DEALLOC_XSTACK8
   2424          
   2425                      if(pfnIdentifyTimeChangeCB != NULL)
   \   00010B   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   00010E   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000111   6017         JZ        ??bdb_startResumeCommissioningProcess_9
   2426                      {
   2427                        if(bdbIndentifyActiveEndpoint == 0xFF)
   \   000113   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F4           CPL       A
   \   000118   7004         JNZ       ??bdb_startResumeCommissioningProcess_10
   2428                        {
   2429                          pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);
   \   00011A                ; Setup parameters for indirect call
   \   00011A   79FF         MOV       R1,#-0x1
   \   00011C   8006         SJMP      ??bdb_startResumeCommissioningProcess_11
   2430                        }
   2431                        else
   2432                        {
   2433                          pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
   \                     ??bdb_startResumeCommissioningProcess_10:
   \   00011E                ; Setup parameters for indirect call
   \   00011E   8E82         MOV       DPL,R6
   \   000120   8F83         MOV       DPH,R7
   \   000122   E0           MOVX      A,@DPTR
   \   000123   F9           MOV       R1,A
   2434                        }
   2435                      }
   2436                    }
   \                     ??bdb_startResumeCommissioningProcess_11:
   \   000124   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000127   12....       LCALL     ?CALL_IND
   2437                    //Attribute found and set, report success
   2438                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_9:
   \   00012A   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00012D   4004         JC        ??bdb_startResumeCommissioningProcess_12
   2439                    {
   2440                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
   \   00012F                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00012F   7909         MOV       R1,#0x9
   \   000131   8025         SJMP      ??bdb_startResumeCommissioningProcess_13
   2441                    }
   2442                    else
   2443                    {
   2444                      bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2445          
   2446                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_startResumeCommissioningProcess_12:
   \   000133   7401         MOV       A,#0x1
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   7403         MOV       A,#0x3
   \   00013A   F0           MOVX      @DPTR,A
   2447                      bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
   \   00013B   85..82       MOV       DPL,?XSP + 0
   \   00013E   85..83       MOV       DPH,?XSP + 1
   \   000141   7409         MOV       A,#0x9
   \   000143   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   2448          
   2449                      bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2450                    }
   2451                  }
   \                     ??CrossCallReturnLabel_47:
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000149   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00014C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014F   800A         SJMP      ??bdb_startResumeCommissioningProcess_7
   2452                  else
   2453                  {
   2454                    //Attribute not found and no initiator process, report fail
   2455                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_8:
   \   000151   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000154   4005         JC        ??bdb_startResumeCommissioningProcess_7
   2456                    {
   2457                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   000156                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000156   790E         MOV       R1,#0xe
   \                     ??bdb_startResumeCommissioningProcess_13:
   \   000158   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2458                    }
   2459                  }
   2460                }  //F&B Target
   2461          
   2462                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
   \                     ??bdb_startResumeCommissioningProcess_7:
   \   00015B   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00015E   2401         ADD       A,#0x1
   \   000160   F8           MOV       R0,A
   \   000161   A3           INC       DPTR
   \   000162   E0           MOVX      A,@DPTR
   \   000163   3400         ADDC      A,#0x0
   \   000165   F9           MOV       R1,A
   \   000166   8882         MOV       DPL,R0
   \   000168   F583         MOV       DPH,A
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00016D   5059         JNC       ??bdb_startResumeCommissioningProcess_3
   2463                {
   2464                  bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2465          
   2466                  //If no function to add binds is available then do not process Initiator
   2467                  if(!pbindAddEntry)
   \   00016F   90....       MOV       DPTR,#pbindAddEntry
   \   000172   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000175   7010         JNZ       ??bdb_startResumeCommissioningProcess_14
   2468                  {
   2469                    //If no target process, then report fail
   2470                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
   \   000177   8882         MOV       DPL,R0
   \   000179   8983         MOV       DPH,R1
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00017E   4048         JC        ??bdb_startResumeCommissioningProcess_3
   2471                    {
   2472                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2473                    }
   2474                  }
   2475                  else
   2476                  {
   2477                    //Send identify query with the endpoint requested
   2478                    if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
   2479                    {
   2480                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2481                    }
   2482          
   2483                    //If periodic F&B is enabled
   2484                    if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2485                    {
   2486                      // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
   2487                      bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
   2488          
   2489                      osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   2490                    }
   2491          
   2492                    bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   2493                    bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
   2494          
   2495                    bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2496                  }
   2497                } //F&B Initiator
   2498              }
   2499              //Not in the network
   2500              else
   2501              {
   2502                bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \                     ??bdb_startResumeCommissioningProcess_6:
   \   000180                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000180   790E         MOV       R1,#0xe
   \   000182   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2503              }
   2504          
   2505              return;
   \   000185   8041         SJMP      ??bdb_startResumeCommissioningProcess_3
   \                     ??bdb_startResumeCommissioningProcess_14:
   \   000187                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   000187   8E82         MOV       DPL,R6
   \   000189   8F83         MOV       DPH,R7
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   F9           MOV       R1,A
   \   00018D   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   \   000190   E9           MOV       A,R1
   \   000191   6005         JZ        ??bdb_startResumeCommissioningProcess_15
   \   000193                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000193   790E         MOV       R1,#0xe
   \   000195   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \                     ??bdb_startResumeCommissioningProcess_15:
   \   000198   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00019B   740C         MOV       A,#0xc
   \   00019D   F0           MOVX      @DPTR,A
   \   00019E                ; Setup parameters for call to function osal_start_timerEx
   \   00019E   90....       MOV       DPTR,#__Constant_3a98
   \   0001A1   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001A4   7A40         MOV       R2,#0x40
   \   0001A6   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AC   7401         MOV       A,#0x1
   \   0001AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B1   7403         MOV       A,#0x3
   \   0001B3   F0           MOVX      @DPTR,A
   \   0001B4   85..82       MOV       DPL,?XSP + 0
   \   0001B7   85..83       MOV       DPH,?XSP + 1
   \   0001BA   740A         MOV       A,#0xa
   \   0001BC   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   2506            }
   \                     ??CrossCallReturnLabel_48:
   \   0001BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C2   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001C5   12....       LCALL     ?DEALLOC_XSTACK8
   2507          #endif
   2508          
   2509          }
   \                     ??bdb_startResumeCommissioningProcess_3:
   \   0001C8   740B         MOV       A,#0xb
   \   0001CA   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB + 1
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000E   22           RET
   2510          
   2511          /*********************************************************************
   2512           * @fn          bdb_event_loop
   2513           *
   2514           * @brief       Main event loop bdb tasks.
   2515           *
   2516           * @param       task_id - task id
   2517           * @param       events - event bitmap
   2518           *
   2519           * @return      unprocessed events
   2520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2521          UINT16 bdb_event_loop(byte task_id, UINT16 events)
   \                     bdb_event_loop:
   2522          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2523            (void)task_id;  // Intentionally unreferenced parameter
   2524          
   2525          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
   2526            endPointDesc_t * bdb_CurrEpDescriptor;
   2527          #endif
   2528          
   2529            if(events & BDB_CHANGE_COMMISSIONING_STATE)
   \   00000E   EA           MOV       A,R2
   \   00000F   5404         ANL       A,#0x4
   \   000011   6039         JZ        ??bdb_event_loop_0
   2530            {
   2531              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \   000013   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000016   E0           MOVX      A,@DPTR
   \   000017   600A         JZ        ??bdb_event_loop_1
   \   000019   24FC         ADD       A,#-0x4
   \   00001B   600B         JZ        ??bdb_event_loop_2
   \   00001D   24FE         ADD       A,#-0x2
   \   00001F   6010         JZ        ??bdb_event_loop_3
   \   000021   8023         SJMP      ??bdb_event_loop_4
   2532              {
   2533                case BDB_COMMISSIONING_STATE_START_RESUME:
   2534                  bdb_startResumeCommissioningProcess();
   \                     ??bdb_event_loop_1:
   \   000023                ; Setup parameters for call to function bdb_startResumeCommissioningProcess
   \   000023   12....       LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
   2535                break;
   \   000026   801E         SJMP      ??bdb_event_loop_4
   2536          
   2537                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2538                  if (ZG_BUILD_JOINING_TYPE)
   2539                  {
   2540                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   2541                  }
   2542                break;
   2543          
   2544                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   2545                  bdb_nwkSteeringDeviceOnNwk();
   2546          
   2547                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \                     ??bdb_event_loop_2:
   \   000028                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000028   7A01         MOV       R2,#0x1
   \   00002A   7904         MOV       R1,#0x4
   \   00002C   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2548                break;
   \   00002F   8015         SJMP      ??bdb_event_loop_4
   2549          
   2550                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   2551                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_3:
   \   000031   90....       MOV       DPTR,#bdbAttributes + 10
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   2552                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000036   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000039   F0           MOVX      @DPTR,A
   2553                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   00003A                ; Setup parameters for call to function osal_start_timerEx
   \   00003A   90....       MOV       DPTR,#__Constant_32
   \   00003D   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000040   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   2554                break;
   2555          
   2556              }
   2557              return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
   \                     ??bdb_event_loop_4:
   \   000046   EE           MOV       A,R6
   \   000047   6404         XRL       A,#0x4
   \   000049   02....       LJMP      ??bdb_event_loop_5 & 0xFFFF
   2558            }
   2559          
   2560            if ( events & SYS_EVENT_MSG )
   \                     ??bdb_event_loop_0:
   \   00004C   EB           MOV       A,R3
   \   00004D   5480         ANL       A,#0x80
   \   00004F   7026         JNZ       ??bdb_event_loop_6
   2561            {
   2562              uint8 *msg_ptr;
   2563          
   2564              while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
   2565              {
   2566                //Process the Incomming ZDO messages used by BDB commissioning methods
   2567                if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
   2568                {
   2569                  bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
   2570                }
   2571          
   2572                //Validate the is receive on the right process
   2573                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
   2574                {
   2575                  bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
   2576                }
   2577                //Notify the user
   2578                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
   2579                {
   2580                  ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
   2581                  if(pfnCommissioningStatusCB)
   2582                  {
   2583                    pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2584                  }
   2585          #ifdef MT_APP_CNF_FUNC
   2586                  //Notify the host processor about the event
   2587                  MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2588          #endif
   2589                }
   2590          #if (ZG_BUILD_COORDINATOR_TYPE)
   2591                else
   2592                {
   2593                  if(ZG_DEVICE_COORDINATOR_TYPE)
   2594                  {
   2595                    //Notify the status
   2596                    if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
   2597                    {
   2598                      pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
   2599                    }
   2600                  }
   2601                }
   2602          #endif
   2603                // Release the memory
   2604                osal_msg_deallocate( msg_ptr );
   2605              }
   2606          
   2607              // Return unprocessed events
   2608              return (events ^ SYS_EVENT_MSG);
   2609            }
   2610          
   2611          
   2612            if(events & BDB_PROCESS_TIMEOUT)
   \   000051   EB           MOV       A,R3
   \   000052   5410         ANL       A,#0x10
   \   000054   7003         JNZ       $+5
   \   000056   02....       LJMP      ??bdb_event_loop_7 & 0xFFFF
   2613            {
   2614              bdb_processTimeout();
   2615              // Return unprocessed events
   2616              return (events ^ BDB_PROCESS_TIMEOUT);
   \   000059   EB           MOV       A,R3
   \   00005A   6410         XRL       A,#0x10
   \   00005C   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2617            }
   \                     ??bdb_event_loop_9:
   \   00005F   7409         MOV       A,#0x9
   \   000061   68           XRL       A,R0
   \   000062   700C         JNZ       ??bdb_event_loop_10
   \   000064                ; Setup parameters for indirect call
   \   000064   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   A3           INC       DPTR
   \                     ??bdb_event_loop_11:
   \   00006A   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00006D   12....       LCALL     ?CALL_IND
   \                     ??bdb_event_loop_10:
   \   000070                ; Setup parameters for call to function osal_msg_deallocate
   \   000070   AA..         MOV       R2,?V0
   \   000072   AB..         MOV       R3,?V1
   \   000074   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??bdb_event_loop_6:
   \   000077                ; Setup parameters for call to function osal_msg_receive
   \   000077   90....       MOV       DPTR,#bdb_TaskID
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00007F   8A..         MOV       ?V0,R2
   \   000081   8B..         MOV       ?V1,R3
   \   000083   EA           MOV       A,R2
   \   000084   4B           ORL       A,R3
   \   000085   6066         JZ        ??bdb_event_loop_12
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F8           MOV       R0,A
   \   00008D   74D3         MOV       A,#-0x2d
   \   00008F   68           XRL       A,R0
   \   000090   702D         JNZ       ??bdb_event_loop_13
   \   000092   EA           MOV       A,R2
   \   000093   240C         ADD       A,#0xc
   \   000095   F582         MOV       DPL,A
   \   000097   E4           CLR       A
   \   000098   35..         ADDC      A,?V1
   \   00009A   F583         MOV       DPH,A
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F5..         MOV       ?V2,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F5..         MOV       ?V3,A
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for bdb_event_loop>_0`:
   \   0000A8   0180         DW        32769
   \   0000AA   03           DB        3
   \   0000AB   ....         DW        ??bdb_event_loop_10
   \   0000AD   ....         DW        ??bdb_event_loop_14
   \   0000AF   ....         DW        ??bdb_event_loop_10
   \   0000B1   ....         DW        ??bdb_event_loop_10
   \   0000B3   ....         DW        ??bdb_event_loop_15
   \                     ??bdb_event_loop_15:
   \   0000B5                ; Setup parameters for call to function bdb_ProcessSimpleDesc
   \   0000B5   12....       LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
   \   0000B8   80B6         SJMP      ??bdb_event_loop_10
   \                     ??bdb_event_loop_14:
   \   0000BA                ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
   \   0000BA   12....       LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
   \   0000BD   80B1         SJMP      ??bdb_event_loop_10
   \                     ??bdb_event_loop_13:
   \   0000BF   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   68           XRL       A,R0
   \   0000C4   60AA         JZ        ??bdb_event_loop_10
   \   0000C6   EA           MOV       A,R2
   \   0000C7   2402         ADD       A,#0x2
   \   0000C9   FA           MOV       R2,A
   \   0000CA   E4           CLR       A
   \   0000CB   35..         ADDC      A,?V1
   \   0000CD   FB           MOV       R3,A
   \   0000CE   740A         MOV       A,#0xa
   \   0000D0   68           XRL       A,R0
   \   0000D1   708C         JNZ       ??bdb_event_loop_9
   \   0000D3   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   85..82       MOV       DPL,?V0
   \   0000DA   85..83       MOV       DPH,?V1
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   F0           MOVX      @DPTR,A
   \   0000E2   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0000E5   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000E8   6086         JZ        ??bdb_event_loop_10
   \   0000EA                ; Setup parameters for indirect call
   \   0000EA   02....       LJMP      ??bdb_event_loop_11 & 0xFFFF
   \                     ??bdb_event_loop_12:
   \   0000ED   EE           MOV       A,R6
   \   0000EE   FA           MOV       R2,A
   \   0000EF   EF           MOV       A,R7
   \   0000F0   6480         XRL       A,#0x80
   \   0000F2   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2618          
   2619            if(events &  BDB_REPORT_TIMEOUT){
   \                     ??bdb_event_loop_7:
   \   0000F5   EA           MOV       A,R2
   \   0000F6   5480         ANL       A,#0x80
   \   0000F8   6007         JZ        ??bdb_event_loop_16
   2620          #ifdef BDB_REPORTING
   2621              bdb_RepProcessEvent();
   2622          #endif
   2623              // Return unprocessed events
   2624              return (events ^ BDB_REPORT_TIMEOUT);
   \   0000FA   EA           MOV       A,R2
   \   0000FB   6480         XRL       A,#0x80
   \   0000FD   FA           MOV       R2,A
   \   0000FE   02....       LJMP      ??bdb_event_loop_17 & 0xFFFF
   2625            }
   2626          
   2627          #if (ZG_BUILD_JOINING_TYPE)
   2628            if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
   2629            {
   2630              if(ZG_DEVICE_JOINING_TYPE)
   2631              {
   2632                NLME_LeaveReq_t leaveReq;
   2633                // Set every field to 0
   2634                osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   2635          
   2636                bdb_setNodeIsOnANetwork(FALSE);
   2637          
   2638                if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   2639                {
   2640                  osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   2641                }
   2642              }
   2643              // Return unprocessed events
   2644              return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   2645            }
   2646          #endif
   2647          
   2648            if(events & BDB_TC_JOIN_TIMEOUT)
   \                     ??bdb_event_loop_16:
   \   000101   EB           MOV       A,R3
   \   000102   5408         ANL       A,#0x8
   \   000104   600B         JZ        ??bdb_event_loop_18
   2649            {
   2650          #if (ZG_BUILD_COORDINATOR_TYPE)
   2651              if(ZG_DEVICE_COORDINATOR_TYPE)
   2652              {
   2653                bdb_TCProcessJoiningList();
   \   000106                ; Setup parameters for call to function bdb_TCProcessJoiningList
   \   000106   12....       LCALL     `??bdb_TCProcessJoiningList::?relay`; Banked call to: bdb_TCProcessJoiningList
   2654              }
   2655          #endif
   2656              return (events ^ BDB_TC_JOIN_TIMEOUT);
   \   000109   EE           MOV       A,R6
   \   00010A   FA           MOV       R2,A
   \   00010B   EF           MOV       A,R7
   \   00010C   6408         XRL       A,#0x8
   \   00010E   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2657            }
   2658          
   2659          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
   2660          
   2661            if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
   \                     ??bdb_event_loop_18:
   \   000111   EA           MOV       A,R2
   \   000112   5440         ANL       A,#0x40
   \   000114   6049         JZ        ??bdb_event_loop_19
   2662            {
   2663              if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2664              {
   2665                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000116                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000116   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   000119   8A..         MOV       ?V0,R2
   \   00011B   8B..         MOV       ?V1,R3
   2666          
   2667                //If we have endpoint from which to send the identify command, then proceed, otherwise finish
   2668                if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
   \   00011D   EA           MOV       A,R2
   \   00011E   4B           ORL       A,R3
   \   00011F   602B         JZ        ??bdb_event_loop_20
   2669                {
   2670                  //Substract an attempt
   2671                  bdb_FB_InitiatorCurrentCyclesNumber--;
   2672          
   2673                  if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
   \   000121   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000124   E0           MOVX      A,@DPTR
   \   000125   14           DEC       A
   \   000126   F0           MOVX      @DPTR,A
   \   000127   6029         JZ        ??bdb_event_loop_21
   2674                  {
   2675                    //Only send Identify Query if there is no pending responses from a previous identify query
   2676                    if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
   \   000129                ; Setup parameters for call to function osal_get_timeoutEx
   \   000129   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00012C   7010         JNZ       ??bdb_event_loop_22
   \   00012E                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00012E   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000131   700B         JNZ       ??bdb_event_loop_22
   2677                    {
   2678                      //Send identify query with the endpoint requested
   2679                      bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
   \   000133                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   000133   85..82       MOV       DPL,?V0
   \   000136   85..83       MOV       DPH,?V1
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F9           MOV       R1,A
   \   00013B   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   2680                    }
   2681                    osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   \                     ??bdb_event_loop_22:
   \   00013E                ; Setup parameters for call to function osal_start_timerEx
   \   00013E   90....       MOV       DPTR,#__Constant_3a98
   \   000141   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000144   7A40         MOV       R2,#0x40
   \   000146   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   2682                  }
   2683                }
   2684              }
   \                     ??CrossCallReturnLabel_98:
   \   000149   12....       LCALL     ?DEALLOC_XSTACK8
   2685          
   2686              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \                     ??bdb_event_loop_20:
   \   00014C   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   7005         JNZ       ??bdb_event_loop_23
   2687              {
   2688                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \                     ??bdb_event_loop_21:
   \   000152                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000152   790B         MOV       R1,#0xb
   \   000154   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2689              }
   2690          
   2691              return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   \                     ??bdb_event_loop_23:
   \   000157   EE           MOV       A,R6
   \   000158   6440         XRL       A,#0x40
   \                     ??bdb_event_loop_5:
   \   00015A   FA           MOV       R2,A
   \   00015B   EF           MOV       A,R7
   \   00015C   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2692            }
   2693          
   2694            if(events & BDB_IDENTIFY_TIMEOUT)
   \                     ??bdb_event_loop_19:
   \   00015F   EB           MOV       A,R3
   \   000160   5420         ANL       A,#0x20
   \   000162   7003         JNZ       $+5
   \   000164   02....       LJMP      ??bdb_event_loop_24 & 0xFFFF
   2695            {
   2696              zclAttrRec_t identifyAttrRec;
   2697              epList_t *bdb_CurrEpDescriptorNextInList = NULL;
   2698              bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   \   000167   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   00016A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00016D   88..         MOV       ?V0,R0
   \   00016F   F5..         MOV       ?V1,A
   2699          
   2700              bool KeepIdentifyTimerRunning = FALSE;
   \   000171   75..00       MOV       ?V4,#0x0
   \   000174   8024         SJMP      ??CrossCallReturnLabel_15
   2701          
   2702              while(bdb_CurrEpDescriptorNextInList != NULL )
   2703              {
   2704                endPointDesc_t *bdb_EpDescriptor = NULL;
   2705                bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   2706          
   2707                //Do not check ZDO or Zigbee reserved endpoints
   2708                if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   2709                {
   2710                  bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   2711                  continue;
   2712                }
   2713          
   2714                if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2715                                  ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   2716                {
   2717                  if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
   2718                  {
   2719                    (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
   2720                    KeepIdentifyTimerRunning = TRUE;
   2721                  }
   2722                  else
   2723                  {
   2724                    // Use bdb success main state
   2725                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_25:
   \   000176   90....       MOV       DPTR,#bdbAttributes + 10
   \   000179   E4           CLR       A
   \   00017A   F0           MOVX      @DPTR,A
   2726                    if(pfnIdentifyTimeChangeCB != NULL)
   \   00017B   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   00017E   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000181   600E         JZ        ??bdb_event_loop_26
   2727                    {
   2728                      pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
   \   000183                ; Setup parameters for indirect call
   \   000183   85..82       MOV       DPL,?V2
   \   000186   85..83       MOV       DPH,?V3
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   F9           MOV       R1,A
   \   00018B   12....       LCALL     ?Subroutine22 & 0xFFFF
   2729                    }
   2730                  }
   \                     ??CrossCallReturnLabel_71:
   \   00018E   12....       LCALL     ?CALL_IND
   2731                }
   2732                bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_event_loop_26:
   \   000191   85..82       MOV       DPL,?V0
   \   000194   85..83       MOV       DPH,?V1
   \   000197   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00019A   E5..         MOV       A,?V0
   \   00019C   45..         ORL       A,?V1
   \   00019E   606A         JZ        ??bdb_event_loop_27
   \   0001A0   85..82       MOV       DPL,?V0
   \   0001A3   85..83       MOV       DPH,?V1
   \   0001A6   A3           INC       DPTR
   \   0001A7   A3           INC       DPTR
   \   0001A8   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0001AB   8882         MOV       DPL,R0
   \   0001AD   F583         MOV       DPH,A
   \   0001AF   8582..       MOV       ?V2,DPL
   \   0001B2   8583..       MOV       ?V3,DPH
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   60D9         JZ        ??bdb_event_loop_26
   \   0001B8   C3           CLR       C
   \   0001B9   94F1         SUBB      A,#-0xf
   \   0001BB   50D4         JNC       ??bdb_event_loop_26
   \   0001BD                ; Setup parameters for call to function zclFindAttrRec
   \   0001BD   A8..         MOV       R0,?XSP + 0
   \   0001BF   A9..         MOV       R1,?XSP + 1
   \   0001C1   88..         MOV       ?V6,R0
   \   0001C3   89..         MOV       ?V7,R1
   \   0001C5   78..         MOV       R0,#?V6
   \   0001C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CA   7C00         MOV       R4,#0x0
   \   0001CC   7D00         MOV       R5,#0x0
   \   0001CE   7A03         MOV       R2,#0x3
   \   0001D0   7B00         MOV       R3,#0x0
   \   0001D2   85..82       MOV       DPL,?V2
   \   0001D5   85..83       MOV       DPH,?V3
   \   0001D8   E0           MOVX      A,@DPTR
   \   0001D9   F9           MOV       R1,A
   \   0001DA   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0001DD   7402         MOV       A,#0x2
   \   0001DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E2   E9           MOV       A,R1
   \   0001E3   60AC         JZ        ??bdb_event_loop_26
   \   0001E5   7406         MOV       A,#0x6
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0001ED   8882         MOV       DPL,R0
   \   0001EF   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0001F2   6082         JZ        ??bdb_event_loop_25
   \   0001F4   EA           MOV       A,R2
   \   0001F5   24FF         ADD       A,#-0x1
   \   0001F7   1A           DEC       R2
   \   0001F8   EB           MOV       A,R3
   \   0001F9   34FF         ADDC      A,#-0x1
   \   0001FB   FB           MOV       R3,A
   \   0001FC   8882         MOV       DPL,R0
   \   0001FE   8983         MOV       DPH,R1
   \   000200   EA           MOV       A,R2
   \   000201   F0           MOVX      @DPTR,A
   \   000202   A3           INC       DPTR
   \   000203   EB           MOV       A,R3
   \   000204   F0           MOVX      @DPTR,A
   \   000205   75..01       MOV       ?V4,#0x1
   \   000208   8087         SJMP      ??bdb_event_loop_26
   2733              }
   2734          
   2735              //If any endpoint has identify running, keep the timer on
   2736              if(KeepIdentifyTimerRunning)
   \                     ??bdb_event_loop_27:
   \   00020A   E5..         MOV       A,?V4
   \   00020C   6012         JZ        ??bdb_event_loop_28
   2737              {
   2738                osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   00020E                ; Setup parameters for call to function osal_start_timerEx
   \   00020E   90....       MOV       DPTR,#__Constant_3e8
   \   000211   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000214   7A00         MOV       R2,#0x0
   \   000216   7B20         MOV       R3,#0x20
   \   000218   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   2739              }
   \                     ??CrossCallReturnLabel_101:
   \   00021B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021E   8007         SJMP      ??CrossCallReturnLabel_112
   2740              else
   2741              {
   2742                osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \                     ??bdb_event_loop_28:
   \   000220                ; Setup parameters for call to function osal_stop_timerEx
   \   000220   7A00         MOV       R2,#0x0
   \   000222   7B20         MOV       R3,#0x20
   \   000224   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   2743              }
   2744          
   2745              // Return unprocessed events
   2746              return (events ^ BDB_IDENTIFY_TIMEOUT);
   \                     ??CrossCallReturnLabel_112:
   \   000227   EE           MOV       A,R6
   \   000228   FA           MOV       R2,A
   \   000229   EF           MOV       A,R7
   \   00022A   6420         XRL       A,#0x20
   \   00022C   800D         SJMP      ??bdb_event_loop_8
   2747            }
   2748          
   2749            if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
   \                     ??bdb_event_loop_24:
   \   00022E   EB           MOV       A,R3
   \   00022F   5440         ANL       A,#0x40
   \   000231   600B         JZ        ??bdb_event_loop_29
   2750            {
   2751              // Send Simple Descriptor request to a respondent node
   2752              bdb_ProcessRespondentList();
   \   000233                ; Setup parameters for call to function bdb_ProcessRespondentList
   \   000233   12....       LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
   2753          
   2754              return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
   \   000236   EE           MOV       A,R6
   \   000237   FA           MOV       R2,A
   \   000238   EF           MOV       A,R7
   \   000239   6440         XRL       A,#0x40
   \                     ??bdb_event_loop_8:
   \   00023B   FB           MOV       R3,A
   \   00023C   8004         SJMP      ??bdb_event_loop_17
   2755            }
   2756          #endif
   2757          
   2758            return 0;
   \                     ??bdb_event_loop_29:
   \   00023E   7A00         MOV       R2,#0x0
   \   000240   7B00         MOV       R3,#0x0
   \                     ??bdb_event_loop_17:
   \   000242   7408         MOV       A,#0x8
   \   000244   12....       LCALL     ?DEALLOC_XSTACK8
   \   000247   7F08         MOV       R7,#0x8
   \   000249   02....       LJMP      ?BANKED_LEAVE_XDATA
   2759          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine60_0
   \   000002                ; // Fall through to label ??Subroutine60_0
   2760          
   2761          /*********************************************************************
   2762           * @fn          bdb_processZDOMgs
   2763           *
   2764           * @brief       Process ZDO messages used as part of BDB commissioning methods
   2765           *
   2766           * @param       zdoIncomingMsg_t - ZDO message
   2767           *
   2768           * @return
   2769           */
   2770          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
   2771          {
   2772            switch ( pMsg->clusterID )
   2773            {
   2774          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
   2775              case IEEE_addr_rsp:
   2776                 bdb_ProcessIEEEAddrRsp(pMsg);
   2777              break;
   2778              case Simple_Desc_rsp:
   2779                bdb_ProcessSimpleDesc(pMsg);
   2780              break;
   2781          #endif
   2782          
   2783          #if (ZG_BUILD_JOINING_TYPE)
   2784              case Node_Desc_rsp:
   2785                bdb_ProcessNodeDescRsp(pMsg);
   2786              break;
   2787          #endif
   2788          
   2789              default:
   2790              break;
   2791            }
   2792          }
   2793          
   2794          
   2795          /*********************************************************************
   2796           * @fn      bdb_ProcessNodeDescRsp
   2797           *
   2798           * @brief   Process Node Descriptor response to validate the stack version of the
   2799           *
   2800           * @param   zdoIncomingMsg_t *pMsg
   2801           *
   2802           * @return  none
   2803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2804          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessNodeDescRsp:
   2805          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 35
   \   000005   74DD         MOV       A,#-0x23
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2806            //Avoid processing unintended messages
   2807            if(requestNewTrustCenterLinkKey &&
   2808              (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
   \   00000E   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   \   000017   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6401         XRL       A,#0x1
   \   00001D   6003         JZ        $+5
   \   00001F   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   2809            {
   2810              if(!APSME_IsDistributedSecurity())
   \   000022                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000022   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000025   E9           MOV       A,R1
   \   000026   707B         JNZ       ??bdb_ProcessNodeDescRsp_0
   2811              {
   2812                //Is this from the coordinator?
   2813                if(pMsg->srcAddr.addr.shortAddr == 0x0000)
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000031   7070         JNZ       ??bdb_ProcessNodeDescRsp_0
   2814                {
   2815                  ZDO_NodeDescRsp_t NDRsp;
   2816                  uint8 StackComplianceRev;
   2817          
   2818                  //Stop timer to avoid unintended resets
   2819                  osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000033                ; Setup parameters for call to function osal_stop_timerEx
   \   000033   7A00         MOV       R2,#0x0
   \   000035   7B10         MOV       R3,#0x10
   \   000037   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   2820          
   2821                  ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
   \                     ??CrossCallReturnLabel_113:
   \   00003A                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   00003A   7413         MOV       A,#0x13
   \   00003C   12....       LCALL     ?XSTACK_DISP102_8
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
   2822          
   2823                  StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
   2824          
   2825                  if( StackComplianceRev >= STACK_COMPL_REV_21 )
   \   000046   741E         MOV       A,#0x1e
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00004E   7409         MOV       A,#0x9
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?US_SHR
   \   000055   C3           CLR       C
   \   000056   E5..         MOV       A,?V0
   \   000058   9415         SUBB      A,#0x15
   \   00005A   95E0         SUBB      A,0xE0 /* A   */
   \   00005C   C3           CLR       C
   \   00005D   65D0         XRL       A,PSW
   \   00005F   33           RLC       A
   \   000060   4009         JC        ??bdb_ProcessNodeDescRsp_1
   2826                  {
   2827                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
   \   000062                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000062   7A02         MOV       R2,#0x2
   \   000064   7901         MOV       R1,#0x1
   \   000066   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   000069   8038         SJMP      ??bdb_ProcessNodeDescRsp_0
   2828                  }
   2829                  else
   2830                  {
   2831                    APSME_TCLKDevEntry_t TCLKDevEntry;
   2832          
   2833                    //Save the KeyAttribute for joining device that it has joined non-R21 nwk
   2834                    TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
   \                     ??bdb_ProcessNodeDescRsp_1:
   \   00006B   7410         MOV       A,#0x10
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   74FD         MOV       A,#-0x3
   \   000072   F0           MOVX      @DPTR,A
   2835                    osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
   \   000073                ; Setup parameters for call to function osal_nv_write
   \   000073   8582..       MOV       ?V0,DPL
   \   000076   8583..       MOV       ?V1,DPH
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   75..01       MOV       ?V0,#0x1
   \   000081   75..00       MOV       ?V1,#0x0
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   7C10         MOV       R4,#0x10
   \   00008B   7D00         MOV       R5,#0x0
   \   00008D   7A11         MOV       R2,#0x11
   \   00008F   7B01         MOV       R3,#0x1
   \   000091   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   2836          
   2837                    bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   000097                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   000097   7900         MOV       R1,#0x0
   \   000099   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   2838                    bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   \   00009C                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00009C   7A01         MOV       R2,#0x1
   \   00009E   7901         MOV       R1,#0x1
   \   0000A0   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2839                  }
   2840                }
   2841              }
   2842            }
   2843          }
   \                     ??bdb_ProcessNodeDescRsp_0:
   \   0000A3   7423         MOV       A,#0x23
   \   0000A5                REQUIRE ?Subroutine1
   \   0000A5                ; // Fall through to label ?Subroutine1
   2844          
   2845          
   2846          /*********************************************************************
   2847           * @fn          bdb_touchlinkSendFNReset
   2848           *
   2849           * @brief       Starts the Factory New Procedure for Initiator
   2850           *
   2851           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2852           *
   2853           * @return      none
   2854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2855          void bdb_touchlinkSendFNReset( void )
   \                     bdb_touchlinkSendFNReset:
   2856          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2857          #ifdef BDB_TL_INITIATOR
   2858            touchLinkInitiator_ResetToFNProcedure( );
   2859          #endif
   2860          }
   \   000000   02....       LJMP      ?BRET
   2861          
   2862          
   2863          /*********************************************************************
   2864           * @fn          bdb_setNodeIsOnANetwork
   2865           *
   2866           * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
   2867           *
   2868           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2869           *
   2870           * @return      none
   2871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2872          void bdb_setNodeIsOnANetwork(bool isOnANetwork)
   \                     bdb_setNodeIsOnANetwork:
   2873          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2874            if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
   \   000007   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   7006         JNZ       ??bdb_setNodeIsOnANetwork_0
   \   00000E   90....       MOV       DPTR,#bdb_initialization
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7029         JNZ       ??bdb_setNodeIsOnANetwork_1
   2875            {
   2876              //We lose our network
   2877              if(!isOnANetwork)
   \                     ??bdb_setNodeIsOnANetwork_0:
   \   000014   E9           MOV       A,R1
   \   000015   7005         JNZ       ??bdb_setNodeIsOnANetwork_2
   2878              {
   2879                bdbAttributes.bdbCommissioningMode = 0;
   \   000017   90....       MOV       DPTR,#bdbAttributes + 11
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   2880              }
   2881          
   2882              bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
   \                     ??bdb_setNodeIsOnANetwork_2:
   \   00001C   E9           MOV       A,R1
   \   00001D   90....       MOV       DPTR,#bdbAttributes + 14
   \   000020   F0           MOVX      @DPTR,A
   2883          
   2884              osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000021                ; Setup parameters for call to function osal_nv_write
   \   000021   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   000024   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   75..01       MOV       ?V0,#0x1
   \   00002F   75..00       MOV       ?V1,#0x0
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   12....       LCALL     ?Subroutine31 & 0xFFFF
   2885            }
   \                     ??CrossCallReturnLabel_103:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   2886          }
   \                     ??bdb_setNodeIsOnANetwork_1:
   \   00003D   80..         SJMP      ??Subroutine54_0
   2887          
   2888          /*********************************************************************
   2889           * @fn          bdb_setCommissioningGroupID
   2890           *
   2891           * @brief       Sets the commissioning groupd ID
   2892           *
   2893           * @param       groupID
   2894           *
   2895           * @return      none
   2896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2897          void bdb_setCommissioningGroupID(uint16 groupID)
   \                     bdb_setCommissioningGroupID:
   2898          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2899            bdbAttributes.bdbCommissioningGroupID = groupID;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 8
   \   000007   02....       LJMP      ?Subroutine3 & 0xFFFF
   2900          }
   2901          
   2902          /*********************************************************************
   2903           * @fn      bdb_CreateRespondentList
   2904           *
   2905           * @brief   Create respondent list for finding and binding if empty
   2906           *
   2907           * @param   pHead - pointer to a pointer of the list head
   2908           *
   2909           * @return  none
   2910           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008                REQUIRE ??Subroutine51_0
   \   000008                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2911          void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_CreateRespondentList:
   2912          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine12 & 0xFFFF
   2913          
   2914            // Create the list if empty
   2915            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_72:
   \   000008   7008         JNZ       ??CrossCallReturnLabel_30
   2916            {
   2917              *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   2918          
   2919              if ( *pHead != NULL )
   \                     ??CrossCallReturnLabel_114:
   \   00000D   6003         JZ        ??CrossCallReturnLabel_30
   2920              {
   2921                (*pHead)->pNext = NULL;
   \   00000F   12....       LCALL     ?Subroutine33 & 0xFFFF
   2922              }
   2923            }
   2924            return;
   \                     ??CrossCallReturnLabel_30:
   \   000012   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   2925          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7A11         MOV       R2,#0x11
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8B..         MOV       ?V1,R3
   \   000009   A9..         MOV       R1,?V1
   \   00000B                REQUIRE ??Subroutine58_0
   \   00000B                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV       A,R2
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET
   2926          
   2927          /*********************************************************************
   2928           * @fn      bdb_AddRespondentNode
   2929           *
   2930           * @brief   Add node to respondent list for finding and binding
   2931           *
   2932           * @param   pHead - pointer to a pointer of the list head
   2933           *
   2934           * @return  pointer to new node
   2935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2936          bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_AddRespondentNode:
   2937          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine12 & 0xFFFF
   2938            bdbFindingBindingRespondent_t **pCurr;
   2939            bdbFindingBindingRespondent_t *temp;
   2940          
   2941              // Create respondent list if empty
   2942            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_73:
   \   000008   7006         JNZ       ??bdb_AddRespondentNode_0
   2943            {
   2944              bdb_CreateRespondentList( pHead );
   \   00000A                ; Setup parameters for call to function bdb_CreateRespondentList
   \   00000A   12....       LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
   2945              return *pHead;
   \   00000D   02....       LJMP      ??CrossCallReturnLabel_31 & 0xFFFF
   2946            }
   2947            else
   2948            {
   2949              // if pCmd is equal to NULL, don't look for duplucates
   2950              if( pCmd != NULL )
   \                     ??bdb_AddRespondentNode_0:
   \   000010   EC           MOV       A,R4
   \   000011   4D           ORL       A,R5
   \   000012   606D         JZ        ??bdb_AddRespondentNode_1
   2951              {
   2952                //Find if any duplicate in the list
   2953                temp = *pHead;
   \   000014   E8           MOV       A,R0
   \   000015   FA           MOV       R2,A
   \   000016   E9           MOV       A,R1
   \   000017   FB           MOV       R3,A
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FC           MOV       R4,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FD           MOV       R5,A
   2954          
   2955                while(temp != NULL)
   2956                {
   2957                  if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
   \                     ??bdb_AddRespondentNode_2:
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FE           MOV       R6,A
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   6E           XRL       A,R6
   \   00003F   7034         JNZ       ??bdb_AddRespondentNode_3
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   6E           XRL       A,R6
   \   00005E   7003         JNZ       ??bdb_AddRespondentNode_4
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6F           XRL       A,R7
   \                     ??bdb_AddRespondentNode_4:
   \   000063   7010         JNZ       ??bdb_AddRespondentNode_3
   2958                  {
   2959                    //Duplicate
   2960                    if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   12....       LCALL     ?Subroutine28 & 0xFFFF
   2961                    {
   2962                      return NULL;
   2963                    }
   2964                  }
   \                     ??CrossCallReturnLabel_27:
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   6E           XRL       A,R6
   \   00006E   7003         JNZ       ??bdb_AddRespondentNode_5
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   6F           XRL       A,R7
   \                     ??bdb_AddRespondentNode_5:
   \   000073   6021         JZ        ??bdb_AddRespondentNode_6
   2965                  temp = temp->pNext;
   \                     ??bdb_AddRespondentNode_3:
   \   000075   EA           MOV       A,R2
   \   000076   240F         ADD       A,#0xf
   \   000078   F582         MOV       DPL,A
   \   00007A   E4           CLR       A
   \   00007B   3B           ADDC      A,R3
   \   00007C   12....       LCALL     ?Subroutine17 & 0xFFFF
   2966                }
   2967              }
   \                     ??CrossCallReturnLabel_121:
   \   00007F   70A0         JNZ       ??bdb_AddRespondentNode_2
   2968          
   2969              pCurr = &((*pHead)->pNext);
   2970          
   2971              while ( *pCurr != NULL )
   2972              {
   2973                pCurr = &((*pCurr)->pNext);
   \                     ??bdb_AddRespondentNode_1:
   \   000081   E8           MOV       A,R0
   \   000082   240F         ADD       A,#0xf
   \   000084   FE           MOV       R6,A
   \   000085   E4           CLR       A
   \   000086   39           ADDC      A,R1
   \   000087   FF           MOV       R7,A
   2974              }
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00008F   70F0         JNZ       ??bdb_AddRespondentNode_1
   2975          
   2976              *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   000091                ; Setup parameters for call to function osal_mem_alloc
   \   000091   12....       LCALL     ?Subroutine9 & 0xFFFF
   2977          
   2978              if(*pCurr == NULL)
   \                     ??CrossCallReturnLabel_115:
   \   000094   7006         JNZ       ??bdb_AddRespondentNode_7
   2979              {
   2980                //No memory
   2981                return NULL;
   \                     ??bdb_AddRespondentNode_6:
   \   000096   7A00         MOV       R2,#0x0
   \   000098   7B00         MOV       R3,#0x0
   \   00009A   800A         SJMP      ??CrossCallReturnLabel_22
   2982              }
   2983          
   2984              (*pCurr)->pNext = NULL;
   \                     ??bdb_AddRespondentNode_7:
   \   00009C   12....       LCALL     ?Subroutine33 & 0xFFFF
   2985            }
   2986          
   2987            return *pCurr;
   \                     ??CrossCallReturnLabel_31:
   \   00009F   8E82         MOV       DPL,R6
   \   0000A1   8F83         MOV       DPH,R7
   \   0000A3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A6   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   2988          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
   2989          
   2990          /*********************************************************************
   2991           * @fn      bdb_zclRespondentListClean
   2992           *
   2993           * @brief   This function free reserved memory for respondent list
   2994           *
   2995           * @param   pHead - begin of the respondent list
   2996           *
   2997           * @return  status
   2998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2999          void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_zclRespondentListClean:
   3000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine12 & 0xFFFF
   3001            bdbFindingBindingRespondent_t **pCurr;
   3002            bdbFindingBindingRespondent_t **pNext;
   3003          
   3004            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_74:
   \   000008   6035         JZ        ??bdb_zclRespondentListClean_0
   3005            {
   3006              return;
   3007            }
   3008          
   3009            pCurr = pHead;
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   801C         SJMP      ??bdb_zclRespondentListClean_1
   3010          
   3011            while( *pCurr != NULL )
   3012            {
   3013              pNext = &((*pCurr)->pNext);
   \                     ??bdb_zclRespondentListClean_2:
   \   000010   EA           MOV       A,R2
   \   000011   240F         ADD       A,#0xf
   \   000013   F5..         MOV       ?V2,A
   \   000015   E4           CLR       A
   \   000016   3B           ADDC      A,R3
   \   000017   F5..         MOV       ?V3,A
   3014              osal_mem_free( *pCurr );
   \   000019                ; Setup parameters for call to function osal_mem_free
   \   000019   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3015              *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
   \   00001C   85..82       MOV       DPL,?V0
   \   00001F   85..83       MOV       DPH,?V1
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
   3016              pCurr = pNext;
   \   000026   85....       MOV       ?V0,?V2
   \   000029   85....       MOV       ?V1,?V3
   3017            }
   \                     ??bdb_zclRespondentListClean_1:
   \   00002C   85..82       MOV       DPL,?V0
   \   00002F   85..83       MOV       DPH,?V1
   \   000032   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000035   70D9         JNZ       ??bdb_zclRespondentListClean_2
   3018            *pHead = NULL;
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   3019          }
   \                     ??bdb_zclRespondentListClean_0:
   \   00003F   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3020          
   3021           /*********************************************************************
   3022           * PRIVATE FUNCTIONS
   3023           *********************************************************************/
   3024          
   3025          /*********************************************************************
   3026           * @fn      bdb_ProcessOSALMsg
   3027           *
   3028           * @brief   Process the incoming task message.
   3029           *
   3030           * @param   msgPtr - message to process
   3031           *
   3032           * @return  none
   3033           */
   3034          void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
   3035          {
   3036          
   3037            switch(msgPtr->hdr.event)
   3038            {
   3039          #if (ZG_BUILD_JOINING_TYPE)
   3040              case BDB_COMMISSIONING_STATE_JOINING:
   3041                if(ZG_DEVICE_JOINING_TYPE)
   3042                {
   3043                  switch(msgPtr->buf[0])
   3044                  {
   3045                    case BDB_JOIN_EVENT_NWK_DISCOVERY:
   3046                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   3047                      {
   3048                        bdb_filterNwkDisc();
   3049                        bdb_tryNwkAssoc();
   3050                      }
   3051                      else
   3052                      {
   3053                        bdb_nwkDiscoveryAttempt(FALSE);
   3054                      }
   3055                    break;
   3056          
   3057                    case BDB_JOIN_EVENT_ASSOCIATION:
   3058                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   3059                      {
   3060                        bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
   3061                        //Nwk key timeout get right timing
   3062                        osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
   3063                      }
   3064                      else
   3065                      {
   3066                        if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   3067                             (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   3068                        {
   3069                          uint16 addr = INVALID_NODE_ADDR;
   3070                          // Invalidate nwk addr so end device does not use in its data reqs.
   3071                          _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   3072                          ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   3073                        }
   3074          
   3075                        //Clear the neighbor Table and network discovery tables.
   3076                        nwkNeighborInitTable();
   3077                        NLME_NwkDiscTerm();
   3078                        _NIB.nwkState = NWK_INIT;
   3079          
   3080                        bdb_tryNwkAssoc();
   3081                      }
   3082                    break;
   3083                  }
   3084                }
   3085              break;
   3086          
   3087              case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3088                if(ZG_DEVICE_JOINING_TYPE)
   3089                {
   3090                  if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
   3091                  {
   3092                    bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
   3093                    if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
   3094                    {
   3095                      //TCLK process fail due to many attempts fails
   3096                      bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   3097                      return;
   3098                    }
   3099                  }
   3100                  switch(bdbCommissioningProcedureState.bdbTCExchangeState)
   3101                  {
   3102                    case BDB_REQ_TC_STACK_VERSION:
   3103                      bdb_requestTCStackVersion();
   3104                    break;
   3105                    case BDB_REQ_TC_LINK_KEY:
   3106                      bdb_requestTCLinkKey();
   3107                    break;
   3108                    case BDB_REQ_VERIFY_TC_LINK_KEY:
   3109                      bdb_requestVerifyTCLinkKey();
   3110                    break;
   3111                  }
   3112                }
   3113             break;
   3114          #endif
   3115             }
   3116          }
   3117          
   3118          
   3119          /*********************************************************************
   3120           * @fn      bdb_processTimeout
   3121           *
   3122           * @brief   Handles timeout of the bdb process
   3123           *
   3124           * @param   msgPtr - message to process
   3125           *
   3126           * @return  none
   3127           */
   3128          void bdb_processTimeout(void)
   3129          {
   3130          #if (ZG_BUILD_JOINING_TYPE)
   3131            if(ZG_DEVICE_JOINING_TYPE)
   3132            {
   3133              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   3134              {
   3135                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3136          
   3137                  bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
   3138                break;
   3139                case BDB_COMMISSIONING_STATE_JOINING:
   3140                  if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
   3141                  {
   3142                    //If nwk key fails, then try association again
   3143                    bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   3144                    bdb_nwkAssocAttemt(FALSE);
   3145                  }
   3146                break;
   3147              }
   3148            }
   3149          #endif
   3150          
   3151          }
   3152          
   3153          
   3154          /*********************************************************************
   3155           * @fn      bdb_SendMsg
   3156           *
   3157           * @brief   Send messages to bdb processing with the expected format
   3158           *
   3159           * @param   msgPtr - message to process
   3160           *
   3161           * @return  none
   3162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3163          void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
   \                     bdb_SendMsg:
   3164          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V7,R2
   \   000009   8B..         MOV       ?V8,R3
   \   00000B   8C..         MOV       ?V3,R4
   3165            bdbInMsg_t *msgPtr = NULL;
   3166          
   3167            if ( (len > 0) && (buf != NULL) )
   \   00000D   EC           MOV       A,R4
   \   00000E   6052         JZ        ??bdb_SendMsg_0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000018   6048         JZ        ??bdb_SendMsg_0
   3168            {
   3169              uint8 tmpLength;
   3170              tmpLength = len;
   3171              tmpLength += sizeof(osal_event_hdr_t);
   3172          
   3173              msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7402         MOV       A,#0x2
   \   00001C   2C           ADD       A,R4
   \   00001D   FA           MOV       R2,A
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000023   8A..         MOV       ?V4,R2
   \   000025   8B..         MOV       ?V5,R3
   \   000027   AE..         MOV       R6,?V4
   \   000029   AF..         MOV       R7,?V5
   3174          
   3175              if ( msgPtr )
   \   00002B   EA           MOV       A,R2
   \   00002C   4F           ORL       A,R7
   \   00002D   6033         JZ        ??bdb_SendMsg_0
   3176              {
   3177                osal_memcpy( msgPtr->buf, buf, len );
   \   00002F                ; Setup parameters for call to function osal_memcpy
   \   00002F   85....       MOV       ?V4,?V0
   \   000032   85....       MOV       ?V5,?V1
   \   000035   75..00       MOV       ?V6,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003D   AC..         MOV       R4,?V3
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   EA           MOV       A,R2
   \   000042   2402         ADD       A,#0x2
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3F           ADDC      A,R7
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   3178          
   3179                msgPtr->hdr.event = toCommissioningState;
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   E5..         MOV       A,?V7
   \   000054   F0           MOVX      @DPTR,A
   3180                msgPtr->hdr.status = status;
   \   000055   A3           INC       DPTR
   \   000056   E5..         MOV       A,?V8
   \   000058   F0           MOVX      @DPTR,A
   3181                osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000059                ; Setup parameters for call to function osal_msg_send
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   A9..         MOV       R1,?V2
   \   00005F   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   3182              }
   3183            }
   3184          }
   \                     ??bdb_SendMsg_0:
   \   000062   7F09         MOV       R7,#0x9
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
   3185          
   3186          
   3187          /*********************************************************************
   3188           * @fn      bdb_RegisterCommissioningStatusCB
   3189           *
   3190           * @brief   Register a callback in which the status of the procedures done in
   3191           *          BDB commissioning process will be reported
   3192           *
   3193           * @param   bdbGCB_CommissioningStatus - application callback
   3194           *
   3195           * @return  none
   3196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3197          void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
   \                     bdb_RegisterCommissioningStatusCB:
   3198          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3199            pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
   \   000004   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000007   02....       LJMP      ?Subroutine3 & 0xFFFF
   3200          }
   3201          
   3202          /*********************************************************************
   3203           * @fn      bdb_ClearNetworkParams
   3204           *
   3205           * @brief   Restore nwk parameters to invalid if the device is not on a network
   3206           *
   3207           * @param   void
   3208           *
   3209           * @return  void
   3210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3211          void bdb_ClearNetworkParams(void)
   \                     bdb_ClearNetworkParams:
   3212          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3213          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   3214            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   3215            {
   3216              //Clear the event
   3217              _NIB.nwkPanId = INVALID_NODE_ADDR;
   3218              _NIB.nwkLogicalChannel = 0;
   3219              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   3220              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   3221            }
   3222          #endif
   3223          }
   \   000000   02....       LJMP      ?BRET
   3224          
   3225          /*********************************************************************
   3226           * @fn      bdb_getZCLFrameCounter
   3227           *
   3228           * @brief   Get the next ZCL Frame Counter for packet sequence number
   3229           *
   3230           * @param   none
   3231           *
   3232           * @return  next ZCL frame counter
   3233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3234          uint8 bdb_getZCLFrameCounter(void)
   \                     bdb_getZCLFrameCounter:
   3235          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3236            bdb_ZclTransactionSequenceNumber++;
   \   000004   90....       MOV       DPTR,#bdb_ZclTransactionSequenceNumber
   \   000007   E0           MOVX      A,@DPTR
   \   000008   04           INC       A
   \   000009   F0           MOVX      @DPTR,A
   3237            return bdb_ZclTransactionSequenceNumber;
   \   00000A   02....       LJMP      ??Subroutine47_0 & 0xFFFF
   3238          
   3239          }
   3240          
   3241          
   3242          #if (ZG_BUILD_JOINING_TYPE)
   3243          /*********************************************************************
   3244           * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
   3245           *
   3246           * @brief   Register a callback in which the TC link key exchange procedure will
   3247           *          be performed by application.
   3248           *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
   3249           *
   3250           * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
   3251           *
   3252           * @return  none
   3253           */
   3254          void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
   3255          {
   3256            if(bdbGCB_CBKETCLinkKeyExchange)
   3257            {
   3258              pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
   3259              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
   3260            }
   3261            else
   3262            {
   3263              pfnCBKETCLinkKeyExchange = NULL;
   3264              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   3265            }
   3266          }
   3267          
   3268          /*********************************************************************
   3269           * @fn      bdb_RegisterForFilterNwkDescCB
   3270           *
   3271           * @brief   Register a callback in which the application gets the list of network
   3272           *          descriptors got from active scan.
   3273           *          Use bdb_nwkDescFree to release the network descriptors that are not
   3274           *          of interest and leave those which are to be attempted.
   3275           *
   3276           * @param   bdbGCB_FilterNwkDesc - application callback
   3277           *
   3278           * @return  none
   3279           */
   3280          void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
   3281          {
   3282            if(bdbGCB_FilterNwkDesc)
   3283            {
   3284              pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
   3285            }
   3286          }
   3287          
   3288          
   3289          /*********************************************************************
   3290           * @fn          bdb_CBKETCLinkKeyExchangeAttempt
   3291           *
   3292           * @brief       Tell BDB module the result of the TC link key exchange, to try
   3293           *              the default process or to keep going with the joining process.
   3294           *
   3295           * @param       didSuccess - TRUE if the process was succes, False otherwise
   3296           *
   3297           * @return      unprocessed events
   3298           */
   3299          void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
   3300          {
   3301            if(didSuccess)
   3302            {
   3303              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   3304              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   3305            }
   3306            else
   3307            {
   3308              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   3309              //We are going back one state to try it again
   3310              bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
   3311              bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   3312            }
   3313          
   3314          }
   3315          #endif
   3316          
   3317          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   3318          
   3319          /*********************************************************************
   3320           * @fn      gp_ChangeChannelReq
   3321           *
   3322           * @brief   Callback function to notify the BDB about a GP commissioning
   3323           * request that will change the current channel for at most
   3324           * gpBirectionalCommissioningChangeChannelTimeout ms
   3325           *
   3326           * @param   channel - Channel in which the commissioning will take place
   3327           *
   3328           * @return  TRUE to allow change channel, FALSE to do not allow
   3329           */
   3330          static uint8 gp_ChangeChannelReq(void)
   3331          {
   3332            uint8 allowChangeChannel = TRUE;
   3333          
   3334            //Do not allow changes of channel if any process is in place
   3335            if(bdbAttributes.bdbCommissioningMode)
   3336            {
   3337              allowChangeChannel = FALSE;
   3338            }
   3339          
   3340            //Check application state to decide if allow change channel or not
   3341          
   3342            return allowChangeChannel;
   3343          }
   3344          
   3345          
   3346          /*********************************************************************
   3347           * @fn          gp_CBInit
   3348           *
   3349           * @brief       Register the callbacks for GP endpoint
   3350           *
   3351           * @param       none
   3352           *
   3353           * @return      none
   3354           */
   3355          void gp_CBInit(void)
   3356          {
   3357            GP_DataCnfGCB = GP_DataCnf;
   3358            GP_endpointInitGCB = gp_endpointInit;
   3359            GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
   3360            GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
   3361            GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
   3362            GP_DataIndGCB = GP_DataInd;
   3363            GP_SecReqGCB = GP_SecReq;
   3364            GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
   3365          
   3366            GP_aliasConflictAnnce = &aliasConflictAnnce;
   3367          
   3368            GP_endpointInitGCB();
   3369          }
   3370          
   3371          #endif
   3372          
   3373          /*********************************************************************
   3374          *********************************************************************/
   3375          
   3376          
   3377          /******************************************************************************
   3378           * @fn          bdb_GenerateInstallCodeCRC
   3379           *
   3380           * @brief       Creates a CRC for the install code passed.
   3381           *
   3382           * @param       installCode - install code from which CRC will be generated
   3383           *
   3384           * @return      CRC
   3385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3386          uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
   \                     bdb_GenerateInstallCodeCRC:
   3387          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   3388            uint16 CRC;
   3389          
   3390            bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
   \   000009                ; Setup parameters for call to function bdb_calculateCCITT_CRC
   \   000009   90....       MOV       DPTR,#__Constant_10
   \   00000C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00000F   7404         MOV       A,#0x4
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   12....       LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   3391          
   3392            return CRC;
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002A   02....       LJMP      ??Subroutine45_0 & 0xFFFF
   3393          }
   3394          
   3395          /******************************************************************************
   3396           * @fn          bdb_calculateCCITT_CRC
   3397           *
   3398           * @brief       Creates a CRC for the install code passed.
   3399           *
   3400           * @param       Mb - install code from which CRC will be generated
   3401           * @param       msglen - install code length
   3402           * @param       crc -
   3403           *
   3404           * @return      none
   3405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3406          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
   \                     bdb_calculateCCITT_CRC:
   3407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   3408            uint16 crcinit_direct;
   3409            uint16 crcinit_nondirect;
   3410            bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
   \   000012                ; Setup parameters for call to function bdb_crcInit
   \   000012   A8..         MOV       R0,?XSP + 0
   \   000014   A9..         MOV       R1,?XSP + 1
   \   000016   88..         MOV       ?V2,R0
   \   000018   89..         MOV       ?V3,R1
   \   00001A   78..         MOV       R0,#?V2
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP102_8
   \   000024   AA..         MOV       R2,?V0
   \   000026   AB..         MOV       R3,?V1
   \   000028   12....       LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   3411            *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
   \   000030                ; Setup parameters for call to function bdb_crcBitByBitFast
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000041   7408         MOV       A,#0x8
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FC           MOV       R4,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FD           MOV       R5,A
   \   00004B   EE           MOV       A,R6
   \   00004C   FA           MOV       R2,A
   \   00004D   EF           MOV       A,R7
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
   \   000052   7406         MOV       A,#0x6
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   85..83       MOV       DPH,?V1
   \   00005D   EA           MOV       A,R2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   EB           MOV       A,R3
   \   000061   F0           MOVX      @DPTR,A
   3412          }
   \   000062   02....       LJMP      ?Subroutine2 & 0xFFFF
   3413          
   3414          
   3415          /******************************************************************************
   3416           * @fn          bdb_crcInit
   3417           *
   3418           * @brief       Initialize CRC calculation
   3419           *
   3420           * @param       crc -
   3421           * @param       crcinit_direct -
   3422           * @param       crcinit_nondirect -
   3423           *
   3424           * @return      none
   3425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3426          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
   \                     bdb_crcInit:
   3427          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3428          
   3429            uint16 i;
   3430            uint16 bit;
   3431          
   3432            *crcinit_direct = CRC_INIT;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   74FF         MOV       A,#-0x1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   3433            *crc = CRC_INIT;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   F0           MOVX      @DPTR,A
   3434            for (i=0; i<CRC_ORDER; i++)
   \   000015   7E10         MOV       R6,#0x10
   3435            {
   3436              bit = *crc & 1;
   \                     ??bdb_crcInit_0:
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   3437              if (bit) *crc^= CRC_POLYNOM;
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   5008         JNC       ??bdb_crcInit_1
   \   000021   6421         XRL       A,#0x21
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6410         XRL       A,#0x10
   \   000028   F0           MOVX      @DPTR,A
   3438              *crc >>= 1;
   \                     ??bdb_crcInit_1:
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FC           MOV       R4,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C3           CLR       C
   \   000032   13           RRC       A
   \   000033   FD           MOV       R5,A
   \   000034   EC           MOV       A,R4
   \   000035   13           RRC       A
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   ED           MOV       A,R5
   \   00003D   F0           MOVX      @DPTR,A
   3439              if (bit) *crc|= CRC_HIGHBIT;
   \   00003E   E8           MOV       A,R0
   \   00003F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000041   5009         JNC       ??bdb_crcInit_2
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   4480         ORL       A,#0x80
   \   00004B   F0           MOVX      @DPTR,A
   3440            }
   \                     ??bdb_crcInit_2:
   \   00004C   1E           DEC       R6
   \   00004D   EE           MOV       A,R6
   \   00004E   70C7         JNZ       ??bdb_crcInit_0
   3441            *crcinit_nondirect = *crc;
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FA           MOV       R2,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F583         MOV       DPH,A
   \   000062   8A82         MOV       DPL,R2
   \   000064   E8           MOV       A,R0
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E9           MOV       A,R1
   \   000068   F0           MOVX      @DPTR,A
   3442          
   3443          }
   \   000069   02....       LJMP      ?Subroutine0 & 0xFFFF
   3444          
   3445          
   3446          /******************************************************************************
   3447           * @fn          bdb_crcReflect
   3448           *
   3449           * @brief
   3450           *
   3451           * @param       crc -
   3452           * @param       bitnum -
   3453           *
   3454           * @return      none
   3455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3456          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
   \                     bdb_crcReflect:
   3457          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3458          
   3459            // reflects the lower 'bitnum' bits of 'crc'
   3460          
   3461            uint16 i, j=1, crcout=0;
   \   000005   7E01         MOV       R6,#0x1
   \   000007   7F00         MOV       R7,#0x0
   \   000009   8F..         MOV       ?V0,R7
   \   00000B   8F..         MOV       ?V1,R7
   3462          
   3463            for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
   \   00000D   8E..         MOV       ?V2,R6
   \   00000F   8F..         MOV       ?V3,R7
   \   000011   EC           MOV       A,R4
   \   000012   14           DEC       A
   \   000013   78..         MOV       R0,#?V2
   \   000015   12....       LCALL     ?S_SHL
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
   \   00001C   8022         SJMP      ??bdb_crcReflect_0
   3464              if (crc & i) crcout|=j;
   \                     ??bdb_crcReflect_1:
   \   00001E   EA           MOV       A,R2
   \   00001F   58           ANL       A,R0
   \   000020   FC           MOV       R4,A
   \   000021   EB           MOV       A,R3
   \   000022   59           ANL       A,R1
   \   000023   FD           MOV       R5,A
   \   000024   EC           MOV       A,R4
   \   000025   4D           ORL       A,R5
   \   000026   600A         JZ        ??bdb_crcReflect_2
   \   000028   EE           MOV       A,R6
   \   000029   45..         ORL       A,?V0
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   EF           MOV       A,R7
   \   00002E   45..         ORL       A,?V1
   \   000030   F5..         MOV       ?V1,A
   3465              j<<= 1;
   \                     ??bdb_crcReflect_2:
   \   000032   EE           MOV       A,R6
   \   000033   25E0         ADD       A,0xE0 /* A   */
   \   000035   FE           MOV       R6,A
   \   000036   EF           MOV       A,R7
   \   000037   33           RLC       A
   \   000038   FF           MOV       R7,A
   3466            }
   \   000039   E9           MOV       A,R1
   \   00003A   C3           CLR       C
   \   00003B   13           RRC       A
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   13           RRC       A
   \   00003F   F8           MOV       R0,A
   \                     ??bdb_crcReflect_0:
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   70DA         JNZ       ??bdb_crcReflect_1
   3467            return (crcout);
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3468          }
   3469          
   3470          
   3471          /******************************************************************************
   3472           * @fn          bdb_crcBitByBitFast
   3473           *
   3474           * @brief
   3475           *
   3476           * @param       p -
   3477           * @param       len -
   3478           * @param       crcinit_direct -
   3479           * @param       crcinit_nondirect -
   3480           *
   3481           * @return      crc
   3482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3483          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect)
   \                     bdb_crcBitByBitFast:
   3484          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   3485            // fast bit by bit algorithm without augmented zero bytes.
   3486            // does not use lookup table, suited for polynom orders between 1...32.
   3487          
   3488            uint16 i, j, c, bit;
   3489            uint16 crc = crcinit_direct;
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3490          
   3491            for (i=0; i<len; i++) {
   \   00000D   75..00       MOV       ?V0,#0x0
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   7414         MOV       A,#0x14
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   78..         MOV       R0,#?V8
   \   00001A   12....       LCALL     ?L_MOV_X
   \   00001D   8046         SJMP      ??bdb_crcBitByBitFast_0
   3492          
   3493              c = (uint16)*p++;
   \                     ??bdb_crcBitByBitFast_1:
   \   00001F   85..82       MOV       DPL,?V2
   \   000022   85..83       MOV       DPH,?V3
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FA           MOV       R2,A
   \   000027   7B00         MOV       R3,#0x0
   \   000029   A3           INC       DPTR
   \   00002A   8582..       MOV       ?V2,DPL
   \   00002D   8583..       MOV       ?V3,DPH
   3494              c = bdb_crcReflect(c, 8);
   \   000030                ; Setup parameters for call to function bdb_crcReflect
   \   000030   7C08         MOV       R4,#0x8
   \   000032   7D00         MOV       R5,#0x0
   \   000034   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   3495          
   3496              for (j=0x80; j; j>>=1) {
   \   000037   7880         MOV       R0,#-0x80
   3497          
   3498                bit = crc & CRC_HIGHBIT;
   \                     ??bdb_crcBitByBitFast_2:
   \   000039   EF           MOV       A,R7
   \   00003A   5480         ANL       A,#0x80
   \   00003C   FD           MOV       R5,A
   3499                crc<<= 1;
   \   00003D   EE           MOV       A,R6
   \   00003E   25E0         ADD       A,0xE0 /* A   */
   \   000040   FE           MOV       R6,A
   \   000041   EF           MOV       A,R7
   \   000042   33           RLC       A
   \   000043   FF           MOV       R7,A
   3500                if (c & j) bit^= CRC_HIGHBIT;
   \   000044   EA           MOV       A,R2
   \   000045   58           ANL       A,R0
   \   000046   6004         JZ        ??bdb_crcBitByBitFast_3
   \   000048   7480         MOV       A,#-0x80
   \   00004A   6D           XRL       A,R5
   \   00004B   FD           MOV       R5,A
   3501                if (bit) crc^= CRC_POLYNOM;
   \                     ??bdb_crcBitByBitFast_3:
   \   00004C   ED           MOV       A,R5
   \   00004D   6008         JZ        ??bdb_crcBitByBitFast_4
   \   00004F   7421         MOV       A,#0x21
   \   000051   6E           XRL       A,R6
   \   000052   FE           MOV       R6,A
   \   000053   7410         MOV       A,#0x10
   \   000055   6F           XRL       A,R7
   \   000056   FF           MOV       R7,A
   3502              }
   \                     ??bdb_crcBitByBitFast_4:
   \   000057   C3           CLR       C
   \   000058   E8           MOV       A,R0
   \   000059   13           RRC       A
   \   00005A   F8           MOV       R0,A
   \   00005B   70DC         JNZ       ??bdb_crcBitByBitFast_2
   3503            }
   \   00005D   05..         INC       ?V0
   \   00005F   E5..         MOV       A,?V0
   \   000061   7002         JNZ       ??bdb_crcBitByBitFast_0
   \   000063   05..         INC       ?V1
   \                     ??bdb_crcBitByBitFast_0:
   \   000065   85....       MOV       ?V4,?V0
   \   000068   85....       MOV       ?V5,?V1
   \   00006B   E4           CLR       A
   \   00006C   F5..         MOV       ?V6,A
   \   00006E   F5..         MOV       ?V7,A
   \   000070   78..         MOV       R0,#?V8
   \   000072   79..         MOV       R1,#?V4
   \   000074   12....       LCALL     ?UL_GT
   \   000077   40A6         JC        ??bdb_crcBitByBitFast_1
   3504          
   3505            crc=bdb_crcReflect(crc, CRC_ORDER);
   3506            crc^= CRC_XOR;
   3507          
   3508            return(crc);
   \   000079                ; Setup parameters for call to function bdb_crcReflect
   \   000079   7C10         MOV       R4,#0x10
   \   00007B   7D00         MOV       R5,#0x0
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   000084   EA           MOV       A,R2
   \   000085   F4           CPL       A
   \   000086   FA           MOV       R2,A
   \   000087   EB           MOV       A,R3
   \   000088   F4           CPL       A
   \   000089   FB           MOV       R3,A
   \   00008A   7F0C         MOV       R7,#0xc
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3509          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbAttributes>`:
   \   000000   00F0FF07     DD 134213632
   \   000004   00080000     DD 2048
   \   000008   FFFF         DW 65535
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   07           DB 7
   \   00000D   04           DB 4
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0F           DB 15
   \   000011   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for vDoPrimaryScan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBdbInstallCodeCRC>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3a98:
   \   000000   983A0000     DD 15000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   bdb_AddRespondentNode
        0     10   -> bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      0      0   bdb_ClearNetworkParams
      0     20   bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      2     36   bdb_GenerateInstallCodeCRC
        2      6   -> bdb_calculateCCITT_CRC
      0      9   bdb_Init
        0      9   -> ZDO_RegisterForZDOMsg
      0      0   bdb_NetworkRestoredResumeState
      1     36   bdb_NotifyCommissioningModeStart
        0     15   -> bdb_SendMsg
      0     49   bdb_ProcessNodeDescRsp
        0     45   -> APSME_IsDistributedSecurity
        0     45   -> ZDO_ParseNodeDescRsp
        0     45   -> bdb_reportCommissioningState
        0     45   -> bdb_setNodeJoinLinkKeyType
        0     45   -> bdb_tcLinkKeyExchangeAttempt
        0     49   -> osal_nv_write
        0     45   -> osal_stop_timerEx
      2      0   bdb_RegisterCommissioningStatusCB
      1     10   bdb_RegisterSimpleDescriptor
        0     10   -> afRegister
        0     10   -> osal_mem_alloc
      2      0   bdb_RegisterTCLinkKeyExchangeProcessCB
      1     79   bdb_SendMsg
        0     20   -> osal_memcpy
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
      0     36   bdb_StartCommissioning
        0     32   -> APSME_IsDistributedSecurity
        0     32   -> ZDOInitDeviceEx
        0     32   -> bdb_reportCommissioningState
        0     32   -> bdb_setNodeIsOnANetwork
        0     32   -> osal_get_timeoutEx
        0     32   -> osal_isbufset
        0     32   -> osal_memset
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
        0     32   -> osal_set_event
        0     32   -> zgWriteStartupOptions
      1     32   bdb_TCAddJoiningDevice
        0     30   -> bdb_SendMsg
        0     28   -> osal_mem_alloc
        0     31   -> osal_memcmp
        0     31   -> osal_memcpy
        0     32   -> osal_start_reload_timer
      0     75   bdb_TCJoiningDeviceFree
        0     15   -> osal_mem_free
        0     18   -> osal_memcmp
      0     85   bdb_TCProcessJoiningList
        0     59   -> APSME_SearchTCLinkKeyEntry
        0     57   -> AddrMgrEntryLookupExt
        0     59   -> ZDSecMgrAPSRemove
        0     57   -> ZDSecMgrAddrClear
        0     59   -> bdb_SendMsg
        0     57   -> bdb_TCJoiningDeviceFree
        0     60   -> osal_memcpy
        0     57   -> osal_memset
        0     61   -> osal_nv_write
        0     57   -> osal_stop_timerEx
      0     31   bdb_TCjoiningDeviceComplete
        0     30   -> bdb_SendMsg
        0     28   -> bdb_TCJoiningDeviceFree
        0     31   -> osal_memcmp
        0     31   -> osal_memcpy
        0     28   -> osal_stop_timerEx
      0     24   bdb_ZclIdentifyCmdInd
        0     24   -> osal_start_timerEx
        0     20   -> osal_stop_timerEx
        0     22   -> zclFindAttrRec
      0     34   bdb_addInstallCode
        0     30   -> APSME_AddTCLinkKey
        0     30   -> bdb_GenerateInstallCodeCRC
        0     30   -> osal_build_uint16
        0     34   -> sspMMOHash
      0     28   bdb_calculateCCITT_CRC
        0     22   -> bdb_crcBitByBitFast
        0     18   -> bdb_crcInit
      0     42   bdb_crcBitByBitFast
        0     20   -> bdb_crcReflect
      0     27   bdb_crcInit
      0     32   bdb_crcReflect
      2      0   bdb_doTrustCenterRequireKeyExchange
      1     28   bdb_event_loop
        0     24   -> bdb_ProcessIEEEAddrRsp
        0     24   -> bdb_ProcessRespondentList
        0     24   -> bdb_ProcessSimpleDesc
        0     24   -> bdb_SendIdentifyQuery
        0     24   -> bdb_TCProcessJoiningList
        0     24   -> bdb_exitFindingBindingWStatus
        0     24   -> bdb_getRespondentRetry
        0     24   -> bdb_reportCommissioningState
        0     24   -> bdb_setEpDescListToActiveEndpoint
        0     24   -> bdb_startResumeCommissioningProcess
        0     24   -> osal_get_timeoutEx
        0     24   -> osal_msg_deallocate
        0     24   -> osal_msg_receive
        0     28   -> osal_start_timerEx
        0     24   -> osal_stop_timerEx
        0     26   -> zclFindAttrRec
      2      0   bdb_getZCLFrameCounter
      2      0   bdb_isDeviceNonFactoryNew
      0      9   bdb_nwkFormationAttempt
        0      9   -> bdb_nwkJoiningFormation
        0      9   -> bdb_reportCommissioningState
      0     33   bdb_nwkJoiningFormation
        0     12   -> ZDOInitDeviceEx
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_setChannel
      0      0   bdb_parentLost
      0     15   bdb_rejoinNwk
        0     11   -> NLME_ReJoinRequest
        0     11   -> NLME_ReJoinRequestUnsecure
        0     11   -> ZDApp_ChangeState
        0     11   -> ZDApp_RestoreNwkKey
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      1     63   bdb_reportCommissioningState
        0     14   -> AT_UARTWriteErrMsg
        0     14   -> NLME_ResetRequest
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_RestoreNwkSecMaterial
        0     14   -> ZMacSetReq
        0     16   -> bdb_SendMsg
        0     14   -> bdb_getRespondentRetry
        0     14   -> bdb_setFN
        0     14   -> bdb_zclRespondentListClean
        0     14   -> nwk_setStateIdle
        0     14   -> osal_get_timeoutEx
        0     18   -> osal_start_timerEx
        0     14   -> osal_stop_timerEx
        0     14   -> zgWriteStartupOptions
      2      0   bdb_resetLocalAction
        2      0   -> ZDApp_ResetTimerStart
        2      0   -> bdb_setFN
      0     28   bdb_setChannel
        0     16   -> osal_nv_write
      0     12   bdb_setChannelAttribute
      2      0   bdb_setCommissioningGroupID
      2     14   bdb_setFN
        2      0   -> bdb_setNodeIsOnANetwork
        2      0   -> zgWriteStartupOptions
      2      0   bdb_setJoinUsesInstallCodeKey
      0     46   bdb_setNodeIsOnANetwork
        0     14   -> osal_nv_write
      2      0   bdb_setTCRequireKeyExchange
      0     49   bdb_startResumeCommissioningProcess
        0     21   -> bdb_NotifyCommissioningModeStart
        0     21   -> bdb_SendIdentifyQuery
        0     23   -> bdb_SendMsg
        0     21   -> bdb_exitFindingBindingWStatus
        0     21   -> bdb_nwkJoiningFormation
        0     21   -> bdb_reportCommissioningState
        0     21   -> bdb_setEpDescListToActiveEndpoint
        0     21   -> osal_memset
        0     25   -> osal_start_timerEx
        0     23   -> zclFindAttrRec
      0      0   bdb_touchlinkSendFNReset
      0     26   bdb_zclRespondentListClean
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Initializer for bdbAttributes>
       1  ?<Initializer for vDoPrimaryScan>
      18  ?<Initializer for zgBdbInstallCodeCRC>
       6  ??Subroutine39_0
      12  ??Subroutine40_0
       6  ??Subroutine41_0
       8  ??Subroutine42_0
      11  ??Subroutine43_0
       1  ??Subroutine44_0
       7  ??Subroutine45_0
      13  ??Subroutine46_0
       4  ??Subroutine47_0
       3  ??Subroutine48_0
       5  ??Subroutine49_0
       6  ??Subroutine50_0
       7  ??Subroutine51_0
       2  ??Subroutine52_0
      11  ??Subroutine53_0
       5  ??Subroutine54_0
       2  ??Subroutine55_0
       6  ??Subroutine56_0
       9  ??Subroutine57_0
      12  ??Subroutine58_0
       6  ??Subroutine59_0
       8  ??Subroutine60_0
       5  ??Subroutine61_0
       5  ?Subroutine0
       3  ?Subroutine1
      10  ?Subroutine10
      10  ?Subroutine11
       8  ?Subroutine12
       2  ?Subroutine13
       6  ?Subroutine14
      15  ?Subroutine15
      19  ?Subroutine16
       2  ?Subroutine17
      20  ?Subroutine18
       4  ?Subroutine19
       2  ?Subroutine2
       4  ?Subroutine20
       4  ?Subroutine21
       3  ?Subroutine22
      12  ?Subroutine23
       8  ?Subroutine24
      14  ?Subroutine25
       6  ?Subroutine26
       9  ?Subroutine27
       8  ?Subroutine28
       2  ?Subroutine29
       4  ?Subroutine3
       4  ?Subroutine30
       6  ?Subroutine31
       8  ?Subroutine32
      14  ?Subroutine33
      15  ?Subroutine34
       3  ?Subroutine35
       5  ?Subroutine36
      10  ?Subroutine37
       6  ?Subroutine38
      10  ?Subroutine4
       5  ?Subroutine5
       1  ?Subroutine6
       8  ?Subroutine7
       1  ?Subroutine8
      11  ?Subroutine9
       4  __Constant_10
       4  __Constant_32
       4  __Constant_3a98
       4  __Constant_3e8
       4  __Constant_c8
      18  bdbAttributes
       4  bdbCommissioningProcedureState
     169  bdb_AddRespondentNode
       3  bdb_ClearNetworkParams
      21  bdb_CreateRespondentList
       2  bdb_CurrEpDescriptorList
       1  bdb_FBStateSuccessLatch
       1  bdb_FB_InitiatorCurrentCyclesNumber
      45  bdb_GenerateInstallCodeCRC
       2  bdb_HeadEpDescriptorList
      48  bdb_Init
       3  bdb_NetworkRestoredResumeState
      34  bdb_NotifyCommissioningModeStart
     165  bdb_ProcessNodeDescRsp
      10  bdb_RegisterCommissioningStatusCB
      58  bdb_RegisterSimpleDescriptor
      19  bdb_RegisterTCLinkKeyExchangeProcessCB
     103  bdb_SendMsg
     424  bdb_StartCommissioning
     336  bdb_TCAddJoiningDevice
     148  bdb_TCJoiningDeviceFree
     406  bdb_TCProcessJoiningList
     157  bdb_TCjoiningDeviceComplete
       1  bdb_TaskID
     129  bdb_ZclIdentifyCmdInd
       1  bdb_ZclTransactionSequenceNumber
     130  bdb_addInstallCode
     101  bdb_calculateCCITT_CRC
     143  bdb_crcBitByBitFast
     108  bdb_crcInit
      75  bdb_crcReflect
       9  bdb_doTrustCenterRequireKeyExchange
     588  bdb_event_loop
      13  bdb_getZCLFrameCounter
       1  bdb_initialization
       7  bdb_isDeviceNonFactoryNew
       2  bdb_joiningDeviceList
      51  bdb_nwkFormationAttempt
     110  bdb_nwkJoiningFormation
       3  bdb_parentLost
     166  bdb_rejoinNwk
     542  bdb_reportCommissioningState
      16  bdb_resetLocalAction
      64  bdb_setChannel
      31  bdb_setChannelAttribute
      10  bdb_setCommissioningGroupID
      18  bdb_setFN
      23  bdb_setJoinUsesInstallCodeKey
      63  bdb_setNodeIsOnANetwork
      11  bdb_setTCRequireKeyExchange
     461  bdb_startResumeCommissioningProcess
       3  bdb_touchlinkSendFNReset
      66  bdb_zclRespondentListClean
       2  pRespondentCurr
       2  pRespondentHead
       2  pRespondentNext
       2  pfnCommissioningStatusCB
       2  pfnTCLinkKeyExchangeProcessCB
       1  touchLinkTargetEnabled
       1  vDoPrimaryScan
      18  zgBdbInstallCodeCRC
     258  -- Other

 
 5 532 bytes in segment BANKED_CODE
   258 bytes in segment BANK_RELAYS
    37 bytes in segment XDATA_I
    37 bytes in segment XDATA_ID
    20 bytes in segment XDATA_ROM_C
    26 bytes in segment XDATA_Z
 
   295 bytes of CODE     memory
     0 bytes of CONST    memory (+ 20 bytes shared)
 5 532 bytes of HUGECODE memory
    63 bytes of XDATA    memory

Errors: none
Warnings: none
