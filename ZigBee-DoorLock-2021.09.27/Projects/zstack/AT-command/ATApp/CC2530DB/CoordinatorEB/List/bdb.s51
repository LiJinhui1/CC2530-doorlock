///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              23/Nov/2021  10:54:58
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWB303.tmp
//        (F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb.c
//        -D ZIGBEEPRO -D INTER_PAN -D DISABLE_GREENPOWER_BASIC_PROXY -D
//        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D
//        HAL_UART_ISR_RX_MAX=100 -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
//        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_SCENES -D ZCL_GROUPS -D ZCL_REPORT_CONFIGURING_DEVICE -D
//        ZCL_REPORT_DESTINATION_DEVICE -lC
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
//        -lA
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=300 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List\bdb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_GT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,0203H
        PUBLIC `??bdb_ClearNetworkParams::?relay`
        FUNCTION `??bdb_ClearNetworkParams::?relay`,0203H
        PUBLIC `??bdb_CreateRespondentList::?relay`
        FUNCTION `??bdb_CreateRespondentList::?relay`,0203H
        PUBLIC `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,0203H
        PUBLIC `??bdb_Init::?relay`
        FUNCTION `??bdb_Init::?relay`,0203H
        PUBLIC `??bdb_NetworkRestoredResumeState::?relay`
        FUNCTION `??bdb_NetworkRestoredResumeState::?relay`,0203H
        PUBLIC `??bdb_NotifyCommissioningModeStart::?relay`
        FUNCTION `??bdb_NotifyCommissioningModeStart::?relay`,0203H
        PUBLIC `??bdb_ProcessNodeDescRsp::?relay`
        FUNCTION `??bdb_ProcessNodeDescRsp::?relay`,0203H
        PUBLIC `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,0203H
        PUBLIC `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,0203H
        PUBLIC `??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`
        FUNCTION `??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`,0203H
        PUBLIC `??bdb_SendMsg::?relay`
        FUNCTION `??bdb_SendMsg::?relay`,0203H
        PUBLIC `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,0203H
        PUBLIC `??bdb_TCAddJoiningDevice::?relay`
        FUNCTION `??bdb_TCAddJoiningDevice::?relay`,0203H
        FUNCTION `??bdb_TCJoiningDeviceFree::?relay`,0203H
        FUNCTION `??bdb_TCProcessJoiningList::?relay`,0203H
        PUBLIC `??bdb_TCjoiningDeviceComplete::?relay`
        FUNCTION `??bdb_TCjoiningDeviceComplete::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,0203H
        PUBLIC `??bdb_addInstallCode::?relay`
        FUNCTION `??bdb_addInstallCode::?relay`,0203H
        PUBLIC `??bdb_calculateCCITT_CRC::?relay`
        FUNCTION `??bdb_calculateCCITT_CRC::?relay`,0203H
        PUBLIC `??bdb_crcBitByBitFast::?relay`
        FUNCTION `??bdb_crcBitByBitFast::?relay`,0203H
        PUBLIC `??bdb_crcInit::?relay`
        FUNCTION `??bdb_crcInit::?relay`,0203H
        PUBLIC `??bdb_crcReflect::?relay`
        FUNCTION `??bdb_crcReflect::?relay`,0203H
        PUBLIC `??bdb_doTrustCenterRequireKeyExchange::?relay`
        FUNCTION `??bdb_doTrustCenterRequireKeyExchange::?relay`,0203H
        PUBLIC `??bdb_event_loop::?relay`
        FUNCTION `??bdb_event_loop::?relay`,0203H
        PUBLIC `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,0203H
        PUBLIC `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,0203H
        PUBLIC `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,0203H
        FUNCTION `??bdb_nwkJoiningFormation::?relay`,0203H
        PUBLIC `??bdb_parentLost::?relay`
        FUNCTION `??bdb_parentLost::?relay`,0203H
        PUBLIC `??bdb_rejoinNwk::?relay`
        FUNCTION `??bdb_rejoinNwk::?relay`,0203H
        PUBLIC `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,0203H
        PUBLIC `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,0203H
        PUBLIC `??bdb_setChannel::?relay`
        FUNCTION `??bdb_setChannel::?relay`,0203H
        PUBLIC `??bdb_setChannelAttribute::?relay`
        FUNCTION `??bdb_setChannelAttribute::?relay`,0203H
        PUBLIC `??bdb_setCommissioningGroupID::?relay`
        FUNCTION `??bdb_setCommissioningGroupID::?relay`,0203H
        PUBLIC `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,0203H
        PUBLIC `??bdb_setJoinUsesInstallCodeKey::?relay`
        FUNCTION `??bdb_setJoinUsesInstallCodeKey::?relay`,0203H
        PUBLIC `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,0203H
        PUBLIC `??bdb_setTCRequireKeyExchange::?relay`
        FUNCTION `??bdb_setTCRequireKeyExchange::?relay`,0203H
        FUNCTION `??bdb_startResumeCommissioningProcess::?relay`,0203H
        PUBLIC `??bdb_touchlinkSendFNReset::?relay`
        FUNCTION `??bdb_touchlinkSendFNReset::?relay`,0203H
        PUBLIC `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,0203H
        PUBWEAK __Constant_10
        PUBWEAK __Constant_32
        PUBWEAK __Constant_3a98
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_c8
        PUBLIC bdbAttributes
        PUBLIC bdbCommissioningProcedureState
        PUBLIC bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_ClearNetworkParams
        FUNCTION bdb_ClearNetworkParams,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_CreateRespondentList
        FUNCTION bdb_CreateRespondentList,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_CurrEpDescriptorList
        PUBLIC bdb_FB_InitiatorCurrentCyclesNumber
        PUBLIC bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 6, STACK
        PUBLIC bdb_HeadEpDescriptorList
        PUBLIC bdb_Init
        FUNCTION bdb_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_NetworkRestoredResumeState
        FUNCTION bdb_NetworkRestoredResumeState,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_NotifyCommissioningModeStart
        FUNCTION bdb_NotifyCommissioningModeStart,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_ProcessNodeDescRsp
        FUNCTION bdb_ProcessNodeDescRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_RegisterTCLinkKeyExchangeProcessCB
        FUNCTION bdb_RegisterTCLinkKeyExchangeProcessCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_SendMsg
        FUNCTION bdb_SendMsg,0a1203H
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC bdb_TCAddJoiningDevice
        FUNCTION bdb_TCAddJoiningDevice,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        FUNCTION bdb_TCJoiningDeviceFree,0a1203H
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION bdb_TCProcessJoiningList,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 61, STACK
        PUBLIC bdb_TCjoiningDeviceComplete
        FUNCTION bdb_TCjoiningDeviceComplete,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC bdb_TaskID
        PUBLIC bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC bdb_ZclTransactionSequenceNumber
        PUBLIC bdb_addInstallCode
        FUNCTION bdb_addInstallCode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC bdb_calculateCCITT_CRC
        FUNCTION bdb_calculateCCITT_CRC,0a1203H
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bdb_crcBitByBitFast
        FUNCTION bdb_crcBitByBitFast,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_crcInit
        FUNCTION bdb_crcInit,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_crcReflect
        FUNCTION bdb_crcReflect,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_doTrustCenterRequireKeyExchange
        FUNCTION bdb_doTrustCenterRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_event_loop
        FUNCTION bdb_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_initialization
        PUBLIC bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkJoiningFormation,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_parentLost
        FUNCTION bdb_parentLost,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_rejoinNwk
        FUNCTION bdb_rejoinNwk,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0a1203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setChannel
        FUNCTION bdb_setChannel,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_setChannelAttribute
        FUNCTION bdb_setChannelAttribute,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_setCommissioningGroupID
        FUNCTION bdb_setCommissioningGroupID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setFN
        FUNCTION bdb_setFN,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setJoinUsesInstallCodeKey
        FUNCTION bdb_setJoinUsesInstallCodeKey,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_setTCRequireKeyExchange
        FUNCTION bdb_setTCRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_startResumeCommissioningProcess,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC bdb_touchlinkSendFNReset
        FUNCTION bdb_touchlinkSendFNReset,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC pRespondentCurr
        PUBLIC pRespondentHead
        PUBLIC pRespondentNext
        PUBLIC touchLinkTargetEnabled
        PUBLIC vDoPrimaryScan
        PUBLIC zgBdbInstallCodeCRC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_AddTCLinkKey  SYMBOL "APSME_AddTCLinkKey"
`??APSME_AddTCLinkKey::?relay` SYMBOL "?relay", APSME_AddTCLinkKey
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_SearchTCLinkKeyEntry SYMBOL "APSME_SearchTCLinkKeyEntry"
`??APSME_SearchTCLinkKeyEntry::?relay` SYMBOL "?relay", APSME_SearchTCLinkKeyEntry
AT_UARTWriteErrMsg  SYMBOL "AT_UARTWriteErrMsg"
`??AT_UARTWriteErrMsg::?relay` SYMBOL "?relay", AT_UARTWriteErrMsg
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
`??NLME_ReJoinRequest::?relay` SYMBOL "?relay", NLME_ReJoinRequest
NLME_ReJoinRequestUnsecure SYMBOL "NLME_ReJoinRequestUnsecure"
`??NLME_ReJoinRequestUnsecure::?relay` SYMBOL "?relay", NLME_ReJoinRequestUnsecure
NLME_ResetRequest   SYMBOL "NLME_ResetRequest"
`??NLME_ResetRequest::?relay` SYMBOL "?relay", NLME_ResetRequest
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_ParseNodeDescRsp SYMBOL "ZDO_ParseNodeDescRsp"
`??ZDO_ParseNodeDescRsp::?relay` SYMBOL "?relay", ZDO_ParseNodeDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
`??ZDSecMgrAPSRemove::?relay` SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_ProcessIEEEAddrRsp SYMBOL "bdb_ProcessIEEEAddrRsp"
`??bdb_ProcessIEEEAddrRsp::?relay` SYMBOL "?relay", bdb_ProcessIEEEAddrRsp
bdb_ProcessRespondentList SYMBOL "bdb_ProcessRespondentList"
`??bdb_ProcessRespondentList::?relay` SYMBOL "?relay", bdb_ProcessRespondentList
bdb_ProcessSimpleDesc SYMBOL "bdb_ProcessSimpleDesc"
`??bdb_ProcessSimpleDesc::?relay` SYMBOL "?relay", bdb_ProcessSimpleDesc
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
bdb_setNodeJoinLinkKeyType SYMBOL "bdb_setNodeJoinLinkKeyType"
`??bdb_setNodeJoinLinkKeyType::?relay` SYMBOL "?relay", bdb_setNodeJoinLinkKeyType
bdb_tcLinkKeyExchangeAttempt SYMBOL "bdb_tcLinkKeyExchangeAttempt"
`??bdb_tcLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_tcLinkKeyExchangeAttempt
nwk_setStateIdle    SYMBOL "nwk_setStateIdle"
`??nwk_setStateIdle::?relay` SYMBOL "?relay", nwk_setStateIdle
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_reload_timer SYMBOL "osal_start_reload_timer"
`??osal_start_reload_timer::?relay` SYMBOL "?relay", osal_start_reload_timer
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sspMMOHash          SYMBOL "sspMMOHash"
`??sspMMOHash::?relay` SYMBOL "?relay", sspMMOHash
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_ClearNetworkParams SYMBOL "bdb_ClearNetworkParams"
`??bdb_ClearNetworkParams::?relay` SYMBOL "?relay", bdb_ClearNetworkParams
bdb_CreateRespondentList SYMBOL "bdb_CreateRespondentList"
`??bdb_CreateRespondentList::?relay` SYMBOL "?relay", bdb_CreateRespondentList
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_Init            SYMBOL "bdb_Init"
`??bdb_Init::?relay` SYMBOL "?relay", bdb_Init
bdb_NetworkRestoredResumeState SYMBOL "bdb_NetworkRestoredResumeState"
`??bdb_NetworkRestoredResumeState::?relay` SYMBOL "?relay", bdb_NetworkRestoredResumeState
bdb_NotifyCommissioningModeStart SYMBOL "bdb_NotifyCommissioningModeStart"
`??bdb_NotifyCommissioningModeStart::?relay` SYMBOL "?relay", bdb_NotifyCommissioningModeStart
bdb_ProcessNodeDescRsp SYMBOL "bdb_ProcessNodeDescRsp"
`??bdb_ProcessNodeDescRsp::?relay` SYMBOL "?relay", bdb_ProcessNodeDescRsp
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_RegisterTCLinkKeyExchangeProcessCB SYMBOL "bdb_RegisterTCLinkKeyExchangeProcessCB"
`??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela` SYMBOL "?relay", bdb_RegisterTCLinkKeyExchangeProcessCB
bdb_SendMsg         SYMBOL "bdb_SendMsg"
`??bdb_SendMsg::?relay` SYMBOL "?relay", bdb_SendMsg
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_TCAddJoiningDevice SYMBOL "bdb_TCAddJoiningDevice"
`??bdb_TCAddJoiningDevice::?relay` SYMBOL "?relay", bdb_TCAddJoiningDevice
bdb_TCjoiningDeviceComplete SYMBOL "bdb_TCjoiningDeviceComplete"
`??bdb_TCjoiningDeviceComplete::?relay` SYMBOL "?relay", bdb_TCjoiningDeviceComplete
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_addInstallCode  SYMBOL "bdb_addInstallCode"
`??bdb_addInstallCode::?relay` SYMBOL "?relay", bdb_addInstallCode
bdb_calculateCCITT_CRC SYMBOL "bdb_calculateCCITT_CRC"
`??bdb_calculateCCITT_CRC::?relay` SYMBOL "?relay", bdb_calculateCCITT_CRC
bdb_crcBitByBitFast SYMBOL "bdb_crcBitByBitFast"
`??bdb_crcBitByBitFast::?relay` SYMBOL "?relay", bdb_crcBitByBitFast
bdb_crcInit         SYMBOL "bdb_crcInit"
`??bdb_crcInit::?relay` SYMBOL "?relay", bdb_crcInit
bdb_crcReflect      SYMBOL "bdb_crcReflect"
`??bdb_crcReflect::?relay` SYMBOL "?relay", bdb_crcReflect
bdb_doTrustCenterRequireKeyExchange SYMBOL "bdb_doTrustCenterRequireKeyExchange"
`??bdb_doTrustCenterRequireKeyExchange::?relay` SYMBOL "?relay", bdb_doTrustCenterRequireKeyExchange
bdb_event_loop      SYMBOL "bdb_event_loop"
`??bdb_event_loop::?relay` SYMBOL "?relay", bdb_event_loop
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_parentLost      SYMBOL "bdb_parentLost"
`??bdb_parentLost::?relay` SYMBOL "?relay", bdb_parentLost
bdb_rejoinNwk       SYMBOL "bdb_rejoinNwk"
`??bdb_rejoinNwk::?relay` SYMBOL "?relay", bdb_rejoinNwk
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
bdb_setChannel      SYMBOL "bdb_setChannel"
`??bdb_setChannel::?relay` SYMBOL "?relay", bdb_setChannel
bdb_setChannelAttribute SYMBOL "bdb_setChannelAttribute"
`??bdb_setChannelAttribute::?relay` SYMBOL "?relay", bdb_setChannelAttribute
bdb_setCommissioningGroupID SYMBOL "bdb_setCommissioningGroupID"
`??bdb_setCommissioningGroupID::?relay` SYMBOL "?relay", bdb_setCommissioningGroupID
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setJoinUsesInstallCodeKey SYMBOL "bdb_setJoinUsesInstallCodeKey"
`??bdb_setJoinUsesInstallCodeKey::?relay` SYMBOL "?relay", bdb_setJoinUsesInstallCodeKey
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
bdb_setTCRequireKeyExchange SYMBOL "bdb_setTCRequireKeyExchange"
`??bdb_setTCRequireKeyExchange::?relay` SYMBOL "?relay", bdb_setTCRequireKeyExchange
bdb_touchlinkSendFNReset SYMBOL "bdb_touchlinkSendFNReset"
`??bdb_touchlinkSendFNReset::?relay` SYMBOL "?relay", bdb_touchlinkSendFNReset
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean

        EXTERN `??APSME_AddTCLinkKey::?relay`
        FUNCTION `??APSME_AddTCLinkKey::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_SearchTCLinkKeyEntry::?relay`
        FUNCTION `??APSME_SearchTCLinkKeyEntry::?relay`,00H
        EXTERN `??AT_UARTWriteErrMsg::?relay`
        FUNCTION `??AT_UARTWriteErrMsg::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??NLME_ReJoinRequest::?relay`
        FUNCTION `??NLME_ReJoinRequest::?relay`,00H
        EXTERN `??NLME_ReJoinRequestUnsecure::?relay`
        FUNCTION `??NLME_ReJoinRequestUnsecure::?relay`,00H
        EXTERN `??NLME_ResetRequest::?relay`
        FUNCTION `??NLME_ResetRequest::?relay`,00H
        EXTERN `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,00H
        EXTERN `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,00H
        EXTERN `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,00H
        EXTERN `??ZDO_ParseNodeDescRsp::?relay`
        FUNCTION `??ZDO_ParseNodeDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDSecMgrAPSRemove::?relay`
        FUNCTION `??ZDSecMgrAPSRemove::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_ProcessIEEEAddrRsp::?relay`
        FUNCTION `??bdb_ProcessIEEEAddrRsp::?relay`,00H
        EXTERN `??bdb_ProcessRespondentList::?relay`
        FUNCTION `??bdb_ProcessRespondentList::?relay`,00H
        EXTERN `??bdb_ProcessSimpleDesc::?relay`
        FUNCTION `??bdb_ProcessSimpleDesc::?relay`,00H
        EXTERN `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,00H
        EXTERN `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,00H
        EXTERN `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,00H
        EXTERN `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,00H
        EXTERN `??bdb_setNodeJoinLinkKeyType::?relay`
        FUNCTION `??bdb_setNodeJoinLinkKeyType::?relay`,00H
        EXTERN `??bdb_tcLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_tcLinkKeyExchangeAttempt::?relay`,00H
        EXTERN `??nwk_setStateIdle::?relay`
        FUNCTION `??nwk_setStateIdle::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_reload_timer::?relay`
        FUNCTION `??osal_start_reload_timer::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sspMMOHash::?relay`
        FUNCTION `??sspMMOHash::?relay`,00H
        EXTERN `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsTrustCenterAddress
        EXTERN APSME_AddTCLinkKey
        FUNCTION APSME_AddTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SearchTCLinkKeyEntry
        FUNCTION APSME_SearchTCLinkKeyEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_UARTWriteErrMsg
        FUNCTION AT_UARTWriteErrMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequestUnsecure
        FUNCTION NLME_ReJoinRequestUnsecure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ResetRequest
        FUNCTION NLME_ResetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TCLinkKeyFrmCntr
        EXTERN ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseNodeDescRsp
        FUNCTION ZDO_ParseNodeDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UseExtendedPANID
        EXTERN ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbIndentifyActiveEndpoint
        EXTERN bdb_ProcessIEEEAddrRsp
        FUNCTION bdb_ProcessIEEEAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessRespondentList
        FUNCTION bdb_ProcessRespondentList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessSimpleDesc
        FUNCTION bdb_ProcessSimpleDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setNodeJoinLinkKeyType
        FUNCTION bdb_setNodeJoinLinkKeyType,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_tcLinkKeyExchangeAttempt
        FUNCTION bdb_tcLinkKeyExchangeAttempt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN notdoFNCmd
        EXTERN nwk_setStateIdle
        FUNCTION nwk_setStateIdle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_reload_timer
        FUNCTION osal_start_reload_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindAddEntry
        EXTERN pfnIdentifyTimeChangeCB
        EXTERN requestNewTrustCenterLinkKey
        EXTERN runtimeChannel
        EXTERN sspMMOHash
        FUNCTION sspMMOHash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFindAttrRec
        FUNCTION zclFindAttrRec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_TaskID
        EXTERN zgAllowInstallCodes
        EXTERN zgDefaultChannelList
        EXTERN zgDeviceLogicalType
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDApp.h"
//   46 #include "OSAL.h"
//   47 #include "ZDConfig.h"
//   48 #include "hal_led.h"
//   49 #include "ZDObject.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AddrMgr.h"
//   52 #include "ZDSecMgr.h"
//   53 #include "nwk.h"
//   54 #include "nwk_util.h"
//   55 #include "ssp_hash.h"
//   56 #ifdef BDB_REPORTING
//   57 #include "bdb_Reporting.h"
//   58 #endif
//   59 
//   60 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   61 #include "gp_interface.h"
//   62 #include "gp_common.h"
//   63 #include "dgp_stub.h"
//   64 #endif
//   65 
//   66 #include "bdb_interface.h"
//   67 
//   68 #if defined ( INTER_PAN )
//   69 #if defined ( BDB_TL_INITIATOR )
//   70 #include "bdb_touchlink_initiator.h"
//   71 #endif
//   72 #if defined ( BDB_TL_TARGET )
//   73 #include "bdb_touchlink_target.h"
//   74 #endif
//   75 #endif
//   76 
//   77 #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
//   78   #include "bdb_touchlink.h"
//   79 #endif
//   80 
//   81 #ifdef MT_APP_CNF_FUNC
//   82 #include "MT_APP_CONFIG.h"
//   83 #endif
//   84 
//   85 #include "AT_uart.h"
//   86 
//   87  /*********************************************************************
//   88  * MACROS
//   89  */
//   90 //This is actually the channels used
//   91 #define vScanChannels  zgDefaultChannelList
//   92 
//   93  /*********************************************************************
//   94  * CONSTANTS
//   95  */
//   96 
//   97 #define NUMBER_OF_CHANNELS     16
//   98 
//   99 #define CHANNEL_11_MASK_POS    11
//  100 #define CHANNEL_26_MASK_POS    26
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
bdb_FB_InitiatorCurrentCyclesNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  103 
//  104 /*********************************************************************
//  105  * TYPEDEFS
//  106  */
//  107 
//  108 
//  109  /*********************************************************************
//  110  * GLOBAL VARIABLES
//  111  */
//  112 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 byte bdb_TaskID;
bdb_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  114 bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
bdbAttributes:
        DATA8
        DS 18
        REQUIRE `?<Initializer for bdbAttributes>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  115 epList_t *bdb_HeadEpDescriptorList = NULL;
bdb_HeadEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 epList_t *bdb_CurrEpDescriptorList = NULL;
bdb_CurrEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  117 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  118 bdbFindingBindingRespondent_t *pRespondentHead = NULL;
pRespondentHead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  119 bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
pRespondentCurr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  120 bdbFindingBindingRespondent_t *pRespondentNext = NULL;
pRespondentNext:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  121 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  122 bdbCommissioningProcedureState_t bdbCommissioningProcedureState;
bdbCommissioningProcedureState:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  123 bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
bdb_initialization:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  124 
//  125 //Nwk formation and nwk steering for nodes not in nwk

        RSEG XDATA_I:XDATA:NOROOT(0)
//  126 bool vDoPrimaryScan = TRUE;
vDoPrimaryScan:
        DATA8
        DS 1
        REQUIRE `?<Initializer for vDoPrimaryScan>`
        REQUIRE __INIT_XDATA_I
//  127 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  128 uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
zgBdbInstallCodeCRC:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
        REQUIRE __INIT_XDATA_I
//  129 
//  130 //Pointer of the nwk being tried in association process
//  131 #if (ZG_BUILD_JOINING_TYPE)
//  132 static networkDesc_t *pBDBListNwk = NULL;
//  133 #endif
//  134 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 uint8 bdb_ZclTransactionSequenceNumber=0x00;
bdb_ZclTransactionSequenceNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 bool touchLinkTargetEnabled = FALSE;
touchLinkTargetEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  138 
//  139  /*********************************************************************
//  140  * EXTERNAL VARIABLES
//  141  */
//  142 
//  143 extern devStartModes_t devStartMode;
//  144 extern bool  requestNewTrustCenterLinkKey;
//  145 extern uint32 requestLinkKeyTimeout;
//  146 extern uint32 ZDApp_SavedPollRate;
//  147 
//  148 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  149 extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
//  150 extern uint8 bdbIndentifyActiveEndpoint;
//  151 #endif
//  152 
//  153 extern bdbFindingBindingRespondent_t *pRespondentNext;
//  154 
//  155 #ifndef DISABLE_GREENPOWER_BASIC_PROXY
//  156 extern ZDO_DeviceAnnce_t aliasConflictAnnce;
//  157 #endif
//  158 
//  159 /*********************************************************************
//  160  * EXTERNAL FUNCTIONS
//  161  */
//  162 
//  163 extern void ZDApp_ResetTimerStart( uint16 delay );
//  164 extern void ZDApp_NodeProfileSync( uint8 stackProfile );
//  165 extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  166 extern uint8 ZDApp_ReadNetworkRestoreState( void );
//  167 
//  168 extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  169 extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
//  170 extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
//  171 
//  172 /*********************************************************************
//  173  * LOCAL VARIABLES
//  174  */
//  175 #if (ZG_BUILD_JOINING_TYPE)
//  176   static uint8 bdb_nwkAssocRetriesCount = 0;
//  177 #endif
//  178 #if (ZG_BUILD_COORDINATOR_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  179   static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
bdb_joiningDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  180 #endif
//  181 
//  182 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  183 //Latch to save the status success of any attempt in the periodic F&B process

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  184 static uint8 bdb_FBStateSuccessLatch = FALSE;
bdb_FBStateSuccessLatch:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  185 #endif
//  186  /*********************************************************************
//  187  * LOCAL FUNCTIONS
//  188  */
//  189 static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
//  190 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
//  191 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
//  192 
//  193 #if (ZG_BUILD_JOINING_TYPE)
//  194 static void bdb_requestTCStackVersion(void);
//  195 static void bdb_requestTCLinkKey(void);
//  196 static void bdb_requestVerifyTCLinkKey(void);
//  197 static void bdb_tryNwkAssoc(void);
//  198 #endif
//  199 
//  200 
//  201 static void bdb_processTimeout(void);
//  202 static void bdb_startResumeCommissioningProcess(void);
//  203 static void bdb_nwkSteeringDeviceOnNwk(void);
//  204 static void bdb_nwkJoiningFormation(bool isJoining);
//  205 
//  206 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  207 static uint8 gp_ChangeChannelReq(void);
//  208 static void gp_CBInit(void);
//  209 #endif
//  210 
//  211 
//  212 #if (ZG_BUILD_COORDINATOR_TYPE)
//  213 static void bdb_TCProcessJoiningList(void);
//  214 static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
//  215 #endif
//  216 #if (ZG_BUILD_COORDINATOR_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  217 static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
pfnTCLinkKeyExchangeProcessCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  218 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  219 static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL;
pfnCommissioningStatusCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  220 #if (ZG_BUILD_JOINING_TYPE)
//  221 static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
//  222 static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;
//  223 #endif
//  224 
//  225 
//  226 
//  227 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
//  228 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
//  229 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
//  230 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
//  231 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
//  232 
//  233 /*********************************************************************
//  234  * PUBLIC FUNCTIONS
//  235  *********************************************************************/
//  236 void bdb_filterNwkDisc(void);
//  237 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
//  238 
//  239 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
//  240 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
//  241 
//  242  /*********************************************************************
//  243  * @fn          bdb_Init
//  244  *
//  245  * @brief       Initialization function for the Base Device Behavior.
//  246  *
//  247  * @param       task_id - bdb_TaskID Task ID
//  248  *
//  249  * @return      none
//  250  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  251 void bdb_Init( byte task_id )
bdb_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_Init
        CODE
//  252 {
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  253   bdb_TaskID = task_id;
        MOV       DPTR,#bdb_TaskID
        MOVX      @DPTR,A
//  254 
//  255 #if (ZG_BUILD_COORDINATOR_TYPE)
//  256   if(ZG_DEVICE_COORDINATOR_TYPE)
//  257   {
//  258     if(bdbAttributes.bdbJoinUsesInstallCodeKey)
        MOV       DPTR,#bdbAttributes + 15
        MOVX      A,@DPTR
        JZ        ??bdb_Init_0
//  259     {
//  260       zgAllowInstallCodes = ZG_IC_MUST_USED;
        MOV       DPTR,#zgAllowInstallCodes
        MOV       A,#0x2
        MOVX      @DPTR,A
//  261     }
//  262   }
//  263 #endif
//  264 
//  265 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
//  266   touchLinkInitiator_InitDevice( );
//  267 #endif
//  268 
//  269 #if (BDB_REPORTING)
//  270   bdb_RepInit();
//  271 #endif
//  272 
//  273   //Register ZDO callbacks
//  274   ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
??bdb_Init_0:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x2
        MOV       R3,#-0x80
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  275 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  276   ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  277   ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x4
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  278 #endif
//  279 
//  280 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  281   gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
//  282   gp_CBInit();
//  283 #endif
//  284 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  285 
//  286 /*********************************************************************
//  287  * @fn      bdb_RegisterSimpleDescriptor
//  288  *
//  289  * @brief   Register the Simple descriptor. This function also registers
//  290  *          the profile's cluster conversion table.
//  291  *
//  292  * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
//  293  *
//  294  * @return  none
//  295  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  296 void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
bdb_RegisterSimpleDescriptor:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
        CODE
//  297 {
        FUNCALL bdb_RegisterSimpleDescriptor, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RegisterSimpleDescriptor, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  298   endPointDesc_t *epDesc;
//  299 
//  300   // Register the application's endpoint descriptor
//  301   //  - This memory is allocated and never freed.
//  302   epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  303   if ( epDesc )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterSimpleDescriptor_0
//  304   {
//  305     // Fill out the endpoint description.
//  306     epDesc->endPoint = simpleDesc->EndPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  307     epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
        INC       DPTR
        INC       DPTR
        MOV       A,#zcl_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(zcl_TaskID >> 8) & 0xff
        LCALL     ?Subroutine10 & 0xFFFF
//  308     epDesc->simpleDesc = simpleDesc;
??CrossCallReturnLabel_0:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine10 & 0xFFFF
//  309     epDesc->latencyReq = noLatencyReqs;
??CrossCallReturnLabel_1:
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  310 
//  311     // Register the endpoint description with the AF
//  312     afRegister( epDesc );
        ; Setup parameters for call to function afRegister
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  313   }
//  314 }
??bdb_RegisterSimpleDescriptor_0:
        LJMP      ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function bdb_RegisterSimpleDescriptor
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  315 
//  316 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  317 /*********************************************************************
//  318  * @fn      bdb_ZclIdentifyCmdInd
//  319  *
//  320  * @brief   Callback from the ZCL General Cluster Library when
//  321  *          it received an Identity Command for this application.
//  322  *
//  323  * @param   identifyTime - the number of seconds to identify yourself
//  324  * @param   endpoint - destination endpoint
//  325  *
//  326  * @return  none
//  327  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  328 void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
bdb_ZclIdentifyCmdInd:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
        CODE
//  329 {
        FUNCALL bdb_ZclIdentifyCmdInd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  330   zclAttrRec_t identifyAttrRec;
//  331 
//  332   if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  333                       ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       R1,?V0
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  334   {
//  335     //If we are processing an actual change
//  336     if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_24:
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_ZclIdentifyCmdInd_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_ZclIdentifyCmdInd_1:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  337     {
//  338       if ( identifyTime > 0 )
        MOV       A,R6
        ORL       A,R7
        MOV       DPL,R0
        MOV       DPH,R1
        JZ        ??bdb_ZclIdentifyCmdInd_2
//  339       {
//  340         *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  341         osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine53_0 & 0xFFFF
//  342       }
??CrossCallReturnLabel_99:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP      ??CrossCallReturnLabel_110
//  343       else if ( identifyTime <= 0 )
//  344       {
//  345         *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
??bdb_ZclIdentifyCmdInd_2:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  346         osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,A
        MOV       R3,#0x20
        LCALL     ??Subroutine57_0 & 0xFFFF
//  347       }
//  348 
//  349       if(pfnIdentifyTimeChangeCB != NULL)
??CrossCallReturnLabel_110:
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_75:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  350       {
//  351         pfnIdentifyTimeChangeCB(endpoint);
        ; Setup parameters for indirect call
        MOV       R1,?V0
        LCALL     ??Subroutine50_0 & 0xFFFF
//  352       }
//  353     }
//  354   }
??CrossCallReturnLabel_67:
        LCALL     ?CALL_IND
//  355 }
??bdb_ZclIdentifyCmdInd_0:
        MOV       A,#0x8
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock6
//  356 #endif
//  357 
//  358 
//  359 #if (ZG_BUILD_JOINING_TYPE)
//  360  /*********************************************************************
//  361  * @fn          bdb_setActiveCentralizedLinkKey
//  362  *
//  363  * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
//  364  *
//  365  * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
//  366  * @param       pKey - Key to be used (if any)
//  367  *
//  368  * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
//  369  *                          ZInvalidParameter when IC buffer is null
//  370  */
//  371 ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
//  372 {
//  373   ZStatus_t Status;
//  374 
//  375   uint8 extAddr[Z_EXTADDR_LEN];
//  376 
//  377   osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
//  378 
//  379   if(pKey == NULL)
//  380   {
//  381     return ZInvalidParameter;
//  382   }
//  383 
//  384   //Clear it, if the request requires it, it will be set
//  385   gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
//  386 
//  387   switch(zstack_CentralizedLinkKeyModes)
//  388   {
//  389     case zstack_UseDefaultGlobalTrustCenterLinkKey:
//  390       //Set the default key to be used in centralized networks as defaultTCLinkKey
//  391       Status = APSME_SetDefaultKey();
//  392     break;
//  393 
//  394     case zstack_UseInstallCodeWithFallback:
//  395       //same as zstack_UseInstallCode but attempt default TRUE
//  396       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
//  397     case zstack_UseInstallCode:
//  398        //Set the install code as default key
//  399       Status = bdb_addInstallCode(pKey,extAddr);
//  400     break;
//  401 
//  402     case zstack_UseAPSKeyWithFallback:
//  403       //same as zstack_UseAPSKey but attempt default TRUE
//  404       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
//  405     case zstack_UseAPSKey:
//  406       //Set the key as global default
//  407       Status = APSME_AddTCLinkKey(pKey,extAddr);
//  408     break;
//  409 
//  410     default:
//  411       Status = ZInvalidParameter;
//  412     break;
//  413   }
//  414 
//  415   return Status;
//  416 }
//  417 #endif
//  418 
//  419 
//  420 
//  421 
//  422 /******************************************************************************
//  423  * @fn          bdb_addInstallCode
//  424  *
//  425  * @brief       Interface to add an install codes and adds a APS TC Link key.
//  426  *
//  427  * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
//  428  *              pExt - [in] Extended address of the node.
//  429  *
//  430  * @return      ZStatus_t
//  431  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  432 ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
bdb_addInstallCode:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_addInstallCode
        CODE
//  433 {
        FUNCALL bdb_addInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, sspMMOHash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  434   uint8  hashOutput[16];
//  435   uint16 CRC;
//  436 
//  437 #if (ZG_BUILD_COORDINATOR_TYPE)
//  438   if(ZG_DEVICE_COORDINATOR_TYPE)
//  439   {
//  440     if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
        MOV       DPTR,#zgAllowInstallCodes
        MOVX      A,@DPTR
        JNZ       ??bdb_addInstallCode_0
//  441     {
//  442       return ZFailure;
        MOV       R1,#0x1
        SJMP      ??bdb_addInstallCode_1
//  443     }
//  444   }
//  445 #endif
//  446 
//  447   if((pInstallCode == NULL) || (pExt == NULL))
??bdb_addInstallCode_0:
        MOV       A,R2
        ORL       A,R7
        JZ        ??bdb_addInstallCode_2
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_addInstallCode_2
//  448   {
//  449     return ZInvalidParameter;
//  450   }
//  451 
//  452   CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
        MOV       ?V2,R2
        MOV       ?V3,R3
//  453 
//  454   //Validate CRC
//  455   if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,R2
        XRL       A,?V2
        JNZ       ??bdb_addInstallCode_3
        MOV       A,R3
        XRL       A,?V3
??bdb_addInstallCode_3:
        JZ        ??bdb_addInstallCode_4
//  456   {
//  457     return ZInvalidParameter;
??bdb_addInstallCode_2:
        MOV       R1,#0x2
        SJMP      ??bdb_addInstallCode_1
//  458   }
//  459 
//  460   sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
??bdb_addInstallCode_4:
        ; Setup parameters for call to function sspMMOHash
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V2,#-0x70
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  461 
//  462   return APSME_AddTCLinkKey(hashOutput,pExt);
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
??bdb_addInstallCode_1:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  463 }
          CFI EndBlock cfiBlock7
//  464 
//  465 
//  466 #if (ZG_BUILD_COORDINATOR_TYPE)
//  467  /*********************************************************************
//  468  * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
//  469  *
//  470  * @brief   Register a callback to receive notifications on the joining devices
//  471  *          and its status on TC link key exchange
//  472  *
//  473  * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback
//  474  *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
//  475  *
//  476  * @return  none
//  477  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  478 void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
bdb_RegisterTCLinkKeyExchangeProcessCB:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_RegisterTCLinkKeyExchangeProcessCB
        CODE
//  479 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  480   if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterTCLinkKeyExchangeProcessCB_0
//  481   {
//  482     pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  483   }
//  484 }
??bdb_RegisterTCLinkKeyExchangeProcessCB_0:
        LJMP      ??Subroutine45_0 & 0xFFFF
          CFI EndBlock cfiBlock8
//  485 
//  486 
//  487 
//  488  /*********************************************************************
//  489  * @fn          bdb_setTCRequireKeyExchange
//  490  *
//  491  * @brief       Set the bdb_setTCRequireKeyExchange attribute
//  492  *
//  493  * @param       isKeyExchangeRequired - True if TC will remove devices that do
//  494  *              not perform key exchange after bdbTrustCenterNodeJoinTimeout,
//  495  *              False to not remove devices.
//  496  *
//  497  * @return      none
//  498  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  499 void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
bdb_setTCRequireKeyExchange:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bdb_setTCRequireKeyExchange
        CODE
//  500 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  501   bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 17
        LJMP      ??Subroutine44_0 & 0xFFFF
//  502 }
          CFI EndBlock cfiBlock9
//  503 
//  504 
//  505 
//  506  /*********************************************************************
//  507  * @fn          bdb_TCAddJoiningDevice
//  508  *
//  509  * @brief       Add a joining device to the list of devices that must request a
//  510  *              key before bdbTrustCenterNodeJoinTimeout.
//  511  *
//  512  * @param       parentAddr - Address of the parent device
//  513  * @param       JoiningExtAddr - IEEE address of the joining device
//  514  *
//  515  * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
//  516  *                          ZInvalidParameter
//  517  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  518 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
bdb_TCAddJoiningDevice:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
        CODE
//  519 {
        FUNCALL bdb_TCAddJoiningDevice, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V6,R2
        MOV       ?V7,R3
//  520   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  521 
//  522   if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??bdb_TCAddJoiningDevice_0
        MOV       A,#-0x1
        XRL       A,R3
??bdb_TCAddJoiningDevice_0:
        JZ        ??bdb_TCAddJoiningDevice_1
        MOV       A,R4
        ORL       A,R5
        JNZ       ??bdb_TCAddJoiningDevice_2
//  523   {
//  524     return ZInvalidParameter;
??bdb_TCAddJoiningDevice_1:
        MOV       R1,#0x2
        LJMP      ??bdb_TCAddJoiningDevice_3 & 0xFFFF
//  525   }
//  526 
//  527   //If the list was empty and element was allocated, then start the timer
//  528   if(bdb_joiningDeviceList == NULL)
??bdb_TCAddJoiningDevice_2:
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,#0x0
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_76:
        JNZ       ??bdb_TCAddJoiningDevice_4
//  529   {
//  530     bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#bdb_joiningDeviceList
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  531     if(bdb_joiningDeviceList == NULL)
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_TCAddJoiningDevice_5 & 0xFFFF
//  532     {
//  533       return ZFailure;
//  534     }
//  535 
//  536     osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
        ; Setup parameters for call to function osal_start_reload_timer
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  537     tempJoiningDescNode = bdb_joiningDeviceList;
        MOV       DPTR,#bdb_joiningDeviceList
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??bdb_TCAddJoiningDevice_6
//  538   }
//  539   //if the list was not empty then add the entry at the end of the list
//  540   else
//  541   {
//  542     tempJoiningDescNode = bdb_joiningDeviceList;
??bdb_TCAddJoiningDevice_4:
        LCALL     ?Subroutine35 & 0xFFFF
//  543 
//  544     //Validate that this is not already in the list... somehow
//  545     if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
??CrossCallReturnLabel_119:
        ; Setup parameters for call to function osal_memcmp
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JNZ       ??bdb_TCAddJoiningDevice_7
//  546     {
//  547       //The device added is already in the list, refresh its time and do nothing else
//  548       tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  549       return ZSuccess;
//  550     }
//  551 
//  552     while(tempJoiningDescNode->nextDev != NULL)
??bdb_TCAddJoiningDevice_8:
        MOV       A,R6
        ADD       A,#0xb
        MOV       R6,A
        JNC       ??bdb_TCAddJoiningDevice_9
        INC       R7
??bdb_TCAddJoiningDevice_9:
        MOV       DPL,A
        MOV       DPH,R7
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_77:
        JZ        ??bdb_TCAddJoiningDevice_10
//  553     {
//  554       tempJoiningDescNode = tempJoiningDescNode->nextDev;
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
//  555 
//  556       //Validate that this is not already in the list... somehow
//  557       if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JZ        ??bdb_TCAddJoiningDevice_8
//  558       {
//  559         //The device added is already in the list, refresh its time and do nothing else
//  560         tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
??bdb_TCAddJoiningDevice_7:
        LCALL     ?Subroutine18 & 0xFFFF
//  561         return ZSuccess;
??CrossCallReturnLabel_8:
        LJMP      ??bdb_TCAddJoiningDevice_11 & 0xFFFF
//  562       }
//  563     }
//  564 
//  565     tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
??bdb_TCAddJoiningDevice_10:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V5,R3
        MOV       R1,?V5
        LCALL     ??Subroutine58_0 & 0xFFFF
//  566     if(tempJoiningDescNode->nextDev == NULL)
??CrossCallReturnLabel_116:
        JNZ       ??bdb_TCAddJoiningDevice_12
//  567     {
//  568       return ZFailure;
??bdb_TCAddJoiningDevice_5:
        MOV       R1,#0x1
        SJMP      ??bdb_TCAddJoiningDevice_3
//  569     }
//  570 
//  571     tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCAddJoiningDevice_12:
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
??bdb_TCAddJoiningDevice_6:
        MOV       R7,A
//  572   }
//  573 
//  574   if(pfnTCLinkKeyExchangeProcessCB)
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_78:
        JZ        ??bdb_TCAddJoiningDevice_13
//  575   {
//  576     bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  577     osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,?V4
        MOV       ?V9,?V5
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  578     bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  579 
//  580     bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        LCALL     ??Subroutine43_0 & 0xFFFF
//  581   }
??CrossCallReturnLabel_61:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  582 
//  583   tempJoiningDescNode->nextDev = NULL;
??bdb_TCAddJoiningDevice_13:
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_28:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  584   tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
        LCALL     ?Subroutine18 & 0xFFFF
//  585   tempJoiningDescNode->parentAddr = parentAddr;
??CrossCallReturnLabel_9:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
//  586   osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  587 
//  588   return ZSuccess;
??bdb_TCAddJoiningDevice_11:
        MOV       R1,#0x0
??bdb_TCAddJoiningDevice_3:
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  589 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 28)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function bdb_TCAddJoiningDevice
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV       DPTR,#bdbAttributes + 16
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  590 
//  591 /****************************************************************************
//  592  * @fn          bdb_TCProcessJoiningList
//  593  *
//  594  * @brief       Process the timer to handle the joining devices if the TC link
//  595  *              key is mandatory for all devices
//  596  *
//  597  * @param       none
//  598  *
//  599  * @return      none
//  600  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  601 void bdb_TCProcessJoiningList(void)
bdb_TCProcessJoiningList:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
        CODE
//  602 {
        FUNCALL bdb_TCProcessJoiningList, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, ZDSecMgrAPSRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, bdb_TCJoiningDeviceFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 42
        MOV       A,#-0x2a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  603   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  604 
//  605   if(bdb_joiningDeviceList)
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_79:
        JNZ       $+5
        LJMP      ??bdb_TCProcessJoiningList_0 & 0xFFFF
//  606   {
//  607     tempJoiningDescNode = bdb_joiningDeviceList;
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ?Subroutine24 & 0xFFFF
//  608 
//  609     while(tempJoiningDescNode)
//  610     {
//  611       if(tempJoiningDescNode->NodeJoinTimeout)
??CrossCallReturnLabel_14:
        MOV       A,?V0
        ADD       A,#0xa
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??bdb_TCProcessJoiningList_1
//  612       {
//  613         tempJoiningDescNode->NodeJoinTimeout--;
        DEC       A
        MOVX      @DPTR,A
//  614       }
//  615 
//  616       if(tempJoiningDescNode->NodeJoinTimeout == 0)
        JZ        $+5
        LJMP      ??bdb_TCProcessJoiningList_2 & 0xFFFF
//  617       {
//  618         //Check if the key exchange is required
//  619         if(bdb_doTrustCenterRequireKeyExchange())
??bdb_TCProcessJoiningList_1:
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R6,A
        CLR       A
        ADDC      A,?V1
        MOV       R7,A
        MOV       ?V4,R6
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       DPTR,#bdbAttributes + 17
        MOVX      A,@DPTR
        JZ        ??bdb_TCProcessJoiningList_3
//  620         {
//  621             AddrMgrEntry_t entry;
//  622 
//  623             entry.user = ADDRMGR_USER_DEFAULT;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  624             osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 60)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  625 
//  626             if(AddrMgrEntryLookupExt(&entry))
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,R1
        JZ        ??bdb_TCProcessJoiningList_3
//  627             {
//  628               ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
        ; Setup parameters for call to function ZDSecMgrAPSRemove
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
//  629             }
//  630         }
??CrossCallReturnLabel_19:
        LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  631 
//  632         //Expired device either is legacy device not using the TCLK entry or got
//  633         //removed from the network because of timeout, eitherway it is not using
//  634         //TCLK entry neither the Security user in the address manager, so free the entry
//  635         //in both tables.
//  636 
//  637         uint16 keyNvIndex;
//  638         uint16 index;
//  639         APSME_TCLKDevEntry_t TCLKDevEntry;
//  640         uint8 found;
//  641 
//  642         //Remove the entry in address manager
//  643         ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
??bdb_TCProcessJoiningList_3:
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
//  644 
//  645         //search for the entry in the TCLK table
//  646         keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
//  647 
//  648         //If found, erase it.
//  649         if(found == TRUE)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_TCProcessJoiningList_4
//  650         {
//  651           osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  652           TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x27
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  653 
//  654           //Increase the shift by one. Validate the maximum shift of the seed which is 15
//  655           index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
        MOV       A,R6
        ADD       A,#-0x11
        MOV       R0,A
        MOV       A,R7
        ADDC      A,#-0x2
        MOV       R1,A
//  656 
//  657           TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
        MOV       A,R0
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#TCLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine8 & 0xFFFF
//  658           TCLinkKeyFrmCntr[index].txFrmCntr = 0;
??CrossCallReturnLabel_55:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine42_0 & 0xFFFF
//  659 
//  660           //Update the entry
//  661           osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 61)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine56_0 & 0xFFFF
//  662         }
??CrossCallReturnLabel_105:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  663 
//  664         if(pfnTCLinkKeyExchangeProcessCB)
??bdb_TCProcessJoiningList_4:
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_80:
        JZ        ??bdb_TCProcessJoiningList_5
//  665         {
//  666           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  667           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 60)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  668           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  669 
//  670           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
        ; Setup parameters for call to function bdb_SendMsg
        DEC       A
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        LCALL     ??Subroutine43_0 & 0xFFFF
//  671         }
??CrossCallReturnLabel_62:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  672 
//  673         //Free the device from the list
//  674         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
??bdb_TCProcessJoiningList_5:
        ; Setup parameters for call to function bdb_TCJoiningDeviceFree
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
//  675       }
//  676       tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCProcessJoiningList_2:
        MOV       A,?V0
        LCALL     ?Subroutine38 & 0xFFFF
//  677     }
//  678   }
??CrossCallReturnLabel_34:
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_14 & 0xFFFF
//  679 
//  680   //we are done with the list
//  681   if(bdb_joiningDeviceList == NULL)
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_81:
        JNZ       ??CrossCallReturnLabel_108
//  682   {
//  683     osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
??bdb_TCProcessJoiningList_0:
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine20 & 0xFFFF
//  684   }
//  685 }
??CrossCallReturnLabel_108:
        MOV       A,#0x2a
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock15
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function bdb_TCProcessJoiningList
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function bdb_TCProcessJoiningList
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV       R2,DPL
        MOV       R3,DPH
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function bdb_SendMsg
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function bdb_TCAddJoiningDevice
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function bdb_TCProcessJoiningList
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function bdb_TCProcessJoiningList
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
//  686 
//  687 
//  688 
//  689 /****************************************************************************
//  690  * @fn          bdb_TCjoiningDeviceComplete
//  691  *
//  692  * @brief       This function frees a joining device from the list that has
//  693  *              finished TC link key exchange process
//  694  *
//  695  * @param       JoiningExtAddr - Extended address of the device
//  696  *
//  697  * @return      none
//  698  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  699 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
bdb_TCjoiningDeviceComplete:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
        CODE
//  700 {
        FUNCALL bdb_TCjoiningDeviceComplete, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, bdb_TCJoiningDeviceFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  701   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  702 
//  703   if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_82:
        JNZ       $+5
        LJMP      ??CrossCallReturnLabel_109 & 0xFFFF
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_109
//  704   {
//  705     tempJoiningDescNode = bdb_joiningDeviceList;
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_120:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V8,?V0
        MOV       ?V9,?V1
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R3,?V6
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JZ        ??bdb_TCjoiningDeviceComplete_0
//  706 
//  707     while(tempJoiningDescNode != NULL)
//  708     {
//  709       if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
//  710       {
//  711         if(pfnTCLinkKeyExchangeProcessCB)
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_83:
        JZ        ??bdb_TCjoiningDeviceComplete_1
//  712         {
//  713           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  714           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  715           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
        LCALL     ?Subroutine7 & 0xFFFF
//  716 
//  717           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  718         }
??CrossCallReturnLabel_44:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        LCALL     ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  719 
//  720         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
??bdb_TCjoiningDeviceComplete_1:
        ; Setup parameters for call to function bdb_TCJoiningDeviceFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
//  721         break;
        SJMP      ??bdb_TCjoiningDeviceComplete_2
//  722       }
//  723       tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCjoiningDeviceComplete_0:
        LCALL     ?Subroutine32 & 0xFFFF
//  724     }
??CrossCallReturnLabel_29:
        LCALL     ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??CrossCallReturnLabel_120
//  725 
//  726     if(bdb_joiningDeviceList == NULL)
??bdb_TCjoiningDeviceComplete_2:
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_84:
        JNZ       ??CrossCallReturnLabel_109
//  727     {
//  728       osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine20 & 0xFFFF
//  729     }
//  730   }
//  731 }
??CrossCallReturnLabel_109:
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV       A,R6
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_37:
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function bdb_TCAddJoiningDevice
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_28
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-4
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_29
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
//  732 
//  733 
//  734 
//  735 /****************************************************************************
//  736  * @fn          bdb_TCJoiningDeviceFree
//  737  *
//  738  * @brief       This function frees a joining device from the list.
//  739  *
//  740  * @param       ZSuccess - If the device was found and erased
//  741  * @param       ZInvalidParameter - Not found
//  742  *
//  743  * @return      none
//  744  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  745 ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
bdb_TCJoiningDeviceFree:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
        CODE
//  746 {
        FUNCALL bdb_TCJoiningDeviceFree, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPTR,#bdb_joiningDeviceList
        JZ        ??bdb_TCJoiningDeviceFree_0
//  747   bdb_joiningDeviceList_t* descCurrent;
//  748   bdb_joiningDeviceList_t* descPrev;
//  749 
//  750   //validate empty list?
//  751 
//  752   //Is it the first?
//  753   if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  754   {
//  755     descCurrent = bdb_joiningDeviceList;
        LCALL     ?Subroutine26 & 0xFFFF
//  756     bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
??CrossCallReturnLabel_20:
        MOV       DPTR,#bdb_joiningDeviceList
        MOVX      A,@DPTR
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_35:
        ADDC      A,R3
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV       DPTR,#bdb_joiningDeviceList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  757     osal_mem_free( descCurrent );
        ; Setup parameters for call to function osal_mem_free
        SJMP      ??bdb_TCJoiningDeviceFree_1
//  758     return ZSuccess;
//  759   }
//  760 
//  761   descPrev = NULL;
//  762   descCurrent = bdb_joiningDeviceList;
//  763 
//  764   while(descCurrent != NULL)
//  765   {
//  766     if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  767     {
//  768       descPrev = descCurrent;
//  769       break;
//  770     }
//  771     descCurrent = descCurrent->nextDev;
??bdb_TCJoiningDeviceFree_0:
        LCALL     ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_122:
        JZ        ??bdb_TCJoiningDeviceFree_2
        MOV       A,R2
        ADD       A,#0xb
        MOV       R6,A
        CLR       A
        ADDC      A,R3
        MOV       R7,A
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPL,R6
        MOV       DPH,R7
        JZ        ??bdb_TCJoiningDeviceFree_0
//  772   }
//  773   if(descPrev == NULL)
//  774   {
//  775     //Not found
//  776     return ZInvalidParameter;
//  777   }
//  778 
//  779   descPrev->nextDev = descPrev->nextDev->nextDev;
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_130:
        XCH       A,R0
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_36:
        ADDC      A,R0
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  780 
//  781   osal_mem_free( JoiningDeviceToRemove );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
??bdb_TCJoiningDeviceFree_1:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  782   return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_TCJoiningDeviceFree_3
??bdb_TCJoiningDeviceFree_2:
        MOV       R1,#0x2
??bdb_TCJoiningDeviceFree_3:
        LJMP      ?Subroutine5 & 0xFFFF
//  783 
//  784 }
          CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_52:
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function bdb_TCAddJoiningDevice
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_6
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_7
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bdb_TCAddJoiningDevice
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function bdb_TCAddJoiningDevice
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60
//  785 
//  786  /*********************************************************************
//  787  * @fn          bdb_setJoinUsesInstallCodeKey
//  788  *
//  789  * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
//  790  *
//  791  * @param       set - If TRUE only devices with IC register in TC can join the
//  792  *              nwk, otherwise devices may or not have a IC register
//  793  *
//  794  * @return      none
//  795  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  796 void bdb_setJoinUsesInstallCodeKey(bool set)
bdb_setJoinUsesInstallCodeKey:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function bdb_setJoinUsesInstallCodeKey
        CODE
//  797 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  798   bdbAttributes.bdbJoinUsesInstallCodeKey = set;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 15
        MOVX      @DPTR,A
//  799   if(set)
        MOV       DPTR,#zgAllowInstallCodes
        JZ        ??bdb_setJoinUsesInstallCodeKey_0
//  800   {
//  801     zgAllowInstallCodes = ZG_IC_MUST_USED;
        MOV       A,#0x2
        SJMP      ??bdb_setJoinUsesInstallCodeKey_1
//  802   }
//  803   else
//  804   {
//  805     zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
??bdb_setJoinUsesInstallCodeKey_0:
        MOV       A,#0x1
//  806   }
??bdb_setJoinUsesInstallCodeKey_1:
        LJMP      ??Subroutine44_0 & 0xFFFF
//  807 }
          CFI EndBlock cfiBlock61
//  808 #endif
//  809 
//  810  /*********************************************************************
//  811  * @fn          bdb_StartCommissioning
//  812  *
//  813  * @brief       Start the commissioning process setting the commissioning mode given.
//  814  *
//  815  * @param       mode - refer to bdbCommissioningMode
//  816  *
//  817  * @return      none
//  818  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  819 void bdb_StartCommissioning(uint8 mode)
bdb_StartCommissioning:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function bdb_StartCommissioning
        CODE
//  820 {
        FUNCALL bdb_StartCommissioning, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,R1
//  821   //Application cannot request to set the device in initialization mode or parent lost
//  822   mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
//  823 
//  824 #ifdef BDB_TL_INITIATOR
//  825   if ( touchlinkFNReset == TRUE )
//  826   {
//  827     return;
//  828   }
//  829 #else
//  830   //Commissioning mode used only for initiator
//  831   mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        ANL       ?V0,#0xce
//  832 #endif
//  833 
//  834 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)
//  835   //Commissioning mode used only for devices with F&B
//  836   mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
//  837 #endif
//  838 
//  839   //If we have running process or the machine state is triggered, then just append and it will be excecuted
//  840   if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_66:
        JZ        ??bdb_StartCommissioning_1
//  841   {
//  842 #if ZG_BUILD_ENDDEVICE_TYPE
//  843     if(ZG_DEVICE_ENDDEVICE_TYPE)
//  844     {
//  845       //Devices with parent lost are not allowed to perform actions
//  846       if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
//  847       {
//  848         return;
//  849       }
//  850     }
//  851 #endif
//  852 
//  853     //If we are on the network and got requested to do nwk steering, we do not need to wait other process,
//  854     // just send permit joining and report the application
//  855     if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
??bdb_StartCommissioning_0:
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_StartCommissioning_2
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_StartCommissioning_2
//  856     {
//  857       bdb_nwkSteeringDeviceOnNwk();
//  858       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  859 
//  860       //Clean nwk steering
//  861       mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING;
        XRL       ?V0,#0x2
//  862     }
//  863 
//  864     //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
//  865     bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_2:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  866     return;
        LJMP      ??bdb_StartCommissioning_3 & 0xFFFF
//  867   }
//  868 
//  869   //Save the commissioning modes valid requested
//  870   bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_1:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R6,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R6
        MOVX      @DPTR,A
//  871 
//  872 
//  873   //Start processing the initialization, once per power cycle.
//  874   if(!bdb_initialization)
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  875   {
//  876     bdb_initialization = TRUE;
        MOV       A,#0x1
        LCALL     ?Subroutine11 & 0xFFFF
//  877 
//  878 #ifdef BDB_REPORTING
//  879     //Delete NV data if startup was with factory reset
//  880     if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
//  881     {
//  882       //Factory reset bdb reporting NV data
//  883       uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
//  884       if ( attrRepNvLen > 0 )
//  885       {
//  886         osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
//  887       }
//  888     }
//  889 
//  890     //Construct the Endpoint-cluster array
//  891     bdb_RepConstructReportingData();
//  892 #endif //BDB_REPORTING
//  893 
//  894     osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  895 
//  896     //Are we on a network
//  897     if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  898     {
//  899 #ifdef ZG_BUILD_JOINING_TYPE
//  900       //Only for joining devices validate the joining procedure
//  901       if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_StartCommissioning_5
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  902       {
//  903         //If we got into a network
//  904         if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
??bdb_StartCommissioning_5:
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#0x0
        MOV       DPTR,#AIB_apsTrustCenterAddress
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  905         {
//  906           //Which is not distributed
//  907           if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  908           {
//  909             uint8 keyAttributes;
//  910             osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  911             //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
//  912             if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JZ        ??bdb_StartCommissioning_6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfd
        JZ        ??bdb_StartCommissioning_6
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??bdb_StartCommissioning_6
//  913             {
//  914               //Force to initialize the entry
//  915               APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
//  916 
//  917               osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  918               APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  919               osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_106:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  920               TCLinkKeyFrmCntr[0].txFrmCntr = 0;
        MOV       DPTR,#TCLinkKeyFrmCntr
        LCALL     ?Subroutine8 & 0xFFFF
//  921               TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
??CrossCallReturnLabel_56:
        INC       DPTR
        LCALL     ??Subroutine42_0 & 0xFFFF
//  922 
//  923 
//  924               //reset the device parameters to FN
//  925               bdbAttributes.bdbNodeIsOnANetwork = FALSE;
??CrossCallReturnLabel_54:
        MOV       DPTR,#bdbAttributes + 14
        LCALL     ?Subroutine11 & 0xFFFF
//  926               osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  927               zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  928 
//  929               //Then start the commissioning process requested
//  930               bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        SJMP      ??bdb_StartCommissioning_7
//  931               osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
//  932               return;
//  933             }
//  934           }
//  935         }
//  936       }
//  937 #endif //ZG_BUILD_JOINING_TYPE
//  938 
//  939       //Set the initialization
//  940       bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
//  941       bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
??bdb_StartCommissioning_6:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  942       bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
        MOV       A,#0x10
        ORL       A,R6
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  943 
//  944       if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        JZ        ??bdb_StartCommissioning_3
//  945       {
//  946 #ifdef BDB_REPORTING
//  947         //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
//  948         bdb_RepUpdateMarkBindings();
//  949 #endif
//  950         return;
//  951       }
//  952       bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  953       //Not in the network
//  954       bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x7
        SJMP      ??bdb_StartCommissioning_8
//  955       return;
//  956     }
//  957   }
//  958 
//  959   //Got requested only to initialize, if so, report that it failed
//  960   if(bdbAttributes.bdbCommissioningMode == 0)
??bdb_StartCommissioning_4:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_7
//  961   {
//  962     //Set the initialization state and report it to fail
//  963     bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  964     bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,A
??bdb_StartCommissioning_8:
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  965     return;
        SJMP      ??bdb_StartCommissioning_3
//  966   }
//  967 
//  968 
//  969   //Start the commissioning process
//  970   bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_StartCommissioning_7:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
//  971   osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,A
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  972 }
??bdb_StartCommissioning_3:
        MOV       A,#0x14
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 59)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function bdb_StartCommissioning
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function bdb_AddRespondentNode
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function bdb_GenerateInstallCodeCRC
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond67) CFA_SP SP+-7
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function bdb_StartCommissioning
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function bdb_StartCommissioning
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        CLR       A
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function bdb_StartCommissioning
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function bdb_TCProcessJoiningList
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function bdb_StartCommissioning
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
//  973 
//  974 
//  975  /*********************************************************************
//  976  * @fn          bdb_NotifyCommissioningModeStart
//  977  *
//  978  * @brief       Notify the user about a commissioning method just started
//  979  *
//  980  * @param       commissioningMode
//  981  *
//  982  * @return      none
//  983  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  984 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
bdb_NotifyCommissioningModeStart:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
        CODE
//  985 {
        FUNCALL bdb_NotifyCommissioningModeStart, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  986   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
//  987 
//  988   bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
//  989   bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
        LCALL     ?Subroutine7 & 0xFFFF
//  990   //Remaining commissioning modes are set just before the call to the application to avoid race conditions
//  991 
//  992   bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
??CrossCallReturnLabel_45:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  993 }
        MOV       A,#0x3
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock80

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function bdb_reportCommissioningState
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function bdb_TCProcessJoiningList
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 59)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function bdb_reportCommissioningState
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93
//  994 
//  995 
//  996 
//  997 #if (ZG_BUILD_JOINING_TYPE)
//  998  /*********************************************************************
//  999  * @fn          bdb_setNodeJoinLinkKeyType
// 1000  *
// 1001  * @brief       Set the key type in use in the network joined. Global centralized key is used by default
// 1002  *
// 1003  * @param       none
// 1004  *
// 1005  * @return      none
// 1006  */
// 1007 void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
// 1008 {
// 1009   bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
// 1010 }
// 1011 #endif
// 1012 
// 1013  /*********************************************************************
// 1014  * @fn          bdb_setFN
// 1015  *
// 1016  * @brief       Set configuration for FN. This FN configuration will be perfome
// 1017  *              upon call to ZDOInitDevice
// 1018  *
// 1019  * @param       none
// 1020  *
// 1021  * @return      none
// 1022  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1023 void bdb_setFN(void)
bdb_setFN:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function bdb_setFN
        CODE
// 1024 {
        FUNCALL bdb_setFN, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1025   bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1026 
// 1027 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
// 1028     touchLink_InitFreeRanges( TRUE );
// 1029     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1030 #endif
// 1031 #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET )
// 1032     touchLink_InitFreeRanges( FALSE );
// 1033     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1034 #endif
// 1035 
// 1036   //Set the device as factory new
// 1037   zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1038 }
        SJMP      ??Subroutine45_0
          CFI EndBlock cfiBlock94

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
          CFI EndBlock cfiBlock95
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      @DPTR,A
          CFI EndBlock cfiBlock96
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock97
// 1039 
// 1040  /*********************************************************************
// 1041  * @fn          bdb_resetLocalAction
// 1042  *
// 1043  * @brief       Application interface to perform BDB Reset to FN.
// 1044  *
// 1045  * @param       none
// 1046  *
// 1047  * @return      none
// 1048  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1049 void bdb_resetLocalAction(void)
bdb_resetLocalAction:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function bdb_resetLocalAction
        CODE
// 1050 {
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1051   //Process reset as nwk leave if the device is on the network and is able to process it
// 1052   if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
// 1053   {
// 1054     NLME_LeaveReq_t leaveReq;
// 1055     // Set every field to 0
// 1056     osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
// 1057 
// 1058     bdb_setFN();
// 1059 
// 1060     NLME_LeaveReq( &leaveReq );
// 1061 
// 1062     return;
// 1063   }
// 1064   else
// 1065   {
// 1066     bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1067 
// 1068     ZDApp_ResetTimerStart( 500 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0xc
        MOV       R3,#0x1
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1069   }
// 1070 }
        SJMP      ??Subroutine45_0
          CFI EndBlock cfiBlock98
// 1071 
// 1072 
// 1073  /*********************************************************************
// 1074  * @fn          bdb_parentLost
// 1075  *
// 1076  * @brief       Notify bdb that connection with parent is lost
// 1077  *
// 1078  * @return      none
// 1079  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1080 void bdb_parentLost(void)
bdb_parentLost:
          CFI Block cfiBlock99 Using cfiCommon0
          CFI Function bdb_parentLost
        CODE
// 1081 {
        ; Saved register size: 0
        ; Auto size: 0
// 1082 #if ZG_BUILD_ENDDEVICE_TYPE
// 1083   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1084   {
// 1085     while(pBDBListNwk)
// 1086     {
// 1087       bdb_nwkDescFree(pBDBListNwk);
// 1088     }
// 1089 
// 1090     nwk_desc_list_free();
// 1091     if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
// 1092     {
// 1093       //If parent lost during TCLK exchange, then report TCLK exchange fail
// 1094       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
// 1095       {
// 1096         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
// 1097         return;
// 1098       }
// 1099       bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
// 1100 
// 1101     }
// 1102     bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
// 1103     NLME_OrphanStateSet();
// 1104     ZDApp_ChangeState( DEV_NWK_ORPHAN );
// 1105 
// 1106     // turn receiver off while in orphan state
// 1107     byte temp = FALSE;
// 1108     ZMacSetReq(ZMacRxOnIdle, &temp);
// 1109 
// 1110     bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
// 1111   }
// 1112 #endif
// 1113 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock99
// 1114 
// 1115 
// 1116 
// 1117 
// 1118 
// 1119  /*********************************************************************
// 1120  * @fn          bdb_NetworkRestoredResumeState
// 1121  *
// 1122  * @brief       Restore the state of child device after parent lost
// 1123  *
// 1124  * @return      none
// 1125  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1126 void bdb_NetworkRestoredResumeState(void)
bdb_NetworkRestoredResumeState:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
        CODE
// 1127 {
        ; Saved register size: 0
        ; Auto size: 0
// 1128 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
// 1129 #if ZG_BUILD_ENDDEVICE_TYPE
// 1130   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1131   {
// 1132     uint8 restoreSimpleDesc = FALSE;
// 1133     //If restored when F&B still enabled, then restore the simple descriptors attempts
// 1134     if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
// 1135     {
// 1136       bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
// 1137 
// 1138       pRespondentTemp = pRespondentHead;
// 1139 
// 1140       while(pRespondentTemp != NULL)
// 1141       {
// 1142         if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
// 1143         {
// 1144           pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
// 1145           restoreSimpleDesc = TRUE;
// 1146         }
// 1147         pRespondentTemp = pRespondentTemp->pNext;
// 1148       }
// 1149     }
// 1150     if(restoreSimpleDesc)
// 1151     {
// 1152       //Restore the simple Descriptor sending after 1 second of restoring the network
// 1153       osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
// 1154     }
// 1155   }
// 1156 #endif
// 1157 #endif
// 1158 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock100
// 1159 
// 1160 #if ZG_BUILD_ENDDEVICE_TYPE
// 1161  /*********************************************************************
// 1162  * @fn          bdb_ZedAttemptRecoverNwk
// 1163  *
// 1164  * @brief       Instruct the ZED to try to rejoin its previews network
// 1165  *
// 1166  * @return      success if the attempt is being excecuted
// 1167  *              False if device do not have nwk parameters to perform this action
// 1168  */
// 1169 uint8 bdb_ZedAttemptRecoverNwk(void)
// 1170 {
// 1171   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1172   {
// 1173     if(bdbAttributes.bdbNodeIsOnANetwork)
// 1174     {
// 1175       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
// 1176       {
// 1177         if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
// 1178         {
// 1179           return ZSuccess;
// 1180         }
// 1181       }
// 1182     }
// 1183   }
// 1184   return ZFailure;
// 1185 }
// 1186 
// 1187 #endif
// 1188 
// 1189  /*********************************************************************
// 1190  * @fn          bdb_reportCommissioningState
// 1191  *
// 1192  * @brief       Process the result of a BDB main state attempt.
// 1193  *
// 1194  * @param       bdbCommissioningState - MainState that is issuing fail
// 1195  * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
// 1196  *
// 1197  * @return      none
// 1198  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1199 void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
bdb_reportCommissioningState:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
        CODE
// 1200 {
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, AT_UARTWriteErrMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_ResetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, nwk_setStateIdle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
// 1201   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 1202   //Process only if we are in that state, or if we are on parent lost and processing F&B
// 1203   if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
// 1204      || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??bdb_reportCommissioningState_0
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1205   {
// 1206     switch(bdbCommissioningState)
??bdb_reportCommissioningState_0:
        MOV       A,R1
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
        ADD       A,#-0x2
        JZ        ??bdb_reportCommissioningState_3
        DEC       A
        JZ        ??bdb_reportCommissioningState_4
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
        LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
// 1207     {
// 1208 #if (ZG_BUILD_JOINING_TYPE)
// 1209       case BDB_COMMISSIONING_STATE_JOINING:
// 1210         if(ZG_DEVICE_JOINING_TYPE)
// 1211         {
// 1212           //Prepare for the next state or commissioning mode to be excecuted
// 1213           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
// 1214 
// 1215           if(didSuccess)
// 1216           {
// 1217             //Next state is TC link key exchange
// 1218             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
// 1219             //Free the list of nwk discovered
// 1220             while(pBDBListNwk)
// 1221             {
// 1222               bdb_nwkDescFree(pBDBListNwk);
// 1223             }
// 1224 
// 1225             //Set the poll rate of the ZED joining device to 1 second to allow TCLK
// 1226             //exchange be perfomed successfully in cases in which application has a
// 1227             //slow pollrate
// 1228             NLME_SetPollRate(TCLK_POLL_RATE);
// 1229 
// 1230             //No notification in this step
// 1231             return;
// 1232           }
// 1233           else
// 1234           {
// 1235           	AT_ERROR(AT_NO_NETWORK);
// 1236             uint8 temp = FALSE;
// 1237             //If fail, then restore poll rate
// 1238             NLME_SetPollRate(POLL_RATE);
// 1239             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1240             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
// 1241             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
// 1242             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
// 1243 
// 1244             //Turn off the radio
// 1245             ZMacSetReq(ZMacRxOnIdle, &temp);
// 1246             //Set the device to FN, to start as new for subsequent attempts
// 1247             bdb_setFN();
// 1248             NLME_ResetRequest();
// 1249             ZDApp_ChangeState( DEV_HOLD );
// 1250 
// 1251             //Free the list of nwk discovered
// 1252             while(pBDBListNwk)
// 1253             {
// 1254               bdb_nwkDescFree(pBDBListNwk);
// 1255             }
// 1256           }
// 1257         }
// 1258       break;
// 1259 
// 1260       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 1261         if(ZG_DEVICE_JOINING_TYPE)
// 1262         {
// 1263           if(didSuccess)
// 1264           {
// 1265             //Clear any setting that would set the device as FN
// 1266             zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
// 1267 
// 1268             //Next state is nwk steering on the nwk (permit joining)
// 1269             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
// 1270             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
// 1271 
// 1272             //Set the poll rate to the application default after TCLK success
// 1273             NLME_SetPollRate(POLL_RATE);
// 1274 
// 1275             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
// 1276             //No notification to the user is needed
// 1277             return;
// 1278           }
// 1279           else
// 1280           {
// 1281             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
// 1282             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
// 1283 
// 1284             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
// 1285 
// 1286             //No process shall be attempted after this fail
// 1287             bdbAttributes.bdbCommissioningMode = 0;
// 1288 
// 1289             //Fill the context for the user notification
// 1290             osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
// 1291           }
// 1292         }
// 1293       break;
// 1294 #endif
// 1295 
// 1296       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 1297         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_3:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1298         if(didSuccess)
        MOV       A,R2
        MOV       DPTR,#bdbAttributes + 10
        JZ        ??bdb_reportCommissioningState_8
// 1299         {
// 1300           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1301 
// 1302 #if (ZG_BUILD_RTR_TYPE)
// 1303           //Update ZDApp state
// 1304           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_9
// 1305           {
// 1306             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
        SJMP      ??bdb_reportCommissioningState_9
// 1307           }
// 1308 #endif
// 1309 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1310           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1311           {
// 1312             ZDApp_ChangeState( DEV_END_DEVICE );
// 1313           }
// 1314 #endif
// 1315         }
// 1316 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1317         else
// 1318         {
// 1319           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1320           {
// 1321             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_8:
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1322           }
// 1323         }
// 1324 #endif
// 1325 
// 1326         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_9:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1327         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1328         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1329       break;
// 1330 
// 1331       case BDB_COMMISSIONING_STATE_FORMATION:
// 1332         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
??bdb_reportCommissioningState_4:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1333 
// 1334         if(didSuccess)
        MOV       A,R2
        MOV       DPTR,#bdbAttributes + 10
        JZ        ??bdb_reportCommissioningState_11
// 1335         {
// 1336           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1337 
// 1338           //Clear any setting that would set the device as FN
// 1339           zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,A
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1340 
// 1341            //Update ZDApp State
// 1342 #if (ZG_BUILD_RTR_TYPE)
// 1343           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_12
// 1344           {
// 1345             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1346           }
// 1347 #endif
// 1348 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1349           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1350           {
// 1351             ZDApp_ChangeState( DEV_ZB_COORD );
??bdb_reportCommissioningState_12:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        SJMP      ??bdb_reportCommissioningState_13
// 1352           }
// 1353 #endif
// 1354         }
// 1355         else
// 1356         {
// 1357           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
??bdb_reportCommissioningState_11:
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1358           //If not on the nwk, then restart the nwk parameters
// 1359 #if (ZG_BUILD_RTR_TYPE)
// 1360           if(ZG_DEVICE_RTR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_14
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_15
// 1361           {
// 1362             if (!notdoFNCmd) {
??bdb_reportCommissioningState_14:
        MOV       DPTR,#notdoFNCmd
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_16
// 1363               AT_ERROR(AT_FORM_NWK_FAIL);
        ; Setup parameters for call to function AT_UARTWriteErrMsg
        MOV       R2,#0x1
        MOV       R1,#0x25
        LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
// 1364             }
// 1365             if(!bdbAttributes.bdbNodeIsOnANetwork)
??bdb_reportCommissioningState_16:
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_15
// 1366             {
// 1367               uint8 temp = FALSE;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1368               //Turn off the radio
// 1369               ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1370               //Set the device to FN, to start as new for subsequent attempts
// 1371               bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1372               NLME_ResetRequest();
        ; Setup parameters for call to function NLME_ResetRequest
        LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
// 1373               ZDApp_ChangeState( DEV_HOLD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x0
??bdb_reportCommissioningState_13:
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1374             }
// 1375           }
// 1376 #endif
// 1377         }
// 1378         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_15:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1379         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1380         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.2
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1381       break;
// 1382 
// 1383 
// 1384       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 1385 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
// 1386         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_reportCommissioningState_5:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1387 
// 1388         //Do not notify the status if we have another identify to send
// 1389         if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_17
// 1390         {
// 1391           //Success at least once during F&B as initiator, mark it
// 1392           bdb_FBStateSuccessLatch = TRUE;
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1393         }
// 1394 
// 1395         //Will we process another indentify?
// 1396         if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
??bdb_reportCommissioningState_17:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_17:
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function osal_get_timeoutEx
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1397         {
// 1398           // Dealocate respondent list and clean all the F&B process
// 1399           pRespondentCurr = NULL;
        MOV       DPTR,#pRespondentCurr
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1400           pRespondentNext = NULL;
        MOV       DPTR,#pRespondentNext
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1401           bdb_zclRespondentListClean( &pRespondentHead );
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
// 1402           osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        LCALL     ??Subroutine57_0 & 0xFFFF
// 1403 
// 1404           //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
// 1405           if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
??CrossCallReturnLabel_111:
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_18
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       ??bdb_reportCommissioningState_18
// 1406           {
// 1407             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1408           }
// 1409 
// 1410           //Set default state
// 1411           bdb_FBStateSuccessLatch = FALSE;
??bdb_reportCommissioningState_18:
        MOV       DPTR,#bdb_FBStateSuccessLatch
        CLR       A
        MOVX      @DPTR,A
// 1412 
// 1413           //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
// 1414           if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_19
// 1415           {
// 1416             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR       A
        MOVX      @DPTR,A
// 1417             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
// 1418           }
??CrossCallReturnLabel_93:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP      ??bdb_reportCommissioningState_20
// 1419           else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
??bdb_reportCommissioningState_19:
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_20
// 1420           {
// 1421             bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR       A
        MOVX      @DPTR,A
// 1422           }
// 1423 
// 1424           bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
??bdb_reportCommissioningState_20:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.3
        SJMP      ??bdb_reportCommissioningState_10
// 1425         }
// 1426         else
// 1427         {
// 1428           return;
// 1429         }
// 1430 
// 1431 #endif
// 1432       break;
// 1433       case BDB_COMMISSIONING_STATE_TL:
// 1434         // Set NWK task to run
// 1435         nwk_setStateIdle( FALSE );
??bdb_reportCommissioningState_2:
        ; Setup parameters for call to function nwk_setStateIdle
        MOV       R1,#0x0
        LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
// 1436         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1437         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_21
// 1438         {
// 1439           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 1440           bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
        INC       DPTR
        MOVX      @DPTR,A
// 1441 
// 1442           //Update ZDApp state
// 1443 #if (ZG_BUILD_RTR_TYPE)
// 1444           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_21
// 1445           {
// 1446             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1447           }
// 1448 #endif
// 1449 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1450           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1451           {
// 1452             ZDApp_ChangeState( DEV_END_DEVICE );
// 1453           }
// 1454 #endif
// 1455         }
// 1456         //The fail status is already set from the calling function to report commissioning process
// 1457 
// 1458         // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
// 1459         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_21:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1460         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1461         //Clear the event
// 1462         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
        SJMP      ??bdb_reportCommissioningState_10
// 1463 
// 1464       break;
// 1465 
// 1466       case BDB_INITIALIZATION:
// 1467         //Notify user about successfull initialization
// 1468         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
??bdb_reportCommissioningState_6:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1469         if(didSuccess)
        MOV       A,R2
        JZ        ??bdb_reportCommissioningState_22
// 1470         {
// 1471           //Update ZDApp state
// 1472 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1473           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1474           {
// 1475             ZDApp_ChangeState( DEV_ZB_COORD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1476           }
// 1477 #endif
// 1478 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1479           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1480           {
// 1481             uint32 pollrate = POLL_RATE;
// 1482             NLME_SetPollRate(pollrate);
// 1483             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
// 1484 
// 1485           }
// 1486 #endif
// 1487           ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1488           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0xd
        MOVX      @DPTR,A
// 1489           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1490           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_c8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
// 1491         }
??CrossCallReturnLabel_95:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP      ??bdb_reportCommissioningState_23
// 1492         else
// 1493         {
// 1494 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1495           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1496           {
// 1497             if(bdb_isDeviceNonFactoryNew())
// 1498             {
// 1499               //Notify the user about losing parent
// 1500               bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
// 1501               bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1502 
// 1503               //Update ZDApp state
// 1504               ZDApp_ChangeState( DEV_NWK_ORPHAN );
// 1505             }
// 1506           }
// 1507 #endif
// 1508           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_22:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1509         }
// 1510         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_reportCommissioningState_23:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.4
??bdb_reportCommissioningState_10:
        MOVX      @DPTR,A
// 1511 
// 1512       break;
// 1513 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1514       case BDB_PARENT_LOST:
// 1515         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
// 1516         if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1517         {
// 1518           if(didSuccess)
// 1519           {
// 1520             uint32 pollrate = POLL_RATE;
// 1521             bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;
// 1522             bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
// 1523             NLME_SetPollRate(pollrate);
// 1524             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1525             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
// 1526             //Update ZDApp state
// 1527             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
// 1528 
// 1529             bdb_NetworkRestoredResumeState();
// 1530           }
// 1531           else
// 1532           {
// 1533             bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1534             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1535 
// 1536             NLME_SetPollRate(0);
// 1537 
// 1538           }
// 1539         }
// 1540       break;
// 1541 #endif
// 1542     }
// 1543 #ifdef MT_APP_CNF_FUNC
// 1544     //Notify the user about the status, the main state which has failed
// 1545     bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
// 1546 
// 1547     bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1548 #else
// 1549     if(pfnCommissioningStatusCB)
??bdb_reportCommissioningState_7:
        MOV       DPTR,#pfnCommissioningStatusCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_85:
        JZ        ??bdb_reportCommissioningState_1
// 1550     {
// 1551       //Notify the user about the status, the main state which has failed
// 1552       bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine40_0 & 0xFFFF
// 1553 
// 1554       bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1555     }
// 1556 #endif
// 1557   }
??CrossCallReturnLabel_46:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1558 }
??bdb_reportCommissioningState_1:
        MOV       A,#0x4
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function bdb_event_loop
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOV       R2,#0x0
        MOV       R3,#0x40
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function bdb_reportCommissioningState
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function bdb_event_loop
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker108 Using cfiCommon1
          CFI (cfiPicker108) NoFunction
          CFI (cfiPicker108) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiPicker108
// 1559 
// 1560 
// 1561  /*********************************************************************
// 1562  * @fn          bdb_nwkFormationAttempt
// 1563  *
// 1564  * @brief       Process a nwk formation attempt.
// 1565  *
// 1566  * @param       didSuccess - TRUE if the nwk formation was success, FALSE
// 1567  *                         otherwise and try secondary channel
// 1568  *
// 1569  * @return      none
// 1570  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1571 void bdb_nwkFormationAttempt(bool didSuccess)
bdb_nwkFormationAttempt:
          CFI Block cfiBlock109 Using cfiCommon0
          CFI Function bdb_nwkFormationAttempt
        CODE
// 1572 {
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 1573   if(didSuccess)
        JZ        ??bdb_nwkFormationAttempt_0
// 1574   {
// 1575     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        SJMP      ??bdb_nwkFormationAttempt_1
// 1576   }
// 1577   else
// 1578   {
// 1579     //Can we try the secondary channel set?
// 1580     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkFormationAttempt_0:
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkFormationAttempt_2
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkFormationAttempt_2
// 1581     {
// 1582       vDoPrimaryScan = FALSE;
        MOV       DPTR,#vDoPrimaryScan
        CLR       A
        MOVX      @DPTR,A
// 1583       bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,A
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
        SJMP      ??bdb_nwkFormationAttempt_3
// 1584     }
// 1585     else
// 1586     {
// 1587       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkFormationAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
??bdb_nwkFormationAttempt_1:
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1588     }
// 1589   }
// 1590 }
??bdb_nwkFormationAttempt_3:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock109
// 1591 
// 1592 
// 1593 
// 1594 /*********************************************************************
// 1595  * @fn          bdb_isDeviceNonFactoryNew
// 1596  *
// 1597  * @brief       Returns the state of bdbNodeIsOnANetwork attribute
// 1598  *
// 1599  * @param       none
// 1600  *
// 1601  * @return      bdbNodeIsOnANetwork
// 1602  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1603 bool bdb_isDeviceNonFactoryNew(void)
bdb_isDeviceNonFactoryNew:
          CFI Block cfiBlock110 Using cfiCommon0
          CFI Function bdb_isDeviceNonFactoryNew
        CODE
// 1604 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1605   return bdbAttributes.bdbNodeIsOnANetwork;
        MOV       DPTR,#bdbAttributes + 14
          CFI EndBlock cfiBlock110
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1606 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock111 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      A,@DPTR
          CFI EndBlock cfiBlock111
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiBlock112 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       R1,A
        LJMP      ??Subroutine45_0 & 0xFFFF
          CFI EndBlock cfiBlock112
// 1607 
// 1608 
// 1609 /*********************************************************************
// 1610  * @fn          bdb_doTrustCenterRequireKeyExchange
// 1611  *
// 1612  * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
// 1613  *
// 1614  * @param       none
// 1615  *
// 1616  * @return      bdbTrustCenterRequireKeyExchange
// 1617  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1618 bool bdb_doTrustCenterRequireKeyExchange(void)
bdb_doTrustCenterRequireKeyExchange:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI Function bdb_doTrustCenterRequireKeyExchange
        CODE
// 1619 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1620 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1621   return bdbAttributes.bdbTrustCenterRequireKeyExchange;
        MOV       DPTR,#bdbAttributes + 17
        SJMP      ?Subroutine6
// 1622 #else
// 1623   return 0;
// 1624 #endif
// 1625 }
          CFI EndBlock cfiBlock113
// 1626 
// 1627 /*********************************************************************
// 1628  * @fn      bdb_rejoinNwk
// 1629  *
// 1630  * @brief   Attempt to rejoin/resume a nwk from nv parameters
// 1631  *
// 1632  * @param   none
// 1633  *
// 1634  * @return  ZStatus_t
// 1635  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1636 ZStatus_t bdb_rejoinNwk(void)
bdb_rejoinNwk:
          CFI Block cfiBlock114 Using cfiCommon0
          CFI Function bdb_rejoinNwk
        CODE
// 1637 {
        FUNCALL bdb_rejoinNwk, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequestUnsecure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1638   ZStatus_t rejoinStatus = ZSuccess;
        MOV       R6,#0x0
// 1639 
// 1640   //Update the seq number
// 1641   _NIB.SequenceNum ++;
        MOV       DPTR,#_NIB
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 1642 
// 1643   osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#_NIB & 0xff
        MOV       ?V1,#(_NIB >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#0x1
        MOV       ?V1,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x21
        LCALL     ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1644 
// 1645   // Transition state machine to correct rejoin state based on nwk key
// 1646   if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x0
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_rejoinNwk_0
// 1647   {
// 1648     ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        SJMP      ??bdb_rejoinNwk_1
// 1649   }
// 1650   else
// 1651   {
// 1652     ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
??bdb_rejoinNwk_0:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xe
??bdb_rejoinNwk_1:
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1653   }
// 1654 
// 1655   // Before trying to do rejoin, check if the device has a valid short address
// 1656   // If not, generate a random short address for itself
// 1657   if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_rejoinNwk_2
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_rejoinNwk_2:
        JNZ       ??bdb_rejoinNwk_3
// 1658   {
// 1659     rejoinStatus = ZFailure;
        MOV       R6,#0x1
// 1660   }
// 1661 
// 1662   // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1663   if ( _NIB.nwkPanId == 0xFFFF )
??bdb_rejoinNwk_3:
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_rejoinNwk_4
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_rejoinNwk_4:
        JNZ       ??bdb_rejoinNwk_5
// 1664   {
// 1665     rejoinStatus = ZFailure;
        MOV       R6,#0x1
        SJMP      ??bdb_rejoinNwk_6
// 1666   }
// 1667 
// 1668   if(rejoinStatus == ZSuccess)
??bdb_rejoinNwk_5:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_rejoinNwk_6
// 1669   {
// 1670     uint8 tmp = true;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1671     ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1672 
// 1673     // Perform Secure or Unsecure Rejoin depending on available configuration
// 1674     if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        MOV       DPTR,#_NIB + 22
        JNZ       ??bdb_rejoinNwk_7
// 1675     {
// 1676       rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
        SJMP      ??bdb_rejoinNwk_8
// 1677     }
// 1678     else
// 1679     {
// 1680       rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
??bdb_rejoinNwk_7:
        ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
??bdb_rejoinNwk_8:
        MOV       A,R1
        MOV       R6,A
// 1681     }
// 1682   }
// 1683 
// 1684   return rejoinStatus;
??bdb_rejoinNwk_6:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x1
        LJMP      ?Subroutine1 & 0xFFFF
// 1685 }
          CFI EndBlock cfiBlock114
// 1686 
// 1687 #if (ZG_BUILD_JOINING_TYPE)
// 1688  /*********************************************************************
// 1689  * @fn          bdb_nwkDiscoveryAttempt
// 1690  *
// 1691  * @brief       Process a nwk discovery attempt
// 1692  *
// 1693  * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if
// 1694  *                           no suitable nwks were found, try secondary channel
// 1695  *
// 1696  * @return      none
// 1697  */
// 1698 void bdb_nwkDiscoveryAttempt(bool didSuccess)
// 1699 {
// 1700   uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
// 1701 
// 1702   if(didSuccess)
// 1703   {
// 1704     bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
// 1705   }
// 1706   else
// 1707   {
// 1708     //Can we try the secondary channel set?
// 1709     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
// 1710     {
// 1711       vDoPrimaryScan = FALSE;
// 1712       bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
// 1713 
// 1714       ZDApp_NetworkInit( 50 );
// 1715     }
// 1716     else
// 1717     {
// 1718       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
// 1719     }
// 1720   }
// 1721 }
// 1722 
// 1723  /*********************************************************************
// 1724  * @fn          bdb_filterNwkDisc
// 1725  *
// 1726  * @brief       Filter the nwks found and attempt to join the suitable nwks
// 1727  *              Here the application can include nwk filters
// 1728  *
// 1729  * @param       none
// 1730  *
// 1731  * @return      none
// 1732  */
// 1733 void bdb_filterNwkDisc(void)
// 1734 {
// 1735   networkDesc_t* pNwkDesc;
// 1736   uint8 i = 0;
// 1737   uint8 ResultCount = 0;
// 1738   uint8 stackProfile = 0;
// 1739   uint8 stackProfilePro = 0;
// 1740 
// 1741   pBDBListNwk  = nwk_getNwkDescList();
// 1742   nwk_desc_list_release();
// 1743 
// 1744   pNwkDesc = pBDBListNwk;
// 1745   while (pNwkDesc)
// 1746   {
// 1747     ResultCount++;
// 1748     pNwkDesc = pNwkDesc->nextDesc;
// 1749   }
// 1750 
// 1751   if(pBDBListNwk)
// 1752   {
// 1753     if(pfnFilterNwkDesc)
// 1754     {
// 1755       pfnFilterNwkDesc(pBDBListNwk, ResultCount);
// 1756     }
// 1757 
// 1758     for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
// 1759     {
// 1760       pNwkDesc = pBDBListNwk;
// 1761 
// 1762       if(pNwkDesc)
// 1763       {
// 1764         for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
// 1765         {
// 1766           if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 1767           {
// 1768             // If the extended Pan ID is commissioned to a non zero value
// 1769             // Only join the Pan that has match EPID
// 1770             if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 1771             {
// 1772               //Remove from the list
// 1773               bdb_nwkDescFree(pNwkDesc);
// 1774               ResultCount--;
// 1775               continue;
// 1776             }
// 1777           }
// 1778           else if ( zgConfigPANID != 0xFFFF )
// 1779           {
// 1780             // PAN Id is preconfigured. check if it matches
// 1781             if ( pNwkDesc->panId != zgConfigPANID )
// 1782             {
// 1783               //Remove from the list
// 1784               bdb_nwkDescFree(pNwkDesc);
// 1785               ResultCount--;
// 1786               continue;
// 1787             }
// 1788           }
// 1789 
// 1790           if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
// 1791           {
// 1792             // check that network is allowing joining
// 1793             if ( ZSTACK_ROUTER_BUILD )
// 1794             {
// 1795               if ( stackProfilePro == FALSE )
// 1796               {
// 1797                 if ( !pNwkDesc->routerCapacity )
// 1798                 {
// 1799                   //Remove from the list
// 1800                   bdb_nwkDescFree(pNwkDesc);
// 1801                   ResultCount--;
// 1802                   continue;
// 1803                 }
// 1804               }
// 1805               else
// 1806               {
// 1807                 if ( !pNwkDesc->deviceCapacity )
// 1808                 {
// 1809                   //Remove from the list
// 1810                   bdb_nwkDescFree(pNwkDesc);
// 1811                   ResultCount--;
// 1812                   continue;
// 1813                 }
// 1814               }
// 1815             }
// 1816             else if ( ZSTACK_END_DEVICE_BUILD )
// 1817             {
// 1818               if ( !pNwkDesc->deviceCapacity )
// 1819               {
// 1820                 //Remove from the list
// 1821                 bdb_nwkDescFree(pNwkDesc);
// 1822                 ResultCount--;
// 1823                 continue;
// 1824               }
// 1825             }
// 1826           }
// 1827 
// 1828           // check version of zigbee protocol
// 1829           if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 1830             continue;
// 1831 
// 1832           // check version of stack profile
// 1833           if ( pNwkDesc->stackProfile != zgStackProfile  )
// 1834           {
// 1835             if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 1836                 || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
// 1837             {
// 1838               stackProfilePro = TRUE;
// 1839             }
// 1840 
// 1841             if ( stackProfile == 0 )
// 1842             {
// 1843               //Remove from the list
// 1844               bdb_nwkDescFree(pNwkDesc);
// 1845               ResultCount--;
// 1846               continue;
// 1847             }
// 1848           }
// 1849         }
// 1850       }
// 1851     }
// 1852   }
// 1853 }
// 1854 
// 1855  /*********************************************************************
// 1856  * @fn          bdb_tryNwkAssoc
// 1857  *
// 1858  * @brief       Try to associate to the first network in the network descriptor list
// 1859  *
// 1860  * @param       none
// 1861  *
// 1862  * @return      none
// 1863  */
// 1864 static void bdb_tryNwkAssoc(void)
// 1865 {
// 1866   if(pBDBListNwk)
// 1867   {
// 1868     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
// 1869 
// 1870     //Try the first in the list after the filtering
// 1871     if(ZSuccess != bdb_joinProcess(pBDBListNwk))
// 1872     {
// 1873       //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
// 1874       uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
// 1875       bdb_nwkDescFree(pBDBListNwk);
// 1876       bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
// 1877     }
// 1878   }
// 1879   else
// 1880   {
// 1881     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
// 1882     uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
// 1883 
// 1884     bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
// 1885   }
// 1886 }
// 1887 
// 1888 
// 1889 
// 1890  /*********************************************************************
// 1891  * @fn          bdb_nwkAssocAttemt
// 1892  *
// 1893  * @brief       Process the result of an attempt to associate to a network
// 1894  *
// 1895  * @param       didSuccess - bool
// 1896  *
// 1897  * @return      none
// 1898  */
// 1899 void bdb_nwkAssocAttemt(bool didSuccess)
// 1900 {
// 1901   bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
// 1902   uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
// 1903   uint8 status;
// 1904 
// 1905   if(didSuccess)
// 1906   {
// 1907     status = BDB_MSG_EVENT_SUCCESS;
// 1908   }
// 1909   else
// 1910   {
// 1911     if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
// 1912     {
// 1913       bdb_nwkAssocRetriesCount++;
// 1914     }
// 1915     else
// 1916     {
// 1917       //Free the first in the list and prepare for futher processing
// 1918       bdb_nwkDescFree(pBDBListNwk);
// 1919       bdb_nwkAssocRetriesCount = 0;
// 1920     }
// 1921     status = BDB_MSG_EVENT_FAIL;
// 1922   }
// 1923   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
// 1924 }
// 1925 
// 1926 
// 1927 /****************************************************************************
// 1928  * @fn          bdb_nwkDescFree
// 1929  *
// 1930  * @brief       This function frees one network discovery data.
// 1931  *
// 1932  * @param       ZSuccess - If the device was found and erased
// 1933  * @param       ZInvalidParameter - Not found
// 1934  *
// 1935  * @return      none
// 1936  */
// 1937 ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
// 1938 {
// 1939   networkDesc_t* current_desc;
// 1940   networkDesc_t* prev_desc;
// 1941 
// 1942   current_desc = pBDBListNwk;
// 1943 
// 1944   while(current_desc != NULL)
// 1945   {
// 1946     if(current_desc == nodeDescToRemove)
// 1947     {
// 1948       if (current_desc == pBDBListNwk)
// 1949       {
// 1950         pBDBListNwk = pBDBListNwk->nextDesc;
// 1951       }
// 1952       else
// 1953       {
// 1954         prev_desc->nextDesc = current_desc->nextDesc;
// 1955       }
// 1956 
// 1957       osal_mem_free( current_desc );
// 1958 
// 1959       return ZSuccess;
// 1960     }
// 1961 
// 1962     prev_desc = current_desc;
// 1963     current_desc = current_desc->nextDesc;
// 1964   }
// 1965 
// 1966   return ZInvalidParameter;
// 1967 }
// 1968 
// 1969 /*********************************************************************
// 1970 * @fn          bdb_joinProcess
// 1971 *
// 1972 * @brief       Start the joining process for the selected nwk
// 1973 *
// 1974 * @return      ZStatus_t
// 1975 */
// 1976 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
// 1977 {
// 1978   ZStatus_t status;
// 1979 
// 1980   ZDApp_ChangeState( DEV_NWK_JOINING );
// 1981   ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
// 1982 
// 1983   status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1984                         pChosenNwk->logicalChannel,
// 1985                         ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1986                         pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
// 1987 
// 1988   if(status == ZSuccess)
// 1989   {
// 1990     // The receiver is on, turn network layer polling off.
// 1991     if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1992     {
// 1993       // for an End Device with NO Child Table Management process or for a Router
// 1994       if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1995            ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
// 1996       {
// 1997         NLME_SetPollRate( 0 );
// 1998         NLME_SetQueuedPollRate( 0 );
// 1999         NLME_SetResponseRate( 0 );
// 2000       }
// 2001     }
// 2002     else
// 2003     {
// 2004       if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 2005       {
// 2006         ZDApp_SavedPollRate = zgPollRate;
// 2007         NLME_SetPollRate( zgRejoinPollRate );
// 2008       }
// 2009     }
// 2010   }
// 2011   return status;
// 2012 }
// 2013 #endif
// 2014 
// 2015 
// 2016  /*********************************************************************
// 2017  * @fn          bdb_setChannelAttribute
// 2018  *
// 2019  * @brief       Set the primary or seconday channel for discovery or formation procedure
// 2020  *
// 2021  * @param       isPrimaryChannel - True if channel to set is primary,
// 2022  *                                 False if the channel to set is secondary
// 2023  *
// 2024  * @param       channel - Channel mask
// 2025  *
// 2026  * @return      none
// 2027  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2028 void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
bdb_setChannelAttribute:
          CFI Block cfiBlock115 Using cfiCommon0
          CFI Function bdb_setChannelAttribute
        CODE
// 2029 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2030   if(isPrimaryChannel)
        MOV       A,R1
        JZ        ??bdb_setChannelAttribute_0
// 2031   {
// 2032     bdbAttributes.bdbPrimaryChannelSet = channel;
        MOV       DPTR,#bdbAttributes + 4
        SJMP      ??bdb_setChannelAttribute_1
// 2033   }
// 2034   else
// 2035   {
// 2036     bdbAttributes.bdbSecondaryChannelSet = channel;
??bdb_setChannelAttribute_0:
        MOV       DPTR,#bdbAttributes
??bdb_setChannelAttribute_1:
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2037   }
// 2038 }
        SJMP      ??Subroutine49_0
          CFI EndBlock cfiBlock115
// 2039 
// 2040  /*********************************************************************
// 2041  * @fn          bdb_setChannel
// 2042  *
// 2043  * @brief       Set channel and save it in Nv for joining/formation operations
// 2044  *
// 2045  * @param       channel - Channel mask
// 2046  *
// 2047  * @return      none
// 2048  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock116 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x4
          CFI EndBlock cfiBlock116
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiBlock117 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock117
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiBlock118 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock118

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2049 void bdb_setChannel(uint32 channel)
bdb_setChannel:
          CFI Block cfiBlock119 Using cfiCommon0
          CFI Function bdb_setChannel
        CODE
// 2050 {
        FUNCALL bdb_setChannel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2051   //Assign the channel and save it into nv
// 2052   vScanChannels = channel;
        MOV       DPTR,#zgDefaultChannelList
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2053   runtimeChannel = channel;
        MOV       DPTR,#runtimeChannel
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2054 
// 2055   osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#zgDefaultChannelList & 0xff
        MOV       ?V1,#(zgDefaultChannelList >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x4
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        SJMP      ?Subroutine2
// 2056 }
          CFI EndBlock cfiBlock119
// 2057 
// 2058 
// 2059  /*********************************************************************
// 2060  * @fn          bdb_nwkJoiningFormation
// 2061  *
// 2062  * @brief       Performs Joining/Formation operation on primary or secondary channel
// 2063  *
// 2064  * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
// 2065  *
// 2066  * @return      none
// 2067  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2068 void bdb_nwkJoiningFormation(bool isJoining)
bdb_nwkJoiningFormation:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI Function bdb_nwkJoiningFormation
        CODE
// 2069 {
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2070 
// 2071   if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkJoiningFormation_0
        MOV       DPTR,#bdbAttributes + 4
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ORL       A,?V1
        ORL       A,?V2
        ORL       A,?V3
        JZ        ??bdb_nwkJoiningFormation_0
// 2072   {
// 2073     bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        SJMP      ??bdb_nwkJoiningFormation_1
// 2074   }
// 2075   else
// 2076   {
// 2077     vDoPrimaryScan = FALSE;
??bdb_nwkJoiningFormation_0:
        MOV       DPTR,#vDoPrimaryScan
        CLR       A
        MOVX      @DPTR,A
// 2078     bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
??bdb_nwkJoiningFormation_1:
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 2079   }
// 2080 
// 2081   if(vScanChannels)
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkJoiningFormation_2
// 2082   {
// 2083     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_nwkJoiningFormation_3
// 2084     {
// 2085       if(isJoining)
        MOV       A,R6
        JNZ       ??bdb_nwkJoiningFormation_3
// 2086       {
// 2087         ZDOInitDeviceEx(100,0);
// 2088       }
// 2089       else
// 2090       {
// 2091         ZDOInitDeviceEx(100,1);
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x1
        SJMP      ??bdb_nwkJoiningFormation_4
// 2092       }
// 2093     }
// 2094     //ZED can only join, and ZC can only create
// 2095     else
// 2096     {
// 2097       ZDOInitDeviceEx(100,0);
??bdb_nwkJoiningFormation_3:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
??bdb_nwkJoiningFormation_4:
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        SJMP      ??bdb_nwkJoiningFormation_5
// 2098     }
// 2099   }
// 2100   else
// 2101   {
// 2102     if(isJoining)
??bdb_nwkJoiningFormation_2:
        MOV       A,R6
        MOV       R2,#0x0
        JZ        ??bdb_nwkJoiningFormation_6
// 2103     {
// 2104       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R1,#0x3
        SJMP      ??bdb_nwkJoiningFormation_7
// 2105     }
// 2106     else
// 2107     {
// 2108       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkJoiningFormation_6:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R1,#0x5
??bdb_nwkJoiningFormation_7:
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2109     }
// 2110   }
// 2111 }
??bdb_nwkJoiningFormation_5:
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock120
// 2112 
// 2113 #if (ZG_BUILD_JOINING_TYPE)
// 2114  /*********************************************************************
// 2115  * @fn          bdb_tcLinkKeyExchangeAttempt
// 2116  *
// 2117  * @brief       Generic send msg for TC link key exchange process attempts
// 2118  *
// 2119  * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
// 2120  * @param       bdbTCExchangeState - Step in which the attemp was done
// 2121  *
// 2122  * @return      none
// 2123  */
// 2124 void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
// 2125 {
// 2126   bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
// 2127   uint8 dummy;
// 2128   bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
// 2129   if(didSuccess)
// 2130   {
// 2131     //Allow try since we are performing a new step.
// 2132     osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
// 2133     bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
// 2134   }
// 2135   else
// 2136   {
// 2137     bdbEventStatus = BDB_MSG_EVENT_FAIL;
// 2138   }
// 2139   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
// 2140 }
// 2141 
// 2142 
// 2143  /*********************************************************************
// 2144  * @fn          bdb_requestVerifyTCLinkKey
// 2145  *
// 2146  * @brief       Attempt to verify the TC link key by sending Verify Key Request
// 2147  *
// 2148  * @param       none
// 2149  *
// 2150  * @return      none
// 2151  */
// 2152 void bdb_requestVerifyTCLinkKey(void)
// 2153 {
// 2154     uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2155     APSME_VerifyKeyReq_t vKey;
// 2156 
// 2157     APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
// 2158 
// 2159     vKey.tcExtAddr = TC_ExtAddr;
// 2160     vKey.keyType = KEY_TYPE_TC_LINK;
// 2161 
// 2162     APSME_VerifyKeyReq( &vKey );
// 2163 
// 2164     osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2165     osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
// 2166 
// 2167 }
// 2168 
// 2169 /*********************************************************************
// 2170  * @fn          bdb_requestTCLinkKey
// 2171  *
// 2172  * @brief       Attempt to request a TC link key
// 2173  *
// 2174  * @param       none
// 2175  *
// 2176  * @return      none
// 2177  */
// 2178 void bdb_requestTCLinkKey(void)
// 2179 {
// 2180   zAddrType_t destAddr;
// 2181   APSME_RequestKeyReq_t req;
// 2182 
// 2183   destAddr.addrMode = Addr16Bit;
// 2184   destAddr.addr.shortAddr = 0x0000;
// 2185 
// 2186   req.dstAddr = destAddr.addr.shortAddr;
// 2187   req.keyType = KEY_TYPE_TC_LINK;
// 2188 
// 2189   APSME_RequestKeyReq(&req);
// 2190 
// 2191   osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2192 
// 2193   osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
// 2194 }
// 2195 
// 2196 
// 2197 /*********************************************************************
// 2198  * @fn          bdb_requestTCStackVersion
// 2199  *
// 2200  * @brief       Attempt to request the TC stack version using ZDP Node desc if
// 2201  *              join a Centralized nwk
// 2202  *
// 2203  * @param       none
// 2204  *
// 2205  * @return      none
// 2206  */
// 2207 void bdb_requestTCStackVersion(void)
// 2208 {
// 2209   if(requestNewTrustCenterLinkKey)
// 2210   {
// 2211     if(!APSME_IsDistributedSecurity())
// 2212     {
// 2213       if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
// 2214       {
// 2215         zAddrType_t destAddr;
// 2216 
// 2217         destAddr.addrMode = Addr16Bit;
// 2218         destAddr.addr.shortAddr = 0x0000;
// 2219 
// 2220         ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);
// 2221 
// 2222         osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2223         osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
// 2224         return;
// 2225       }
// 2226       else
// 2227       {
// 2228         if(pfnCBKETCLinkKeyExchange)
// 2229         {
// 2230           pfnCBKETCLinkKeyExchange();
// 2231         }
// 2232         return;
// 2233       }
// 2234     }
// 2235     else
// 2236     {
// 2237       bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
// 2238     }
// 2239   }
// 2240   else
// 2241   {
// 2242     //Key not required, set default which is global
// 2243     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
// 2244   }
// 2245   //TC link key not required or join distributed nwk
// 2246   bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
// 2247 }
// 2248 #endif
// 2249 
// 2250 
// 2251 /*********************************************************************
// 2252  * @fn          bdb_nwkSteeringDeviceOnNwk
// 2253  *
// 2254  * @brief       Send ZDP mgmt permit joining
// 2255  *
// 2256  * @param       none
// 2257  *
// 2258  * @return      none
// 2259  */
// 2260 void bdb_nwkSteeringDeviceOnNwk(void)
// 2261 {
// 2262   /*
// 2263    * Zigbee HomeAutomation don't need to permit joining
// 2264    */
// 2265   // zAddrType_t dstAddr;
// 2266   // dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
// 2267   // dstAddr.addrMode = AddrBroadcast;
// 2268   // // Trust Center significance is always true
// 2269   // ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
// 2270 }
// 2271 
// 2272 
// 2273 /*********************************************************************
// 2274  * @fn          bdb_startResumeCommissioningProcess
// 2275  *
// 2276  * @brief       Starts or resume the commissioning operations sets in the
// 2277  *              commissioningMode attribute
// 2278  *
// 2279  * @param       none
// 2280  *
// 2281  * @return      none
// 2282  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2283 void bdb_startResumeCommissioningProcess(void)
bdb_startResumeCommissioningProcess:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
        CODE
// 2284 {
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2285 
// 2286 #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
// 2287   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
// 2288   {
// 2289     uint16 nwkAddr;
// 2290 
// 2291     //Does the device supports this commissioning mode?
// 2292     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
// 2293     {
// 2294       //Clear previous state and substates
// 2295       osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
// 2296       bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
// 2297 
// 2298       // Get our short address
// 2299       ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
// 2300       if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
// 2301       {
// 2302         initiatorSelectNwkParams();
// 2303       }
// 2304 
// 2305       touchLinkInitiator_StartDevDisc( );
// 2306 
// 2307       bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
// 2308     }
// 2309     else
// 2310     {
// 2311       //Process the next commissioning mode
// 2312       bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
// 2313     }
// 2314     return;
// 2315   }
// 2316 #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED
// 2317 
// 2318 #if ZG_BUILD_ENDDEVICE_TYPE
// 2319   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 2320   {
// 2321     if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
// 2322     {
// 2323       //No commissioning process can be performed if the ZED has lost its parent
// 2324       return;
// 2325     }
// 2326   }
// 2327 #endif
// 2328 
// 2329   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_0
// 2330   {
// 2331     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2332 
// 2333     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_1
// 2334     {
// 2335 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2336       bdb_ClearNetworkParams();
// 2337 #endif
// 2338       if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_startResumeCommissioningProcess_2
// 2339       {
// 2340         bdb_nwkSteeringDeviceOnNwk();
// 2341         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2342       }
// 2343 #if (ZG_BUILD_JOINING_TYPE)
// 2344       else
// 2345       {
// 2346         if(ZG_DEVICE_JOINING_TYPE)
// 2347         {
// 2348           vDoPrimaryScan = TRUE;
// 2349 
// 2350           //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
// 2351           osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
// 2352           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
// 2353           bdb_nwkJoiningFormation(TRUE);
// 2354           bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
// 2355         }
// 2356       }
// 2357 #endif
// 2358 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2359       if(ZG_DEVICE_COORDINATOR_TYPE)
// 2360       {
// 2361         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
??bdb_startResumeCommissioningProcess_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2362       }
// 2363 #endif
// 2364     }
// 2365     return;
??bdb_startResumeCommissioningProcess_1:
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2366   }
// 2367 
// 2368   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
??bdb_startResumeCommissioningProcess_0:
        MOV       C,0xE0 /* A   */.2
        JNC       ??bdb_startResumeCommissioningProcess_4
// 2369   {
// 2370     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2371 
// 2372     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_5
// 2373     {
// 2374       if(!bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_startResumeCommissioningProcess_5
// 2375       {
// 2376 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2377       bdb_ClearNetworkParams();
// 2378 #endif
// 2379         vDoPrimaryScan = TRUE;
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2380 
// 2381         osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#bdbCommissioningProcedureState & 0xff
        MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2382         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2383 
// 2384         bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,#0x0
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
// 2385         bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV       R1,#0x2
        LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
// 2386         return;
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2387       }
// 2388     }
// 2389     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_startResumeCommissioningProcess_5:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2390     return;
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2391   }
// 2392 
// 2393 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
// 2394   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
??bdb_startResumeCommissioningProcess_4:
        MOV       C,0xE0 /* A   */.3
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2395   {
// 2396     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x6
        MOVX      @DPTR,A
// 2397 
// 2398     //Is the device on a network?
// 2399     if(bdb_isDeviceNonFactoryNew())
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
// 2400     {
// 2401       zclAttrRec_t attrRec;
// 2402 
// 2403       endPointDesc_t *bdb_CurrEpDescriptor = NULL;
// 2404 
// 2405       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 2406 
// 2407       //If not found endpoint with Identify cluster is found, then report fail
// 2408       if(bdb_CurrEpDescriptor == NULL)
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
// 2409       {
// 2410         bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
// 2411         return;
// 2412       }
// 2413 
// 2414       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV       R0,A
        INC       DPTR
        LCALL     ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_68:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_7 & 0xFFFF
// 2415       {
// 2416         if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2417                   ATTRID_IDENTIFY_TIME, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_8
// 2418         {
// 2419           //Set it to at less 180
// 2420           if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_25:
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x4b
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??bdb_startResumeCommissioningProcess_9
// 2421           {
// 2422             *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,#-0x4c
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 2423              osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2424 
// 2425             if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_86:
        JZ        ??bdb_startResumeCommissioningProcess_9
// 2426             {
// 2427               if(bdbIndentifyActiveEndpoint == 0xFF)
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_startResumeCommissioningProcess_10
// 2428               {
// 2429                 pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);
        ; Setup parameters for indirect call
        MOV       R1,#-0x1
        SJMP      ??bdb_startResumeCommissioningProcess_11
// 2430               }
// 2431               else
// 2432               {
// 2433                 pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
??bdb_startResumeCommissioningProcess_10:
        ; Setup parameters for indirect call
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
// 2434               }
// 2435             }
// 2436           }
??bdb_startResumeCommissioningProcess_11:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL     ?CALL_IND
// 2437           //Attribute found and set, report success
// 2438           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_9:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_4:
        JC        ??bdb_startResumeCommissioningProcess_12
// 2439           {
// 2440             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0x9
        SJMP      ??bdb_startResumeCommissioningProcess_13
// 2441           }
// 2442           else
// 2443           {
// 2444             bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2445 
// 2446             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_startResumeCommissioningProcess_12:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2447             bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x9
        LCALL     ??Subroutine40_0 & 0xFFFF
// 2448 
// 2449             bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2450           }
// 2451         }
??CrossCallReturnLabel_47:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        SJMP      ??bdb_startResumeCommissioningProcess_7
// 2452         else
// 2453         {
// 2454           //Attribute not found and no initiator process, report fail
// 2455           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_8:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_5:
        JC        ??bdb_startResumeCommissioningProcess_7
// 2456           {
// 2457             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
??bdb_startResumeCommissioningProcess_13:
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2458           }
// 2459         }
// 2460       }  //F&B Target
// 2461 
// 2462       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
??bdb_startResumeCommissioningProcess_7:
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_11:
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_3
// 2463       {
// 2464         bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2465 
// 2466         //If no function to add binds is available then do not process Initiator
// 2467         if(!pbindAddEntry)
        MOV       DPTR,#pbindAddEntry
        LCALL     ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_123:
        JNZ       ??bdb_startResumeCommissioningProcess_14
// 2468         {
// 2469           //If no target process, then report fail
// 2470           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??bdb_startResumeCommissioningProcess_3
// 2471           {
// 2472             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
// 2473           }
// 2474         }
// 2475         else
// 2476         {
// 2477           //Send identify query with the endpoint requested
// 2478           if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
// 2479           {
// 2480             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
// 2481           }
// 2482 
// 2483           //If periodic F&B is enabled
// 2484           if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2485           {
// 2486             // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
// 2487             bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
// 2488 
// 2489             osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
// 2490           }
// 2491 
// 2492           bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
// 2493           bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
// 2494 
// 2495           bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2496         }
// 2497       } //F&B Initiator
// 2498     }
// 2499     //Not in the network
// 2500     else
// 2501     {
// 2502       bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
??bdb_startResumeCommissioningProcess_6:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2503     }
// 2504 
// 2505     return;
        SJMP      ??bdb_startResumeCommissioningProcess_3
??bdb_startResumeCommissioningProcess_14:
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_15
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
??bdb_startResumeCommissioningProcess_15:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0xc
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R2,#0x40
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xa
        LCALL     ??Subroutine40_0 & 0xFFFF
// 2506   }
??CrossCallReturnLabel_48:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2507 #endif
// 2508 
// 2509 }
??bdb_startResumeCommissioningProcess_3:
        MOV       A,#0xb
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock121

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function bdb_event_loop
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV       DPTR,#pfnIdentifyTimeChangeCB + 1
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function bdb_event_loop
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function bdb_event_loop
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_33:
        RET
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_11
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_4
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_5
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker141 Using cfiCommon1
          CFI (cfiPicker141) NoFunction
          CFI (cfiPicker141) Picker
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiPicker141

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond142 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker144 Using cfiCommon1
          CFI (cfiPicker144) NoFunction
          CFI (cfiPicker144) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        RET
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function bdb_AddRespondentNode
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function bdb_zclRespondentListClean
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,A
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function bdb_TCAddJoiningDevice
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function bdb_TCAddJoiningDevice
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function bdb_TCAddJoiningDevice
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function bdb_TCProcessJoiningList
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function bdb_TCProcessJoiningList
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function bdb_TCProcessJoiningList
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function bdb_reportCommissioningState
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function bdb_event_loop
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function bdb_event_loop
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function bdb_AddRespondentNode
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function bdb_CreateRespondentList
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function bdb_AddRespondentNode
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function bdb_zclRespondentListClean
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_130
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_6
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-4
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_7
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-4
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_24
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-4
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_25
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-4
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function bdb_CreateRespondentList
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_72
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-4
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function bdb_AddRespondentNode
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_73
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function bdb_zclRespondentListClean
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_74
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_75
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-4
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function bdb_TCAddJoiningDevice
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_76
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-4
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function bdb_TCAddJoiningDevice
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_77
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function bdb_TCAddJoiningDevice
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_78
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function bdb_TCProcessJoiningList
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_79
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-4
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function bdb_TCProcessJoiningList
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_80
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-4
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function bdb_TCProcessJoiningList
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_81
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-4
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_82
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-4
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_83
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-4
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_84
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-4
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function bdb_reportCommissioningState
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_85
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-4
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_86
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function bdb_event_loop
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_87
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-4
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function bdb_event_loop
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_88
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_89
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function bdb_AddRespondentNode
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_90
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-4
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function bdb_event_loop
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function bdb_event_loop
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_128
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-4
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_129
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-4
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function bdb_event_loop
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_126
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-4
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function bdb_crcInit
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_127
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-4
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199
// 2510 
// 2511 /*********************************************************************
// 2512  * @fn          bdb_event_loop
// 2513  *
// 2514  * @brief       Main event loop bdb tasks.
// 2515  *
// 2516  * @param       task_id - task id
// 2517  * @param       events - event bitmap
// 2518  *
// 2519  * @return      unprocessed events
// 2520  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2521 UINT16 bdb_event_loop(byte task_id, UINT16 events)
bdb_event_loop:
          CFI Block cfiBlock200 Using cfiCommon0
          CFI Function bdb_event_loop
        CODE
// 2522 {
        FUNCALL bdb_event_loop, bdb_startResumeCommissioningProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessSimpleDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessIEEEAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_TCProcessJoiningList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2523   (void)task_id;  // Intentionally unreferenced parameter
// 2524 
// 2525 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
// 2526   endPointDesc_t * bdb_CurrEpDescriptor;
// 2527 #endif
// 2528 
// 2529   if(events & BDB_CHANGE_COMMISSIONING_STATE)
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??bdb_event_loop_0
// 2530   {
// 2531     switch(bdbCommissioningProcedureState.bdbCommissioningState)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_1
        ADD       A,#-0x4
        JZ        ??bdb_event_loop_2
        ADD       A,#-0x2
        JZ        ??bdb_event_loop_3
        SJMP      ??bdb_event_loop_4
// 2532     {
// 2533       case BDB_COMMISSIONING_STATE_START_RESUME:
// 2534         bdb_startResumeCommissioningProcess();
??bdb_event_loop_1:
        ; Setup parameters for call to function bdb_startResumeCommissioningProcess
        LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
// 2535       break;
        SJMP      ??bdb_event_loop_4
// 2536 
// 2537       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2538         if (ZG_BUILD_JOINING_TYPE)
// 2539         {
// 2540           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
// 2541         }
// 2542       break;
// 2543 
// 2544       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 2545         bdb_nwkSteeringDeviceOnNwk();
// 2546 
// 2547         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
??bdb_event_loop_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2548       break;
        SJMP      ??bdb_event_loop_4
// 2549 
// 2550       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 2551         bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_3:
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 2552         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      @DPTR,A
// 2553         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2554       break;
// 2555 
// 2556     }
// 2557     return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
??bdb_event_loop_4:
        MOV       A,R6
        XRL       A,#0x4
        LJMP      ??bdb_event_loop_5 & 0xFFFF
// 2558   }
// 2559 
// 2560   if ( events & SYS_EVENT_MSG )
??bdb_event_loop_0:
        MOV       A,R3
        ANL       A,#0x80
        JNZ       ??bdb_event_loop_6
// 2561   {
// 2562     uint8 *msg_ptr;
// 2563 
// 2564     while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
// 2565     {
// 2566       //Process the Incomming ZDO messages used by BDB commissioning methods
// 2567       if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
// 2568       {
// 2569         bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
// 2570       }
// 2571 
// 2572       //Validate the is receive on the right process
// 2573       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
// 2574       {
// 2575         bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
// 2576       }
// 2577       //Notify the user
// 2578       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
// 2579       {
// 2580         ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
// 2581         if(pfnCommissioningStatusCB)
// 2582         {
// 2583           pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2584         }
// 2585 #ifdef MT_APP_CNF_FUNC
// 2586         //Notify the host processor about the event
// 2587         MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2588 #endif
// 2589       }
// 2590 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2591       else
// 2592       {
// 2593         if(ZG_DEVICE_COORDINATOR_TYPE)
// 2594         {
// 2595           //Notify the status
// 2596           if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
// 2597           {
// 2598             pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
// 2599           }
// 2600         }
// 2601       }
// 2602 #endif
// 2603       // Release the memory
// 2604       osal_msg_deallocate( msg_ptr );
// 2605     }
// 2606 
// 2607     // Return unprocessed events
// 2608     return (events ^ SYS_EVENT_MSG);
// 2609   }
// 2610 
// 2611 
// 2612   if(events & BDB_PROCESS_TIMEOUT)
        MOV       A,R3
        ANL       A,#0x10
        JNZ       $+5
        LJMP      ??bdb_event_loop_7 & 0xFFFF
// 2613   {
// 2614     bdb_processTimeout();
// 2615     // Return unprocessed events
// 2616     return (events ^ BDB_PROCESS_TIMEOUT);
        MOV       A,R3
        XRL       A,#0x10
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2617   }
??bdb_event_loop_9:
        MOV       A,#0x9
        XRL       A,R0
        JNZ       ??bdb_event_loop_10
        ; Setup parameters for indirect call
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
??bdb_event_loop_11:
        LCALL     ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     ?CALL_IND
??bdb_event_loop_10:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??bdb_event_loop_6:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_event_loop_12
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#-0x2d
        XRL       A,R0
        JNZ       ??bdb_event_loop_13
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for bdb_event_loop>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_14
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_15
        CODE
??bdb_event_loop_15:
        ; Setup parameters for call to function bdb_ProcessSimpleDesc
        LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
        SJMP      ??bdb_event_loop_10
??bdb_event_loop_14:
        ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
        LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
        SJMP      ??bdb_event_loop_10
??bdb_event_loop_13:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??bdb_event_loop_10
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       A,#0xa
        XRL       A,R0
        JNZ       ??bdb_event_loop_9
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPTR,#pfnCommissioningStatusCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_87:
        JZ        ??bdb_event_loop_10
        ; Setup parameters for indirect call
        LJMP      ??bdb_event_loop_11 & 0xFFFF
??bdb_event_loop_12:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2618 
// 2619   if(events &  BDB_REPORT_TIMEOUT){
??bdb_event_loop_7:
        MOV       A,R2
        ANL       A,#0x80
        JZ        ??bdb_event_loop_16
// 2620 #ifdef BDB_REPORTING
// 2621     bdb_RepProcessEvent();
// 2622 #endif
// 2623     // Return unprocessed events
// 2624     return (events ^ BDB_REPORT_TIMEOUT);
        MOV       A,R2
        XRL       A,#0x80
        MOV       R2,A
        LJMP      ??bdb_event_loop_17 & 0xFFFF
// 2625   }
// 2626 
// 2627 #if (ZG_BUILD_JOINING_TYPE)
// 2628   if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
// 2629   {
// 2630     if(ZG_DEVICE_JOINING_TYPE)
// 2631     {
// 2632       NLME_LeaveReq_t leaveReq;
// 2633       // Set every field to 0
// 2634       osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
// 2635 
// 2636       bdb_setNodeIsOnANetwork(FALSE);
// 2637 
// 2638       if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
// 2639       {
// 2640         osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
// 2641       }
// 2642     }
// 2643     // Return unprocessed events
// 2644     return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
// 2645   }
// 2646 #endif
// 2647 
// 2648   if(events & BDB_TC_JOIN_TIMEOUT)
??bdb_event_loop_16:
        MOV       A,R3
        ANL       A,#0x8
        JZ        ??bdb_event_loop_18
// 2649   {
// 2650 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2651     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2652     {
// 2653       bdb_TCProcessJoiningList();
        ; Setup parameters for call to function bdb_TCProcessJoiningList
        LCALL     `??bdb_TCProcessJoiningList::?relay`; Banked call to: bdb_TCProcessJoiningList
// 2654     }
// 2655 #endif
// 2656     return (events ^ BDB_TC_JOIN_TIMEOUT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x8
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2657   }
// 2658 
// 2659 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
// 2660 
// 2661   if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
??bdb_event_loop_18:
        MOV       A,R2
        ANL       A,#0x40
        JZ        ??bdb_event_loop_19
// 2662   {
// 2663     if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2664     {
// 2665       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2666 
// 2667       //If we have endpoint from which to send the identify command, then proceed, otherwise finish
// 2668       if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_event_loop_20
// 2669       {
// 2670         //Substract an attempt
// 2671         bdb_FB_InitiatorCurrentCyclesNumber--;
// 2672 
// 2673         if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
        JZ        ??bdb_event_loop_21
// 2674         {
// 2675           //Only send Identify Query if there is no pending responses from a previous identify query
// 2676           if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
        ; Setup parameters for call to function osal_get_timeoutEx
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_65:
        JNZ       ??bdb_event_loop_22
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_18:
        JNZ       ??bdb_event_loop_22
// 2677           {
// 2678             //Send identify query with the endpoint requested
// 2679             bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
// 2680           }
// 2681           osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
??bdb_event_loop_22:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x40
        LCALL     ??Subroutine52_0 & 0xFFFF
// 2682         }
// 2683       }
// 2684     }
??CrossCallReturnLabel_98:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2685 
// 2686     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
??bdb_event_loop_20:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JNZ       ??bdb_event_loop_23
// 2687     {
// 2688       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
??bdb_event_loop_21:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2689     }
// 2690 
// 2691     return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
??bdb_event_loop_23:
        MOV       A,R6
        XRL       A,#0x40
??bdb_event_loop_5:
        MOV       R2,A
        MOV       A,R7
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2692   }
// 2693 
// 2694   if(events & BDB_IDENTIFY_TIMEOUT)
??bdb_event_loop_19:
        MOV       A,R3
        ANL       A,#0x20
        JNZ       $+5
        LJMP      ??bdb_event_loop_24 & 0xFFFF
// 2695   {
// 2696     zclAttrRec_t identifyAttrRec;
// 2697     epList_t *bdb_CurrEpDescriptorNextInList = NULL;
// 2698     bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV       ?V0,R0
        MOV       ?V1,A
// 2699 
// 2700     bool KeepIdentifyTimerRunning = FALSE;
        MOV       ?V4,#0x0
        SJMP      ??CrossCallReturnLabel_15
// 2701 
// 2702     while(bdb_CurrEpDescriptorNextInList != NULL )
// 2703     {
// 2704       endPointDesc_t *bdb_EpDescriptor = NULL;
// 2705       bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
// 2706 
// 2707       //Do not check ZDO or Zigbee reserved endpoints
// 2708       if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
// 2709       {
// 2710         bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
// 2711         continue;
// 2712       }
// 2713 
// 2714       if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2715                         ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
// 2716       {
// 2717         if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
// 2718         {
// 2719           (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
// 2720           KeepIdentifyTimerRunning = TRUE;
// 2721         }
// 2722         else
// 2723         {
// 2724           // Use bdb success main state
// 2725           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_25:
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 2726           if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_88:
        JZ        ??bdb_event_loop_26
// 2727           {
// 2728             pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
        ; Setup parameters for indirect call
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine22 & 0xFFFF
// 2729           }
// 2730         }
??CrossCallReturnLabel_71:
        LCALL     ?CALL_IND
// 2731       }
// 2732       bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_26:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_event_loop_27
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV       DPL,R0
        MOV       DPH,A
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_26
        CLR       C
        SUBB      A,#-0xf
        JNC       ??bdb_event_loop_26
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        JZ        ??bdb_event_loop_26
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV       DPL,R0
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_125:
        JZ        ??bdb_event_loop_25
        MOV       A,R2
        ADD       A,#-0x1
        DEC       R2
        MOV       A,R3
        ADDC      A,#-0x1
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       ?V4,#0x1
        SJMP      ??bdb_event_loop_26
// 2733     }
// 2734 
// 2735     //If any endpoint has identify running, keep the timer on
// 2736     if(KeepIdentifyTimerRunning)
??bdb_event_loop_27:
        MOV       A,?V4
        JZ        ??bdb_event_loop_28
// 2737     {
// 2738       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine53_0 & 0xFFFF
// 2739     }
??CrossCallReturnLabel_101:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP      ??CrossCallReturnLabel_112
// 2740     else
// 2741     {
// 2742       osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
??bdb_event_loop_28:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine57_0 & 0xFFFF
// 2743     }
// 2744 
// 2745     // Return unprocessed events
// 2746     return (events ^ BDB_IDENTIFY_TIMEOUT);
??CrossCallReturnLabel_112:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        SJMP      ??bdb_event_loop_8
// 2747   }
// 2748 
// 2749   if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
??bdb_event_loop_24:
        MOV       A,R3
        ANL       A,#0x40
        JZ        ??bdb_event_loop_29
// 2750   {
// 2751     // Send Simple Descriptor request to a respondent node
// 2752     bdb_ProcessRespondentList();
        ; Setup parameters for call to function bdb_ProcessRespondentList
        LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
// 2753 
// 2754     return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x40
??bdb_event_loop_8:
        MOV       R3,A
        SJMP      ??bdb_event_loop_17
// 2755   }
// 2756 #endif
// 2757 
// 2758   return 0;
??bdb_event_loop_29:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_event_loop_17:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 2759 }
          CFI EndBlock cfiBlock200

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function bdb_event_loop
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker203 Using cfiCommon1
          CFI (cfiPicker203) NoFunction
          CFI (cfiPicker203) Picker
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiPicker203

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond204 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function bdb_event_loop
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiPicker207 Using cfiCommon1
          CFI (cfiPicker207) NoFunction
          CFI (cfiPicker207) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiPicker207

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond208 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function bdb_reportCommissioningState
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function bdb_reportCommissioningState
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function bdb_reportCommissioningState
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function bdb_reportCommissioningState
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function bdb_event_loop
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker214 Using cfiCommon1
          CFI (cfiPicker214) NoFunction
          CFI (cfiPicker214) Picker
        MOV       R2,#0x4
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiPicker214
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function bdb_event_loop
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function bdb_reportCommissioningState
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function bdb_reportCommissioningState
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function bdb_reportCommissioningState
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function bdb_reportCommissioningState
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function bdb_reportCommissioningState
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function bdb_event_loop
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker223 Using cfiCommon1
          CFI (cfiPicker223) NoFunction
          CFI (cfiPicker223) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiPicker223
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond224 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function bdb_event_loop
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function bdb_event_loop
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function bdb_reportCommissioningState
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function bdb_reportCommissioningState
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function bdb_reportCommissioningState
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function bdb_reportCommissioningState
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function bdb_reportCommissioningState
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function bdb_event_loop
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker235 Using cfiCommon1
          CFI (cfiPicker235) NoFunction
          CFI (cfiPicker235) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiPicker235
// 2760 
// 2761 /*********************************************************************
// 2762  * @fn          bdb_processZDOMgs
// 2763  *
// 2764  * @brief       Process ZDO messages used as part of BDB commissioning methods
// 2765  *
// 2766  * @param       zdoIncomingMsg_t - ZDO message
// 2767  *
// 2768  * @return
// 2769  */
// 2770 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
// 2771 {
// 2772   switch ( pMsg->clusterID )
// 2773   {
// 2774 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
// 2775     case IEEE_addr_rsp:
// 2776        bdb_ProcessIEEEAddrRsp(pMsg);
// 2777     break;
// 2778     case Simple_Desc_rsp:
// 2779       bdb_ProcessSimpleDesc(pMsg);
// 2780     break;
// 2781 #endif
// 2782 
// 2783 #if (ZG_BUILD_JOINING_TYPE)
// 2784     case Node_Desc_rsp:
// 2785       bdb_ProcessNodeDescRsp(pMsg);
// 2786     break;
// 2787 #endif
// 2788 
// 2789     default:
// 2790     break;
// 2791   }
// 2792 }
// 2793 
// 2794 
// 2795 /*********************************************************************
// 2796  * @fn      bdb_ProcessNodeDescRsp
// 2797  *
// 2798  * @brief   Process Node Descriptor response to validate the stack version of the
// 2799  *
// 2800  * @param   zdoIncomingMsg_t *pMsg
// 2801  *
// 2802  * @return  none
// 2803  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2804 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
bdb_ProcessNodeDescRsp:
          CFI Block cfiBlock236 Using cfiCommon0
          CFI Function bdb_ProcessNodeDescRsp
        CODE
// 2805 {
        FUNCALL bdb_ProcessNodeDescRsp, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, ZDO_ParseNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 35
        MOV       A,#-0x23
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2806   //Avoid processing unintended messages
// 2807   if(requestNewTrustCenterLinkKey &&
// 2808     (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2809   {
// 2810     if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JNZ       ??bdb_ProcessNodeDescRsp_0
// 2811     {
// 2812       //Is this from the coordinator?
// 2813       if(pMsg->srcAddr.addr.shortAddr == 0x0000)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_89:
        JNZ       ??bdb_ProcessNodeDescRsp_0
// 2814       {
// 2815         ZDO_NodeDescRsp_t NDRsp;
// 2816         uint8 StackComplianceRev;
// 2817 
// 2818         //Stop timer to avoid unintended resets
// 2819         osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        LCALL     ??Subroutine57_0 & 0xFFFF
// 2820 
// 2821         ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
??CrossCallReturnLabel_113:
        ; Setup parameters for call to function ZDO_ParseNodeDescRsp
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
// 2822 
// 2823         StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
// 2824 
// 2825         if( StackComplianceRev >= STACK_COMPL_REV_21 )
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV       A,#0x9
        MOV       R0,#?V0
        LCALL     ?US_SHR
        CLR       C
        MOV       A,?V0
        SUBB      A,#0x15
        SUBB      A,0xE0 /* A   */
        CLR       C
        XRL       A,PSW
        RLC       A
        JC        ??bdb_ProcessNodeDescRsp_1
// 2826         {
// 2827           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
        SJMP      ??bdb_ProcessNodeDescRsp_0
// 2828         }
// 2829         else
// 2830         {
// 2831           APSME_TCLKDevEntry_t TCLKDevEntry;
// 2832 
// 2833           //Save the KeyAttribute for joining device that it has joined non-R21 nwk
// 2834           TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
??bdb_ProcessNodeDescRsp_1:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x3
        MOVX      @DPTR,A
// 2835           osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
// 2836 
// 2837           bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 2838           bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2839         }
// 2840       }
// 2841     }
// 2842   }
// 2843 }
??bdb_ProcessNodeDescRsp_0:
        MOV       A,#0x23
          CFI EndBlock cfiBlock236
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock237 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock237
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiBlock238 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock238

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_102
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function bdb_setNodeIsOnANetwork
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker241 Using cfiCommon1
          CFI (cfiPicker241) NoFunction
          CFI (cfiPicker241) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiPicker241
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond242 Using cfiCommon0
          CFI Function bdb_rejoinNwk
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function bdb_StartCommissioning
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function bdb_setNodeIsOnANetwork
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker245 Using cfiCommon1
          CFI (cfiPicker245) NoFunction
          CFI (cfiPicker245) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiPicker245
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond246 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 61)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function bdb_StartCommissioning
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function bdb_rejoinNwk
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-2
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function bdb_StartCommissioning
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function bdb_setNodeIsOnANetwork
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker252 Using cfiCommon1
          CFI (cfiPicker252) NoFunction
          CFI (cfiPicker252) Picker
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_108
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker255 Using cfiCommon1
          CFI (cfiPicker255) NoFunction
          CFI (cfiPicker255) Picker
        MOV       R2,#0x0
        MOV       R3,#0x8
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiPicker255
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond256 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_110
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function bdb_reportCommissioningState
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-2
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function bdb_event_loop
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-2
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function bdb_TCProcessJoiningList
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-2
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-2
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker262 Using cfiCommon1
          CFI (cfiPicker262) NoFunction
          CFI (cfiPicker262) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        RET
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiPicker262
// 2844 
// 2845 
// 2846 /*********************************************************************
// 2847  * @fn          bdb_touchlinkSendFNReset
// 2848  *
// 2849  * @brief       Starts the Factory New Procedure for Initiator
// 2850  *
// 2851  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2852  *
// 2853  * @return      none
// 2854  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2855 void bdb_touchlinkSendFNReset( void )
bdb_touchlinkSendFNReset:
          CFI Block cfiBlock263 Using cfiCommon0
          CFI Function bdb_touchlinkSendFNReset
        CODE
// 2856 {
        ; Saved register size: 0
        ; Auto size: 0
// 2857 #ifdef BDB_TL_INITIATOR
// 2858   touchLinkInitiator_ResetToFNProcedure( );
// 2859 #endif
// 2860 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock263
// 2861 
// 2862 
// 2863 /*********************************************************************
// 2864  * @fn          bdb_setNodeIsOnANetwork
// 2865  *
// 2866  * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
// 2867  *
// 2868  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2869  *
// 2870  * @return      none
// 2871  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2872 void bdb_setNodeIsOnANetwork(bool isOnANetwork)
bdb_setNodeIsOnANetwork:
          CFI Block cfiBlock264 Using cfiCommon0
          CFI Function bdb_setNodeIsOnANetwork
        CODE
// 2873 {
        FUNCALL bdb_setNodeIsOnANetwork, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2874   if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_0
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JNZ       ??bdb_setNodeIsOnANetwork_1
// 2875   {
// 2876     //We lose our network
// 2877     if(!isOnANetwork)
??bdb_setNodeIsOnANetwork_0:
        MOV       A,R1
        JNZ       ??bdb_setNodeIsOnANetwork_2
// 2878     {
// 2879       bdbAttributes.bdbCommissioningMode = 0;
        MOV       DPTR,#bdbAttributes + 11
        CLR       A
        MOVX      @DPTR,A
// 2880     }
// 2881 
// 2882     bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
??bdb_setNodeIsOnANetwork_2:
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 14
        MOVX      @DPTR,A
// 2883 
// 2884     osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#(bdbAttributes + 14) & 0xff
        MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL     ?Subroutine31 & 0xFFFF
// 2885   }
??CrossCallReturnLabel_103:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2886 }
??bdb_setNodeIsOnANetwork_1:
        SJMP      ??Subroutine54_0
          CFI EndBlock cfiBlock264
// 2887 
// 2888 /*********************************************************************
// 2889  * @fn          bdb_setCommissioningGroupID
// 2890  *
// 2891  * @brief       Sets the commissioning groupd ID
// 2892  *
// 2893  * @param       groupID
// 2894  *
// 2895  * @return      none
// 2896  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2897 void bdb_setCommissioningGroupID(uint16 groupID)
bdb_setCommissioningGroupID:
          CFI Block cfiBlock265 Using cfiCommon0
          CFI Function bdb_setCommissioningGroupID
        CODE
// 2898 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2899   bdbAttributes.bdbCommissioningGroupID = groupID;
        MOV       DPTR,#bdbAttributes + 8
        LJMP      ?Subroutine3 & 0xFFFF
// 2900 }
          CFI EndBlock cfiBlock265
// 2901 
// 2902 /*********************************************************************
// 2903  * @fn      bdb_CreateRespondentList
// 2904  *
// 2905  * @brief   Create respondent list for finding and binding if empty
// 2906  *
// 2907  * @param   pHead - pointer to a pointer of the list head
// 2908  *
// 2909  * @return  none
// 2910  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2911 void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
bdb_CreateRespondentList:
          CFI Block cfiBlock266 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
        CODE
// 2912 {
        FUNCALL bdb_CreateRespondentList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine12 & 0xFFFF
// 2913 
// 2914   // Create the list if empty
// 2915   if ( *pHead == NULL )
??CrossCallReturnLabel_72:
        JNZ       ??CrossCallReturnLabel_30
// 2916   {
// 2917     *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        LCALL     ?Subroutine9 & 0xFFFF
// 2918 
// 2919     if ( *pHead != NULL )
??CrossCallReturnLabel_114:
        JZ        ??CrossCallReturnLabel_30
// 2920     {
// 2921       (*pHead)->pNext = NULL;
        LCALL     ?Subroutine33 & 0xFFFF
// 2922     }
// 2923   }
// 2924   return;
??CrossCallReturnLabel_30:
        LJMP      ??Subroutine54_0 & 0xFFFF
// 2925 }
          CFI EndBlock cfiBlock266

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond267 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_114
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function bdb_AddRespondentNode
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker269 Using cfiCommon1
          CFI (cfiPicker269) NoFunction
          CFI (cfiPicker269) Picker
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V1,R3
        MOV       R1,?V1
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiPicker269
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond270 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function bdb_CreateRespondentList
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function bdb_AddRespondentNode
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-2
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker273 Using cfiCommon1
          CFI (cfiPicker273) NoFunction
          CFI (cfiPicker273) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,R2
        ORL       A,R1
        RET
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiPicker273
// 2926 
// 2927 /*********************************************************************
// 2928  * @fn      bdb_AddRespondentNode
// 2929  *
// 2930  * @brief   Add node to respondent list for finding and binding
// 2931  *
// 2932  * @param   pHead - pointer to a pointer of the list head
// 2933  *
// 2934  * @return  pointer to new node
// 2935  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2936 bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
bdb_AddRespondentNode:
          CFI Block cfiBlock274 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
        CODE
// 2937 {
        FUNCALL bdb_AddRespondentNode, bdb_CreateRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_AddRespondentNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine12 & 0xFFFF
// 2938   bdbFindingBindingRespondent_t **pCurr;
// 2939   bdbFindingBindingRespondent_t *temp;
// 2940 
// 2941     // Create respondent list if empty
// 2942   if ( *pHead == NULL )
??CrossCallReturnLabel_73:
        JNZ       ??bdb_AddRespondentNode_0
// 2943   {
// 2944     bdb_CreateRespondentList( pHead );
        ; Setup parameters for call to function bdb_CreateRespondentList
        LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
// 2945     return *pHead;
        LJMP      ??CrossCallReturnLabel_31 & 0xFFFF
// 2946   }
// 2947   else
// 2948   {
// 2949     // if pCmd is equal to NULL, don't look for duplucates
// 2950     if( pCmd != NULL )
??bdb_AddRespondentNode_0:
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_AddRespondentNode_1
// 2951     {
// 2952       //Find if any duplicate in the list
// 2953       temp = *pHead;
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
// 2954 
// 2955       while(temp != NULL)
// 2956       {
// 2957         if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
??bdb_AddRespondentNode_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_3
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_26:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_AddRespondentNode_4:
        JNZ       ??bdb_AddRespondentNode_3
// 2958         {
// 2959           //Duplicate
// 2960           if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine28 & 0xFFFF
// 2961           {
// 2962             return NULL;
// 2963           }
// 2964         }
??CrossCallReturnLabel_27:
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_AddRespondentNode_5:
        JZ        ??bdb_AddRespondentNode_6
// 2965         temp = temp->pNext;
??bdb_AddRespondentNode_3:
        MOV       A,R2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        LCALL     ?Subroutine17 & 0xFFFF
// 2966       }
// 2967     }
??CrossCallReturnLabel_121:
        JNZ       ??bdb_AddRespondentNode_2
// 2968 
// 2969     pCurr = &((*pHead)->pNext);
// 2970 
// 2971     while ( *pCurr != NULL )
// 2972     {
// 2973       pCurr = &((*pCurr)->pNext);
??bdb_AddRespondentNode_1:
        MOV       A,R0
        ADD       A,#0xf
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
// 2974     }
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_90:
        JNZ       ??bdb_AddRespondentNode_1
// 2975 
// 2976     *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        LCALL     ?Subroutine9 & 0xFFFF
// 2977 
// 2978     if(*pCurr == NULL)
??CrossCallReturnLabel_115:
        JNZ       ??bdb_AddRespondentNode_7
// 2979     {
// 2980       //No memory
// 2981       return NULL;
??bdb_AddRespondentNode_6:
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??CrossCallReturnLabel_22
// 2982     }
// 2983 
// 2984     (*pCurr)->pNext = NULL;
??bdb_AddRespondentNode_7:
        LCALL     ?Subroutine33 & 0xFFFF
// 2985   }
// 2986 
// 2987   return *pCurr;
??CrossCallReturnLabel_31:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_22:
        LJMP      ??Subroutine54_0 & 0xFFFF
// 2988 }
          CFI EndBlock cfiBlock274

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond275 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function bdb_AddRespondentNode
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-2
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker277 Using cfiCommon1
          CFI (cfiPicker277) NoFunction
          CFI (cfiPicker277) Picker
        MOV       A,R2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiPicker277

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond278 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function bdb_AddRespondentNode
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker280 Using cfiCommon1
          CFI (cfiPicker280) NoFunction
          CFI (cfiPicker280) Picker
        LCALL     ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_118:
        MOV       DPL,R4
        MOV       DPH,R5
        RET
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiPicker280

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond281 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_119
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        MOV       DPTR,#bdb_joiningDeviceList
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond284 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function bdb_AddRespondentNode
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_26
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-4
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function bdb_AddRespondentNode
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_27
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-4
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function bdb_TCAddJoiningDevice
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond287) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond287) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond287) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond287) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond287) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-2
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker289 Using cfiCommon1
          CFI (cfiPicker289) NoFunction
          CFI (cfiPicker289) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiPicker289
// 2989 
// 2990 /*********************************************************************
// 2991  * @fn      bdb_zclRespondentListClean
// 2992  *
// 2993  * @brief   This function free reserved memory for respondent list
// 2994  *
// 2995  * @param   pHead - begin of the respondent list
// 2996  *
// 2997  * @return  status
// 2998  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2999 void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
bdb_zclRespondentListClean:
          CFI Block cfiBlock290 Using cfiCommon0
          CFI Function bdb_zclRespondentListClean
        CODE
// 3000 {
        FUNCALL bdb_zclRespondentListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL     ?Subroutine12 & 0xFFFF
// 3001   bdbFindingBindingRespondent_t **pCurr;
// 3002   bdbFindingBindingRespondent_t **pNext;
// 3003 
// 3004   if ( *pHead == NULL )
??CrossCallReturnLabel_74:
        JZ        ??bdb_zclRespondentListClean_0
// 3005   {
// 3006     return;
// 3007   }
// 3008 
// 3009   pCurr = pHead;
        MOV       ?V0,R2
        MOV       ?V1,R3
        SJMP      ??bdb_zclRespondentListClean_1
// 3010 
// 3011   while( *pCurr != NULL )
// 3012   {
// 3013     pNext = &((*pCurr)->pNext);
??bdb_zclRespondentListClean_2:
        MOV       A,R2
        ADD       A,#0xf
        MOV       ?V2,A
        CLR       A
        ADDC      A,R3
        MOV       ?V3,A
// 3014     osal_mem_free( *pCurr );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3015     *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
        MOV       DPL,?V0
        MOV       DPH,?V1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3016     pCurr = pNext;
        MOV       ?V0,?V2
        MOV       ?V1,?V3
// 3017   }
??bdb_zclRespondentListClean_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_124:
        JNZ       ??bdb_zclRespondentListClean_2
// 3018   *pHead = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3019 }
??bdb_zclRespondentListClean_0:
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock290

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond291 Using cfiCommon0
          CFI Function bdb_event_loop
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function bdb_AddRespondentNode
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-2
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker293 Using cfiCommon1
          CFI (cfiPicker293) NoFunction
          CFI (cfiPicker293) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiPicker293
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond294 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_122
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-2
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function bdb_zclRespondentListClean
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-2
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function bdb_event_loop
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond297) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond297) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond297) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-2
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function bdb_AddRespondentNode
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-2
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker299 Using cfiCommon1
          CFI (cfiPicker299) NoFunction
          CFI (cfiPicker299) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiPicker299
// 3020 
// 3021  /*********************************************************************
// 3022  * PRIVATE FUNCTIONS
// 3023  *********************************************************************/
// 3024 
// 3025 /*********************************************************************
// 3026  * @fn      bdb_ProcessOSALMsg
// 3027  *
// 3028  * @brief   Process the incoming task message.
// 3029  *
// 3030  * @param   msgPtr - message to process
// 3031  *
// 3032  * @return  none
// 3033  */
// 3034 void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
// 3035 {
// 3036 
// 3037   switch(msgPtr->hdr.event)
// 3038   {
// 3039 #if (ZG_BUILD_JOINING_TYPE)
// 3040     case BDB_COMMISSIONING_STATE_JOINING:
// 3041       if(ZG_DEVICE_JOINING_TYPE)
// 3042       {
// 3043         switch(msgPtr->buf[0])
// 3044         {
// 3045           case BDB_JOIN_EVENT_NWK_DISCOVERY:
// 3046             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
// 3047             {
// 3048               bdb_filterNwkDisc();
// 3049               bdb_tryNwkAssoc();
// 3050             }
// 3051             else
// 3052             {
// 3053               bdb_nwkDiscoveryAttempt(FALSE);
// 3054             }
// 3055           break;
// 3056 
// 3057           case BDB_JOIN_EVENT_ASSOCIATION:
// 3058             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
// 3059             {
// 3060               bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
// 3061               //Nwk key timeout get right timing
// 3062               osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
// 3063             }
// 3064             else
// 3065             {
// 3066               if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 3067                    (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
// 3068               {
// 3069                 uint16 addr = INVALID_NODE_ADDR;
// 3070                 // Invalidate nwk addr so end device does not use in its data reqs.
// 3071                 _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 3072                 ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
// 3073               }
// 3074 
// 3075               //Clear the neighbor Table and network discovery tables.
// 3076               nwkNeighborInitTable();
// 3077               NLME_NwkDiscTerm();
// 3078               _NIB.nwkState = NWK_INIT;
// 3079 
// 3080               bdb_tryNwkAssoc();
// 3081             }
// 3082           break;
// 3083         }
// 3084       }
// 3085     break;
// 3086 
// 3087     case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3088       if(ZG_DEVICE_JOINING_TYPE)
// 3089       {
// 3090         if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
// 3091         {
// 3092           bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
// 3093           if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
// 3094           {
// 3095             //TCLK process fail due to many attempts fails
// 3096             bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
// 3097             return;
// 3098           }
// 3099         }
// 3100         switch(bdbCommissioningProcedureState.bdbTCExchangeState)
// 3101         {
// 3102           case BDB_REQ_TC_STACK_VERSION:
// 3103             bdb_requestTCStackVersion();
// 3104           break;
// 3105           case BDB_REQ_TC_LINK_KEY:
// 3106             bdb_requestTCLinkKey();
// 3107           break;
// 3108           case BDB_REQ_VERIFY_TC_LINK_KEY:
// 3109             bdb_requestVerifyTCLinkKey();
// 3110           break;
// 3111         }
// 3112       }
// 3113    break;
// 3114 #endif
// 3115    }
// 3116 }
// 3117 
// 3118 
// 3119 /*********************************************************************
// 3120  * @fn      bdb_processTimeout
// 3121  *
// 3122  * @brief   Handles timeout of the bdb process
// 3123  *
// 3124  * @param   msgPtr - message to process
// 3125  *
// 3126  * @return  none
// 3127  */
// 3128 void bdb_processTimeout(void)
// 3129 {
// 3130 #if (ZG_BUILD_JOINING_TYPE)
// 3131   if(ZG_DEVICE_JOINING_TYPE)
// 3132   {
// 3133     switch(bdbCommissioningProcedureState.bdbCommissioningState)
// 3134     {
// 3135       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3136 
// 3137         bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
// 3138       break;
// 3139       case BDB_COMMISSIONING_STATE_JOINING:
// 3140         if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
// 3141         {
// 3142           //If nwk key fails, then try association again
// 3143           bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
// 3144           bdb_nwkAssocAttemt(FALSE);
// 3145         }
// 3146       break;
// 3147     }
// 3148   }
// 3149 #endif
// 3150 
// 3151 }
// 3152 
// 3153 
// 3154 /*********************************************************************
// 3155  * @fn      bdb_SendMsg
// 3156  *
// 3157  * @brief   Send messages to bdb processing with the expected format
// 3158  *
// 3159  * @param   msgPtr - message to process
// 3160  *
// 3161  * @return  none
// 3162  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3163 void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
bdb_SendMsg:
          CFI Block cfiBlock300 Using cfiCommon0
          CFI Function bdb_SendMsg
        CODE
// 3164 {
        FUNCALL bdb_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        MOV       A,#-0x11
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V7,R2
        MOV       ?V8,R3
        MOV       ?V3,R4
// 3165   bdbInMsg_t *msgPtr = NULL;
// 3166 
// 3167   if ( (len > 0) && (buf != NULL) )
        MOV       A,R4
        JZ        ??bdb_SendMsg_0
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ        ??bdb_SendMsg_0
// 3168   {
// 3169     uint8 tmpLength;
// 3170     tmpLength = len;
// 3171     tmpLength += sizeof(osal_event_hdr_t);
// 3172 
// 3173     msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,#0x2
        ADD       A,R4
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3174 
// 3175     if ( msgPtr )
        MOV       A,R2
        ORL       A,R7
        JZ        ??bdb_SendMsg_0
// 3176     {
// 3177       osal_memcpy( msgPtr->buf, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,?V3
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 3178 
// 3179       msgPtr->hdr.event = toCommissioningState;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V7
        MOVX      @DPTR,A
// 3180       msgPtr->hdr.status = status;
        INC       DPTR
        MOV       A,?V8
        MOVX      @DPTR,A
// 3181       osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 3182     }
// 3183   }
// 3184 }
??bdb_SendMsg_0:
        MOV       R7,#0x9
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock300

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond301 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function bdb_SendMsg
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond302) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-2
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker303 Using cfiCommon1
          CFI (cfiPicker303) NoFunction
          CFI (cfiPicker303) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V0
        ORL       A,?V1
        RET
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiPicker303
// 3185 
// 3186 
// 3187 /*********************************************************************
// 3188  * @fn      bdb_RegisterCommissioningStatusCB
// 3189  *
// 3190  * @brief   Register a callback in which the status of the procedures done in
// 3191  *          BDB commissioning process will be reported
// 3192  *
// 3193  * @param   bdbGCB_CommissioningStatus - application callback
// 3194  *
// 3195  * @return  none
// 3196  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3197 void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
bdb_RegisterCommissioningStatusCB:
          CFI Block cfiBlock304 Using cfiCommon0
          CFI Function bdb_RegisterCommissioningStatusCB
        CODE
// 3198 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3199   pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
        MOV       DPTR,#pfnCommissioningStatusCB
        LJMP      ?Subroutine3 & 0xFFFF
// 3200 }
          CFI EndBlock cfiBlock304
// 3201 
// 3202 /*********************************************************************
// 3203  * @fn      bdb_ClearNetworkParams
// 3204  *
// 3205  * @brief   Restore nwk parameters to invalid if the device is not on a network
// 3206  *
// 3207  * @param   void
// 3208  *
// 3209  * @return  void
// 3210  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3211 void bdb_ClearNetworkParams(void)
bdb_ClearNetworkParams:
          CFI Block cfiBlock305 Using cfiCommon0
          CFI Function bdb_ClearNetworkParams
        CODE
// 3212 {
        ; Saved register size: 0
        ; Auto size: 0
// 3213 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 3214   if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
// 3215   {
// 3216     //Clear the event
// 3217     _NIB.nwkPanId = INVALID_NODE_ADDR;
// 3218     _NIB.nwkLogicalChannel = 0;
// 3219     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 3220     touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
// 3221   }
// 3222 #endif
// 3223 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock305
// 3224 
// 3225 /*********************************************************************
// 3226  * @fn      bdb_getZCLFrameCounter
// 3227  *
// 3228  * @brief   Get the next ZCL Frame Counter for packet sequence number
// 3229  *
// 3230  * @param   none
// 3231  *
// 3232  * @return  next ZCL frame counter
// 3233  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3234 uint8 bdb_getZCLFrameCounter(void)
bdb_getZCLFrameCounter:
          CFI Block cfiBlock306 Using cfiCommon0
          CFI Function bdb_getZCLFrameCounter
        CODE
// 3235 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3236   bdb_ZclTransactionSequenceNumber++;
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 3237   return bdb_ZclTransactionSequenceNumber;
        LJMP      ??Subroutine47_0 & 0xFFFF
// 3238 
// 3239 }
          CFI EndBlock cfiBlock306
// 3240 
// 3241 
// 3242 #if (ZG_BUILD_JOINING_TYPE)
// 3243 /*********************************************************************
// 3244  * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
// 3245  *
// 3246  * @brief   Register a callback in which the TC link key exchange procedure will
// 3247  *          be performed by application.
// 3248  *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
// 3249  *
// 3250  * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
// 3251  *
// 3252  * @return  none
// 3253  */
// 3254 void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
// 3255 {
// 3256   if(bdbGCB_CBKETCLinkKeyExchange)
// 3257   {
// 3258     pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
// 3259     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
// 3260   }
// 3261   else
// 3262   {
// 3263     pfnCBKETCLinkKeyExchange = NULL;
// 3264     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
// 3265   }
// 3266 }
// 3267 
// 3268 /*********************************************************************
// 3269  * @fn      bdb_RegisterForFilterNwkDescCB
// 3270  *
// 3271  * @brief   Register a callback in which the application gets the list of network
// 3272  *          descriptors got from active scan.
// 3273  *          Use bdb_nwkDescFree to release the network descriptors that are not
// 3274  *          of interest and leave those which are to be attempted.
// 3275  *
// 3276  * @param   bdbGCB_FilterNwkDesc - application callback
// 3277  *
// 3278  * @return  none
// 3279  */
// 3280 void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
// 3281 {
// 3282   if(bdbGCB_FilterNwkDesc)
// 3283   {
// 3284     pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
// 3285   }
// 3286 }
// 3287 
// 3288 
// 3289 /*********************************************************************
// 3290  * @fn          bdb_CBKETCLinkKeyExchangeAttempt
// 3291  *
// 3292  * @brief       Tell BDB module the result of the TC link key exchange, to try
// 3293  *              the default process or to keep going with the joining process.
// 3294  *
// 3295  * @param       didSuccess - TRUE if the process was succes, False otherwise
// 3296  *
// 3297  * @return      unprocessed events
// 3298  */
// 3299 void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
// 3300 {
// 3301   if(didSuccess)
// 3302   {
// 3303     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
// 3304     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
// 3305   }
// 3306   else
// 3307   {
// 3308     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
// 3309     //We are going back one state to try it again
// 3310     bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
// 3311     bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
// 3312   }
// 3313 
// 3314 }
// 3315 #endif
// 3316 
// 3317 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
// 3318 
// 3319 /*********************************************************************
// 3320  * @fn      gp_ChangeChannelReq
// 3321  *
// 3322  * @brief   Callback function to notify the BDB about a GP commissioning
// 3323  * request that will change the current channel for at most
// 3324  * gpBirectionalCommissioningChangeChannelTimeout ms
// 3325  *
// 3326  * @param   channel - Channel in which the commissioning will take place
// 3327  *
// 3328  * @return  TRUE to allow change channel, FALSE to do not allow
// 3329  */
// 3330 static uint8 gp_ChangeChannelReq(void)
// 3331 {
// 3332   uint8 allowChangeChannel = TRUE;
// 3333 
// 3334   //Do not allow changes of channel if any process is in place
// 3335   if(bdbAttributes.bdbCommissioningMode)
// 3336   {
// 3337     allowChangeChannel = FALSE;
// 3338   }
// 3339 
// 3340   //Check application state to decide if allow change channel or not
// 3341 
// 3342   return allowChangeChannel;
// 3343 }
// 3344 
// 3345 
// 3346 /*********************************************************************
// 3347  * @fn          gp_CBInit
// 3348  *
// 3349  * @brief       Register the callbacks for GP endpoint
// 3350  *
// 3351  * @param       none
// 3352  *
// 3353  * @return      none
// 3354  */
// 3355 void gp_CBInit(void)
// 3356 {
// 3357   GP_DataCnfGCB = GP_DataCnf;
// 3358   GP_endpointInitGCB = gp_endpointInit;
// 3359   GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
// 3360   GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
// 3361   GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
// 3362   GP_DataIndGCB = GP_DataInd;
// 3363   GP_SecReqGCB = GP_SecReq;
// 3364   GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
// 3365 
// 3366   GP_aliasConflictAnnce = &aliasConflictAnnce;
// 3367 
// 3368   GP_endpointInitGCB();
// 3369 }
// 3370 
// 3371 #endif
// 3372 
// 3373 /*********************************************************************
// 3374 *********************************************************************/
// 3375 
// 3376 
// 3377 /******************************************************************************
// 3378  * @fn          bdb_GenerateInstallCodeCRC
// 3379  *
// 3380  * @brief       Creates a CRC for the install code passed.
// 3381  *
// 3382  * @param       installCode - install code from which CRC will be generated
// 3383  *
// 3384  * @return      CRC
// 3385  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3386 uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
bdb_GenerateInstallCodeCRC:
          CFI Block cfiBlock307 Using cfiCommon0
          CFI Function bdb_GenerateInstallCodeCRC
        CODE
// 3387 {
        FUNCALL bdb_GenerateInstallCodeCRC, bdb_calculateCCITT_CRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 6, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3388   uint16 CRC;
// 3389 
// 3390   bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
        ; Setup parameters for call to function bdb_calculateCCITT_CRC
        MOV       DPTR,#__Constant_10
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 6)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3391 
// 3392   return CRC;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP      ??Subroutine45_0 & 0xFFFF
// 3393 }
          CFI EndBlock cfiBlock307
// 3394 
// 3395 /******************************************************************************
// 3396  * @fn          bdb_calculateCCITT_CRC
// 3397  *
// 3398  * @brief       Creates a CRC for the install code passed.
// 3399  *
// 3400  * @param       Mb - install code from which CRC will be generated
// 3401  * @param       msglen - install code length
// 3402  * @param       crc -
// 3403  *
// 3404  * @return      none
// 3405  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3406 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
bdb_calculateCCITT_CRC:
          CFI Block cfiBlock308 Using cfiCommon0
          CFI Function bdb_calculateCCITT_CRC
        CODE
// 3407 {
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcBitByBitFast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 3408   uint16 crcinit_direct;
// 3409   uint16 crcinit_nondirect;
// 3410   bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcInit
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3411   *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcBitByBitFast
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3412 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock308
// 3413 
// 3414 
// 3415 /******************************************************************************
// 3416  * @fn          bdb_crcInit
// 3417  *
// 3418  * @brief       Initialize CRC calculation
// 3419  *
// 3420  * @param       crc -
// 3421  * @param       crcinit_direct -
// 3422  * @param       crcinit_nondirect -
// 3423  *
// 3424  * @return      none
// 3425  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3426 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
bdb_crcInit:
          CFI Block cfiBlock309 Using cfiCommon0
          CFI Function bdb_crcInit
        CODE
// 3427 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3428 
// 3429   uint16 i;
// 3430   uint16 bit;
// 3431 
// 3432   *crcinit_direct = CRC_INIT;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3433   *crc = CRC_INIT;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3434   for (i=0; i<CRC_ORDER; i++)
        MOV       R6,#0x10
// 3435   {
// 3436     bit = *crc & 1;
??bdb_crcInit_0:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
// 3437     if (bit) *crc^= CRC_POLYNOM;
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_crcInit_1
        XRL       A,#0x21
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x10
        MOVX      @DPTR,A
// 3438     *crc >>= 1;
??bdb_crcInit_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        CLR       C
        RRC       A
        MOV       R5,A
        MOV       A,R4
        RRC       A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3439     if (bit) *crc|= CRC_HIGHBIT;
        MOV       A,R0
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_crcInit_2
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x80
        MOVX      @DPTR,A
// 3440   }
??bdb_crcInit_2:
        DEC       R6
        MOV       A,R6
        JNZ       ??bdb_crcInit_0
// 3441   *crcinit_nondirect = *crc;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R2
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 3442 
// 3443 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock309

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond310 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_128
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-2
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker312 Using cfiCommon1
          CFI (cfiPicker312) NoFunction
          CFI (cfiPicker312) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiPicker312
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond313 Using cfiCommon0
          CFI Function bdb_event_loop
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function bdb_crcInit
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+-2
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-2
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker317 Using cfiCommon1
          CFI (cfiPicker317) NoFunction
          CFI (cfiPicker317) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiPicker317
// 3444 
// 3445 
// 3446 /******************************************************************************
// 3447  * @fn          bdb_crcReflect
// 3448  *
// 3449  * @brief
// 3450  *
// 3451  * @param       crc -
// 3452  * @param       bitnum -
// 3453  *
// 3454  * @return      none
// 3455  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3456 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
bdb_crcReflect:
          CFI Block cfiBlock318 Using cfiCommon0
          CFI Function bdb_crcReflect
        CODE
// 3457 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3458 
// 3459   // reflects the lower 'bitnum' bits of 'crc'
// 3460 
// 3461   uint16 i, j=1, crcout=0;
        MOV       R6,#0x1
        MOV       R7,#0x0
        MOV       ?V0,R7
        MOV       ?V1,R7
// 3462 
// 3463   for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
        MOV       ?V2,R6
        MOV       ?V3,R7
        MOV       A,R4
        DEC       A
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOV       R0,?V2
        MOV       R1,?V3
        SJMP      ??bdb_crcReflect_0
// 3464     if (crc & i) crcout|=j;
??bdb_crcReflect_1:
        MOV       A,R2
        ANL       A,R0
        MOV       R4,A
        MOV       A,R3
        ANL       A,R1
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_crcReflect_2
        MOV       A,R6
        ORL       A,?V0
        MOV       ?V0,A
        MOV       A,R7
        ORL       A,?V1
        MOV       ?V1,A
// 3465     j<<= 1;
??bdb_crcReflect_2:
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3466   }
        MOV       A,R1
        CLR       C
        RRC       A
        MOV       R1,A
        MOV       A,R0
        RRC       A
        MOV       R0,A
??bdb_crcReflect_0:
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_crcReflect_1
// 3467   return (crcout);
        MOV       R2,?V0
        MOV       R3,?V1
        LJMP      ??Subroutine49_0 & 0xFFFF
// 3468 }
          CFI EndBlock cfiBlock318
// 3469 
// 3470 
// 3471 /******************************************************************************
// 3472  * @fn          bdb_crcBitByBitFast
// 3473  *
// 3474  * @brief
// 3475  *
// 3476  * @param       p -
// 3477  * @param       len -
// 3478  * @param       crcinit_direct -
// 3479  * @param       crcinit_nondirect -
// 3480  *
// 3481  * @return      crc
// 3482  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3483 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect)
bdb_crcBitByBitFast:
          CFI Block cfiBlock319 Using cfiCommon0
          CFI Function bdb_crcBitByBitFast
        CODE
// 3484 {
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3485   // fast bit by bit algorithm without augmented zero bytes.
// 3486   // does not use lookup table, suited for polynom orders between 1...32.
// 3487 
// 3488   uint16 i, j, c, bit;
// 3489   uint16 crc = crcinit_direct;
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3490 
// 3491   for (i=0; i<len; i++) {
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
        SJMP      ??bdb_crcBitByBitFast_0
// 3492 
// 3493     c = (uint16)*p++;
??bdb_crcBitByBitFast_1:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
// 3494     c = bdb_crcReflect(c, 8);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x8
        MOV       R5,#0x0
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
// 3495 
// 3496     for (j=0x80; j; j>>=1) {
        MOV       R0,#-0x80
// 3497 
// 3498       bit = crc & CRC_HIGHBIT;
??bdb_crcBitByBitFast_2:
        MOV       A,R7
        ANL       A,#0x80
        MOV       R5,A
// 3499       crc<<= 1;
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3500       if (c & j) bit^= CRC_HIGHBIT;
        MOV       A,R2
        ANL       A,R0
        JZ        ??bdb_crcBitByBitFast_3
        MOV       A,#-0x80
        XRL       A,R5
        MOV       R5,A
// 3501       if (bit) crc^= CRC_POLYNOM;
??bdb_crcBitByBitFast_3:
        MOV       A,R5
        JZ        ??bdb_crcBitByBitFast_4
        MOV       A,#0x21
        XRL       A,R6
        MOV       R6,A
        MOV       A,#0x10
        XRL       A,R7
        MOV       R7,A
// 3502     }
??bdb_crcBitByBitFast_4:
        CLR       C
        MOV       A,R0
        RRC       A
        MOV       R0,A
        JNZ       ??bdb_crcBitByBitFast_2
// 3503   }
        INC       ?V0
        MOV       A,?V0
        JNZ       ??bdb_crcBitByBitFast_0
        INC       ?V1
??bdb_crcBitByBitFast_0:
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?UL_GT
        JC        ??bdb_crcBitByBitFast_1
// 3504 
// 3505   crc=bdb_crcReflect(crc, CRC_ORDER);
// 3506   crc^= CRC_XOR;
// 3507 
// 3508   return(crc);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV       A,R2
        CPL       A
        MOV       R2,A
        MOV       A,R3
        CPL       A
        MOV       R3,A
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
// 3509 }
          CFI EndBlock cfiBlock319

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbAttributes>`:
        DATA32
        DD 134213632
        DD 2048
        DATA16
        DW 65535
        DATA8
        DB 0
        DB 0
        DB 7
        DB 4
        DB 0
        DB 0
        DB 15
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for vDoPrimaryScan>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBdbInstallCodeCRC>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a98:
        DD 15000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterSimpleDescriptor::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterSimpleDescriptor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_addInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_addInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterTCLinkKeyExchangeProcessCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setTCRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setTCRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCAddJoiningDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCAddJoiningDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCProcessJoiningList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCProcessJoiningList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCjoiningDeviceComplete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCjoiningDeviceComplete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCJoiningDeviceFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCJoiningDeviceFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setJoinUsesInstallCodeKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setJoinUsesInstallCodeKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StartCommissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StartCommissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NotifyCommissioningModeStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NotifyCommissioningModeStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setFN::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setFN

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_resetLocalAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_resetLocalAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_parentLost::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_parentLost

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NetworkRestoredResumeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NetworkRestoredResumeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_reportCommissioningState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_reportCommissioningState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkFormationAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkFormationAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_isDeviceNonFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_isDeviceNonFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_doTrustCenterRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_doTrustCenterRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_rejoinNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_rejoinNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannelAttribute::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannelAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkJoiningFormation::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkJoiningFormation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_startResumeCommissioningProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_startResumeCommissioningProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessNodeDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessNodeDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_touchlinkSendFNReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_touchlinkSendFNReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeIsOnANetwork::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeIsOnANetwork

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setCommissioningGroupID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setCommissioningGroupID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CreateRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CreateRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_AddRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_AddRespondentNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclRespondentListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclRespondentListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCommissioningStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCommissioningStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ClearNetworkParams::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ClearNetworkParams

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getZCLFrameCounter::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getZCLFrameCounter

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GenerateInstallCodeCRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GenerateInstallCodeCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_calculateCCITT_CRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_calculateCCITT_CRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcReflect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcReflect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcBitByBitFast::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcBitByBitFast

        END
// 
// 5 532 bytes in segment BANKED_CODE
//   258 bytes in segment BANK_RELAYS
//    37 bytes in segment XDATA_I
//    37 bytes in segment XDATA_ID
//    20 bytes in segment XDATA_ROM_C
//    26 bytes in segment XDATA_Z
// 
//   295 bytes of CODE     memory
//     0 bytes of CONST    memory (+ 20 bytes shared)
// 5 532 bytes of HUGECODE memory
//    63 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
