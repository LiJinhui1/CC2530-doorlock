###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Nov/2021  10:55:07
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWCCB6.tmp
#        (F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\zcl\zcl.c
#        -D ZIGBEEPRO -D INTER_PAN -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D
#        HAL_UART_ISR_RX_MAX=100 -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG
#        -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D ZCL_REPORT_CONFIGURING_DEVICE -D
#        ZCL_REPORT_DESTINATION_DEVICE -lC
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\List\zcl.lst
#    Object file        =  
#        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\CoordinatorEB\Obj\zcl.r51
#
###############################################################################

F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          #include "APS.h"
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52             
     53          #ifdef BDB_REPORTING
     54            #include "bdb_Reporting.h"
     55          #endif
     56          #include "bdb_interface.h"
     57          
     58          #include "zcl_green_power.h"
     59          
     60             
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          /*** Frame Control ***/
     65          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     66          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     67          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     68          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     69          
     70          /*** Attribute Access Control ***/
     71          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     72          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     73          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     74          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     75          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     76          #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
     77          
     78          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     79          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     80          
     81          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     82                                                  (zclHdr).fc.manuSpecific == 0          && \
     83                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     84          
     85          // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
     86          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     87                                                  (cmd) == ZCL_CMD_WRITE                  || \
     88                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     89                                                  (cmd) == ZCL_CMD_WRITE_NO_RSP           || \
     90                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     91                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     92                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     93                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     94                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     95                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     96                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     97          #define  ZCL_VALID_MIN_HEADER_LEN  3
     98          
     99          /*********************************************************************
    100           * CONSTANTS
    101           */
    102          
    103          /*********************************************************************
    104           * TYPEDEFS
    105           */
    106          typedef struct zclLibPlugin
    107          {
    108            struct zclLibPlugin *next;
    109            uint16              startClusterID;    // starting cluster ID
    110            uint16              endClusterID;      // ending cluster ID
    111            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    112          } zclLibPlugin_t;
    113          
    114          // Command record list
    115          typedef struct zclCmdRecsList
    116          {
    117            struct zclCmdRecsList *pNext;
    118            uint8                 endpoint;
    119            uint8                 numCommands;
    120            CONST zclCommandRec_t *pCmdRecs;
    121          } zclCmdRecsList_t;
    122          
    123          
    124          // Cluster option list item
    125          typedef struct zclClusterOptionList
    126          {
    127            struct zclClusterOptionList *next;
    128            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    129            uint8                       numOptions; // Number of the following records
    130            zclOptionRec_t              *options;   // option records
    131          } zclClusterOptionList;
    132          
    133          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    134          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    135          
    136          typedef struct
    137          {
    138            zclParseInProfileCmd_t   pfnParseInProfile;
    139            zclProcessInProfileCmd_t pfnProcessInProfile;
    140          } zclCmdItems_t;
    141          
    142          
    143          // List record for external handler for unhandled ZCL Foundation commands/rsps
    144          typedef struct zclExternalFoundationHandlerList
    145          {
    146              struct zclExternalFoundationHandlerList *next;
    147              uint8 zcl_ExternalTaskID;
    148              uint8 zcl_ExternalEndPoint;
    149          } zclExternalFoundationHandlerList;
    150          
    151          
    152          /*********************************************************************
    153           * GLOBAL VARIABLES
    154           */
    155          
    156          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          #endif
    159          
    160          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          // ZCL Sequence number
    164          //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 zcl_InSeqNum = 0x00;
   \                     zcl_InSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zcl_radius = AF_DEFAULT_RADIUS;
   \                     zcl_radius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_radius>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          
    171          /*********************************************************************
    172           * EXTERNAL VARIABLES
    173           */
    174          
    175          /*********************************************************************
    176           * EXTERNAL FUNCTIONS
    177           */
    178          
    179          /*********************************************************************
    180           * LOCAL VARIABLES
    181           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    183          
    184          #if defined ( ZCL_DISCOVER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
   \                     gpCmdList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    186          #endif
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    190          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    192          
    193          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    195          #endif
    196          
    197          /*********************************************************************
    198           * LOCAL FUNCTIONS
    199           */
    200          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    201          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    202          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    203          
    204          #if !defined ( ZCL_STANDALONE )
    205          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    206          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    207          #endif // !defined ( ZCL_STANDALONE )
    208          
    209          #if defined ( ZCL_DISCOVER )
    210            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    211          #endif
    212          
    213          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    214          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    215          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    216          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    217          
    218          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    219          
    220          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    221          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    222          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    223          #endif // ZCL_READ || ZCL_WRITE
    224          
    225          #ifdef ZCL_READ
    226          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    227          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    228          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    229                                                   uint8 *pAttrData, uint16 *pDataLen );
    230          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    231          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    232          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    233          #endif // ZCL_READ
    234          
    235          #ifdef ZCL_WRITE
    236          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    237                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    238          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    239                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    240          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    241          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    242          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    243          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    244          #endif // ZCL_WRITE
    245          
    246          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    247          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    248          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    249          #endif
    250          
    251          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    252          
    253          #ifdef ZCL_DISCOVER
    254          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    255          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    256          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    257          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    258          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    259          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    260          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    261          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    262          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    263          #endif // ZCL_DISCOVER
    264          
    265          /*********************************************************************
    266           * Parse Profile Command Function Table
    267           */
    268          

   \                                 In  segment CODE_C, align 1
    269          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW `??zclParseInReadCmd::?relay`
   \   000002   ....         DW `??zclProcessInReadCmd::?relay`
   \   000004   ....         DW `??zclParseInReadRspCmd::?relay`
   \   000006   ....         DW `??zcl_HandleExternal::?relay`
   \   000008   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000A   ....         DW `??zclProcessInWriteCmd::?relay`
   \   00000C   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000E   ....         DW `??zclProcessInWriteUndividedCmd::?relay`
   \   000010   ....         DW `??zclParseInWriteRspCmd::?relay`
   \   000012   ....         DW `??zcl_HandleExternal::?relay`
   \   000014   ....         DW `??zclParseInWriteCmd::?relay`
   \   000016   ....         DW `??zclProcessInWriteCmd::?relay`
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   ....         DW `??zclParseInConfigReportRspCmd::?relay`
   \   00001E   ....         DW `??zcl_HandleExternal::?relay`
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   ....         DW `??zclParseInReadReportCfgRspCmd::?relay`
   \   000026   ....         DW `??zcl_HandleExternal::?relay`
   \   000028   ....         DW `??zclParseInReportCmd::?relay`
   \   00002A   ....         DW `??zcl_HandleExternal::?relay`
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000032   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000034   ....         DW `??zclParseInDiscAttrsRspCmd::?relay`
   \   000036   ....         DW `??zcl_HandleExternal::?relay`
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   000046   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000048   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   00004A   ....         DW `??zcl_HandleExternal::?relay`
   \   00004C   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   00004E   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000050   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   000052   ....         DW `??zcl_HandleExternal::?relay`
   \   000054   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000056   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000058   ....         DW `??zclParseInDiscAttrsExtRspCmd::?relay`
   \   00005A   ....         DW `??zcl_HandleExternal::?relay`
    270          {
    271          #ifdef ZCL_READ
    272            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    273            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    274          #else
    275            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    276            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    277          #endif // ZCL_READ
    278          
    279          #ifdef ZCL_WRITE
    280            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    281            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    282            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    283            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    284          #else
    285            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    286            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    287            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    289          #endif // ZCL_WRITE
    290          
    291          #ifdef ZCL_REPORTING_DEVICE
    292              /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    293          #else
    294              /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    295          #endif
    296          
    297          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    298              /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    299          #else
    300              /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    301          #endif
    302          
    303          #ifdef ZCL_REPORTING_DEVICE
    304              /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    305          #else
    306              /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    307          #endif
    308          
    309          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    310              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    311          #else
    312              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    313          #endif
    314          
    315          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    316              /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    317          #else
    318              /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    319          #endif
    320          
    321            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    322          
    323          #ifdef ZCL_DISCOVER
    324            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    325            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    326            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    327            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    328            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    329            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    330            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    331            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    332            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    333            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    334            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    335          #else
    336            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    337            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    338            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    339            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    340            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    341            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    342            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    343            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    344            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    345            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    346            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    347          #endif // ZCL_DISCOVER
    348          };
    349          
    350          /*********************************************************************
    351           * PUBLIC FUNCTIONS
    352           *********************************************************************/
    353          
    354          #if !defined ( ZCL_STANDALONE )
    355          /*********************************************************************
    356           * @fn          zcl_Init
    357           *
    358           * @brief       Initialization function for the zcl layer.
    359           *
    360           * @param       task_id - ZCL task id
    361           *
    362           * @return      none
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    365          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    366            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    367          }
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    368          #endif
    369          
    370          #if !defined ( ZCL_STANDALONE )
    371          /*********************************************************************
    372           * @fn          zcl_event_loop
    373           *
    374           * @brief       Event Loop Processor for zcl.
    375           *
    376           * @param       task_id - task id
    377           * @param       events - event bitmap
    378           *
    379           * @return      unprocessed events
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    383            uint8 *msgPtr;
    384          
    385            (void)task_id;  // Intentionally unreferenced parameter
    386          
    387            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV       A,R3
   \   00000A   5480         ANL       A,#0x80
   \   00000C   6054         JZ        ??zcl_event_loop_0
    388            {
    389              msgPtr = osal_msg_receive( zcl_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800E         SJMP      ??zcl_event_loop_1
    390              while ( msgPtr != NULL )
    391              {
    392                uint8 dealloc = TRUE;
    393          
    394                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    395                {
    396                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000010                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000010   EE           MOV       A,R6
   \   000011   FA           MOV       R2,A
   \   000012   EF           MOV       A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
    397                }
    398                else if ( *msgPtr == ZDO_STATE_CHANGE )
    399                {
    400                  // ignore ZDO_STATE_CHANGE in zcl
    401                }
    402                else
    403                {
    404                  uint8 taskID;
    405                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
    406          
    407                  if ( taskID != TASK_NO_TASK )
    408                  {
    409                    // send it to another task to process.
    410                    osal_msg_send( taskID, msgPtr );
    411                    dealloc = FALSE;
    412                  }
    413                }
    414          
    415                // Release the memory
    416                if ( dealloc )
    417                {
    418                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   EE           MOV       A,R6
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    419                }
    420          
    421                // Next
    422                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   90....       MOV       DPTR,#zcl_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV       ?V2,R2
   \   000028   8B..         MOV       ?V3,R3
   \   00002A   AE..         MOV       R6,?V2
   \   00002C   AF..         MOV       R7,?V3
   \   00002E   EE           MOV       A,R6
   \   00002F   4F           ORL       A,R7
   \   000030   6027         JZ        ??zcl_event_loop_4
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   741A         MOV       A,#0x1a
   \   00003A   68           XRL       A,R0
   \   00003B   60D3         JZ        ??zcl_event_loop_2
   \   00003D   74D1         MOV       A,#-0x2f
   \   00003F   68           XRL       A,R0
   \   000040   60D5         JZ        ??zcl_event_loop_3
   \   000042                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000042   EE           MOV       A,R6
   \   000043   FA           MOV       R2,A
   \   000044   EF           MOV       A,R7
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000049   E9           MOV       A,R1
   \   00004A   F9           MOV       R1,A
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   69           XRL       A,R1
   \   00004E   60C7         JZ        ??zcl_event_loop_3
   \   000050                ; Setup parameters for call to function osal_msg_send
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000057   80C5         SJMP      ??zcl_event_loop_1
    423              }
    424          
    425              // return unprocessed events
    426              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   000059   AA..         MOV       R2,?V0
   \   00005B   E5..         MOV       A,?V1
   \   00005D   6480         XRL       A,#0x80
   \   00005F   FB           MOV       R3,A
   \   000060   8004         SJMP      ??zcl_event_loop_5
    427            }
    428          
    429          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    430            if ( events & ZCL_DATABUF_SEND )
    431            {
    432              gpNotificationMsg_t *gpNotification = NULL;
    433              gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    434              gpd_ID_t gpd_ID;
    435              uint8 *pgpdid;
    436              uint8 entry[PROXY_TBL_ENTRY_LEN];
    437              uint8 appId;
    438              uint8 nwkSeqNum;
    439              uint8 apsSecNum;
    440              uint16 nwkAddr;
    441              
    442              gpNotification = gp_GetHeadNotificationMsg( );
    443              
    444              if ( gpNotification == NULL )
    445              {
    446                return 0;
    447              }
    448              
    449              pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
    450              appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
    451              
    452              // To save the NIB nwk sequense number and use the GP alias nwk sequence number
    453              // for the GP notification
    454              nwkSeqNum = _NIB.SequenceNum;
    455              _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
    456              
    457              // To save the NIB nwk address and use the GP alias nwk address for the GP notification
    458              nwkAddr = _NIB.nwkDevAddress;
    459              
    460              if( appId == GP_OPT_APP_ID_GPD )
    461              {
    462                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
    463                
    464                osal_memcpy( &_NIB.nwkDevAddress, pgpdid, sizeof(uint16) );
    465                gpd_ID.AppID = GP_OPT_APP_ID_GPD;
    466                osal_memcpy( &gpd_ID.GPDId.SrcID, pgpdid, sizeof( uint32 ) );
    467              }
    468              else if( appId == GP_OPT_APP_ID_IEEE )
    469              {
    470                pgpdid = pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN;
    471                
    472                osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
    473                
    474                gpd_ID.AppID = GP_OPT_APP_ID_IEEE;
    475          
    476                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
    477                osal_memcpy( gpd_ID.GPDId.GPDExtAddr, pgpdid, Z_EXTADDR_LEN );
    478              }
    479              
    480              gp_getProxyTableByGpId(&gpd_ID, entry, NULL);
    481          
    482              if ( PROXY_TBL_GET_ASSIGNED_ALIAS( entry[PROXY_TBL_ENTRY_OPT + 1] ) )
    483              {
    484                _NIB.nwkDevAddress = 0;
    485                osal_memcpy( (uint8*)&_NIB.nwkDevAddress, &entry[PROXY_TBL_ENTRY_ALIAS], sizeof(uint16));
    486              }
    487              
    488              // save aps sequence number
    489              apsSecNum = APS_Counter;
    490              APS_Counter = pCmdPayloadMsgCurr->secNum;
    491              
    492              // Set nwk radius for zcl frame
    493              if ( entry[PROXY_TBL_ENTRY_GRP_RAD] != 0xFF)
    494              {
    495                zcl_radius =  entry[PROXY_TBL_ENTRY_GRP_RAD];
    496              }
    497              
    498              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
    499                                    COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    500                                    TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
    501              
    502              // restore nwk radius
    503              zcl_radius = AF_DEFAULT_RADIUS;
    504              
    505              // restore aps sequence number
    506              APS_Counter = apsSecNum;
    507               
    508              // Restore the NIB nwk sequence number
    509              _NIB.SequenceNum = nwkSeqNum;
    510              
    511              // Restore the NIB nwk address
    512              _NIB.nwkDevAddress = nwkAddr;
    513              
    514              gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
    515              
    516              if ( gp_GetHeadNotificationMsg ( ) != NULL )
    517              {
    518                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
    519              }
    520            }
    521          #endif
    522          
    523            // Discard unknown events
    524            return 0;
   \                     ??zcl_event_loop_0:
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   000066   02....       LJMP      ??Subroutine212_0 & 0xFFFF
    525          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    526          #endif
    527          
    528          #if !defined ( ZCL_STANDALONE )
    529          /*********************************************************************
    530           * @fn      zcl_registerForMsg
    531           *
    532           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    533           *          messages that aren't processed to one task (if a task is
    534           *          registered).
    535           *
    536           * @param   taskId - task Id of the Application where commands will be sent to
    537           *
    538           * @return  TRUE if task registeration successful, FALSE otherwise
    539           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    541          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    542            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
    543          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    544          
    545          /*********************************************************************
    546           * @fn      zcl_registerForMsgExt
    547           *
    548           * @brief   This function enables a Task to register to recieve all
    549           *          incoming Foundation Command/Response messages, for a particular
    550           *          End Point, that aren't processed by ZCL.
    551           *
    552           *          NOTE: Any Task registered for a unique end point will take
    553           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    554           *          value.  ie. If task A registers for End Point 1, task B registers
    555           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    556           *          sent to Task A and NOT Task B.
    557           *
    558           * @param   taskId - task Id of the Application where commands will be sent to
    559           * @param   endPointId - end point Id of interest
    560           *
    561           * @return  TRUE if task registeration successful, FALSE otherwise
    562           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    563          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    564          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    565            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   02....       LJMP      ?Subroutine2 & 0xFFFF
    566          }
    567          
    568          /*********************************************************************
    569           * @fn      zcl_addExternalFoundationHandler
    570           *
    571           * @brief   This function adds a record to the internal list of external
    572           *          handlers of unhandled incoming Foundation Command/Response messages.
    573           *
    574           * @param   taskId - task Id of the Application where commands will be sent to
    575           * @param   endPointId - end point Id of interest
    576           *
    577           * @return  TRUE if task registeration successful, FALSE otherwise
    578           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    581            zclExternalFoundationHandlerList *pNewItem;
    582            zclExternalFoundationHandlerList *pLoop;
    583            zclExternalFoundationHandlerList *pLoopPrev;
    584          
    585            // Fill in the new endpoint registrant list
    586            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     ??Subroutine245_0 & 0xFFFF
    587            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_514:
   \   000010   6035         JZ        ??zcl_addExternalFoundationHandler_0
    588            {
    589              return ( false );
    590            }
    591          
    592            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   000012   EF           MOV       A,R7
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    593            pNewItem->zcl_ExternalTaskID = taskId;
   \   00001B   EE           MOV       A,R6
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   12....       LCALL     ?Subroutine40 & 0xFFFF
    594            pNewItem->next = NULL;
   \                     ??CrossCallReturnLabel_49:
   \   000025   F0           MOVX      @DPTR,A
    595          
    596            // Add to the list
    597            if ( externalEndPointHandlerList == NULL )
   \   000026   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000029   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   00002C   7009         JNZ       ??zcl_addExternalFoundationHandler_1
    598            {
    599              externalEndPointHandlerList = pNewItem;
   \   00002E   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000031   EA           MOV       A,R2
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   EB           MOV       A,R3
   \   000035   8047         SJMP      ??zcl_addExternalFoundationHandler_2
    600            }
    601            else
    602            {
    603              // make sure no one else tried to register for this endpoint
    604              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F9           MOV       R1,A
    605              pLoopPrev = externalEndPointHandlerList;
    606          
    607              while ( pLoop != NULL )
    608              {
    609                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
   \                     ??zcl_addExternalFoundationHandler_3:
   \   000039   8882         MOV       DPL,R0
   \   00003B   8983         MOV       DPH,R1
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6F           XRL       A,R7
   \   000042   7007         JNZ       ??zcl_addExternalFoundationHandler_4
    610                {
    611                  zcl_mem_free(pNewItem);
   \   000044                ; Setup parameters for call to function osal_mem_free
   \   000044   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    612                  return ( false );
   \                     ??zcl_addExternalFoundationHandler_0:
   \   000047   7900         MOV       R1,#0x0
   \   000049   8036         SJMP      ??zcl_addExternalFoundationHandler_5
    613                }
    614                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   00004B   E8           MOV       A,R0
   \   00004C   FC           MOV       R4,A
   \   00004D   E9           MOV       A,R1
   \   00004E   FD           MOV       R5,A
    615                pLoop = pLoop->next;
   \   00004F   8882         MOV       DPL,R0
   \   000051   8983         MOV       DPH,R1
   \   000053   12....       LCALL     ??Subroutine232_0 & 0xFFFF
    616              }
   \                     ??CrossCallReturnLabel_421:
   \   000056   70E1         JNZ       ??zcl_addExternalFoundationHandler_3
    617          
    618              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \   000058   74FF         MOV       A,#-0x1
   \   00005A   6F           XRL       A,R7
   \   00005B   700D         JNZ       ??zcl_addExternalFoundationHandler_6
    619              {
    620                // put new registration at the end of the list
    621                pLoopPrev->next = pNewItem;
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   EA           MOV       A,R2
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   EB           MOV       A,R3
   \   000065   12....       LCALL     ?Subroutine40 & 0xFFFF
    622                pNewItem->next = NULL;
    623              }
   \                     ??CrossCallReturnLabel_50:
   \   000068   8014         SJMP      ??zcl_addExternalFoundationHandler_2
    624              else
    625              {
    626                // put new registration at the front of the list
    627                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_6:
   \   00006A   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00006D   12....       LCALL     ??Subroutine246_0 & 0xFFFF
    628                externalEndPointHandlerList = pNewItem;
   \                     ??CrossCallReturnLabel_516:
   \   000070   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000073   12....       LCALL     ??Subroutine264_0 & 0xFFFF
    629                pNewItem->next = temp;
   \                     ??CrossCallReturnLabel_610:
   \   000076   8A82         MOV       DPL,R2
   \   000078   8B83         MOV       DPH,R3
   \   00007A   E8           MOV       A,R0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E9           MOV       A,R1
   \                     ??zcl_addExternalFoundationHandler_2:
   \   00007E   F0           MOVX      @DPTR,A
    630              }
    631            }
    632          
    633            return ( true );
   \   00007F   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000081   02....       LJMP      ?Subroutine3 & 0xFFFF
    634          
    635          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   E4           CLR       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine205:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    636          
    637          /*********************************************************************
    638           * @fn      zcl_getExternalFoundationHandler
    639           *
    640           * @brief   This function retrieves the Task ID of the task registered
    641           *          to received unhandled incoming Foundation Command/Response messages
    642           *          for a particular End Point ID.
    643           *
    644           * @param   pInMsg - recevied ZCL command
    645           *
    646           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    647           *          TASK_NO_TASK.
    648           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    649          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    650          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    651            zclExternalFoundationHandlerList *pLoop;
    652            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
    653          
    654            // make sure no one else tried to register for this endpoint
    655            pLoop = externalEndPointHandlerList;
   \   00000D   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000010   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    656          
    657            while ( pLoop != NULL )
    658            {
    659              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    660                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    661              {
    662                return ( pLoop->zcl_ExternalTaskID );
    663              }
    664              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000012   8882         MOV       DPL,R0
   \   000014   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000016   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000019   601C         JZ        ??zcl_getExternalFoundationHandler_2
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   EA           MOV       A,R2
   \   000025   6B           XRL       A,R3
   \   000026   6005         JZ        ??zcl_getExternalFoundationHandler_3
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   6B           XRL       A,R3
   \   00002B   70E5         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    665            }
    666          
    667            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   000037   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   000039   02....       LJMP      ?Subroutine0 & 0xFFFF
    668          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine209:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    669          #endif
    670          
    671          #if !defined ( ZCL_STANDALONE )
    672          /*********************************************************************
    673           * @fn      zcl_HandleExternal
    674           *
    675           * @brief
    676           *
    677           * @param   pInMsg - incoming message to process
    678           *
    679           * @return  TRUE
    680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    681          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    683            zclIncomingMsg_t *pCmd;
    684            uint8 taskID;
    685          
    686            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000010   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000013   E9           MOV       A,R1
   \   000014   F5..         MOV       ?V0,A
    687          
    688            if ( taskID == TASK_NO_TASK )
   \   000016   74FF         MOV       A,#-0x1
   \   000018   69           XRL       A,R1
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    689            {
    690              return ( TRUE );
    691            }
    692          
    693            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   00001E                ; Setup parameters for call to function osal_msg_allocate
   \   00001E   7A19         MOV       R2,#0x19
   \   000020   7B00         MOV       R3,#0x0
   \   000022   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    694            if ( pCmd != NULL )
   \   000025   EA           MOV       A,R2
   \   000026   4B           ORL       A,R3
   \   000027   6079         JZ        ??zcl_HandleExternal_0
    695            {
    696              // fill in the message
    697              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   7434         MOV       A,#0x34
   \   00002F   12....       LCALL     ?Subroutine170 & 0xFFFF
    698              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_412:
   \   000032   A3           INC       DPTR
   \   000033   EA           MOV       A,R2
   \   000034   2402         ADD       A,#0x2
   \   000036   FC           MOV       R4,A
   \   000037   E4           CLR       A
   \   000038   3B           ADDC      A,R3
   \   000039   FD           MOV       R5,A
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    699              pCmd->clusterId = pInMsg->msg->clusterId;
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000046   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   12....       LCALL     ?Subroutine42 & 0xFFFF
    700              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_51:
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   EA           MOV       A,R2
   \   00005F   240A         ADD       A,#0xa
   \   000061   FC           MOV       R4,A
   \   000062   E4           CLR       A
   \   000063   3B           ADDC      A,R3
   \   000064   FD           MOV       R5,A
   \   000065   740C         MOV       A,#0xc
   \   000067   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    701              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000071   C0E0         PUSH      A
   \   000073   EA           MOV       A,R2
   \   000074   2416         ADD       A,#0x16
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   3B           ADDC      A,R3
   \   00007A   F583         MOV       DPH,A
   \   00007C   D0E0         POP       A
   \   00007E   F0           MOVX      @DPTR,A
    702              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00007F   EE           MOV       A,R6
   \   000080   240C         ADD       A,#0xc
   \   000082   F8           MOV       R0,A
   \   000083   E4           CLR       A
   \   000084   3F           ADDC      A,R7
   \   000085   F9           MOV       R1,A
   \   000086   8882         MOV       DPL,R0
   \   000088   F583         MOV       DPH,A
   \   00008A   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   00008D   EA           MOV       A,R2
   \   00008E   2417         ADD       A,#0x17
   \   000090   F582         MOV       DPL,A
   \   000092   E4           CLR       A
   \   000093   3B           ADDC      A,R3
   \   000094   F583         MOV       DPH,A
   \   000096   12....       LCALL     ?Subroutine42 & 0xFFFF
    703              
    704          #ifdef BDB_REPORTING
    705              if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
    706              {
    707          //      bdb_ProcessInConfigReportCmd(pCmd);
    708                osal_msg_deallocate((uint8*)pCmd);
    709                return TRUE;          
    710              }
    711              if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
    712              {
    713                bdb_ProcessInReadReportCfgCmd(pCmd);
    714                osal_msg_deallocate((uint8*)pCmd);
    715                return TRUE;
    716              }
    717          #endif
    718              // Application will free the attrCmd buffer
    719              pInMsg->attrCmd = NULL;
   \                     ??CrossCallReturnLabel_52:
   \   000099   E4           CLR       A
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   F0           MOVX      @DPTR,A
    720          
    721              /* send message through task message */
    722              osal_msg_send( taskID, (uint8 *)pCmd );
   \   00009D                ; Setup parameters for call to function osal_msg_send
   \   00009D   A9..         MOV       R1,?V0
   \   00009F   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    723            }
    724          
    725            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   0000A2   7901         MOV       R1,#0x1
   \   0000A4   02....       LJMP      ??Subroutine212_0 & 0xFFFF
    726          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   EC           MOV       A,R4
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   ED           MOV       A,R5
   \   000004   F0           MOVX      @DPTR,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   12....       LCALL     ?Subroutine210 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine210:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL     ??Subroutine275_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_699:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine250_0
   \   000002                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine251_0
   \   000002                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine275_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    727          #endif
    728          
    729          
    730          /*********************************************************************
    731           * @fn          zcl_getRawAFMsg
    732           *
    733           * @brief       Call to get original unprocessed AF message
    734           *              (not parsed by ZCL).
    735           *
    736           *   NOTE:  This function can only be called during a ZCL callback function
    737           *          and the calling function must NOT change any data in the message.
    738           *
    739           * @param       none
    740           *
    741           * @return      pointer to original AF message, NULL if not processing
    742           *              AF message.
    743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    744          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    745          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    746            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   00000A   02....       LJMP      ?Subroutine0 & 0xFFFF
    747          }
    748          
    749          /*********************************************************************
    750           * @fn          zcl_getParsedTransSeqNum
    751           *
    752           * @brief       Call to the get the transaction sequence number from
    753           *              the incoming message.
    754           *
    755           *   NOTE:  This function can only be called during a ZCL callback function
    756           *          and the calling function must NOT change any data in the message.
    757           *
    758           * @param       none
    759           *
    760           * @return      transaction sequence number.
    761           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    762          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    763          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    764            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF
    765          }
    766          
    767          /*********************************************************************
    768           * @fn          zcl_registerPlugin
    769           *
    770           * @brief       Add a Cluster Library handler
    771           *
    772           * @param       startClusterID - starting cluster ID
    773           * @param       endClusterID - ending cluster ID
    774           * @param       pfnHdlr - function pointer to incoming message handler
    775           *
    776           * @return      ZSuccess if OK
    777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    778          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    779                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    781            zclLibPlugin_t *pNewItem;
    782            zclLibPlugin_t *pLoop;
    783          
    784            // Fill in the new profile list
    785            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   12....       LCALL     ??Subroutine211_0 & 0xFFFF
    786            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_342:
   \   000012   7004         JNZ       ??zcl_registerPlugin_0
    787            {
    788              return (ZMemError);
   \   000014   7910         MOV       R1,#0x10
   \   000016   803F         SJMP      ??CrossCallReturnLabel_29
    789            }
    790          
    791            // Fill in the plugin record.
    792            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000018   12....       LCALL     ?Subroutine30 & 0xFFFF
    793            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_27:
   \   00001B   A3           INC       DPTR
   \   00001C   E5..         MOV       A,?V1
   \   00001E   12....       LCALL     ?Subroutine37 & 0xFFFF
    794            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_44:
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   EE           MOV       A,R6
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   EF           MOV       A,R7
   \   000028   F0           MOVX      @DPTR,A
    795            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   000029   740C         MOV       A,#0xc
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ??Subroutine263_0 & 0xFFFF
    796          
    797            // Find spot in list
    798            if (  plugins == NULL )
   \                     ??CrossCallReturnLabel_620:
   \   000038   90....       MOV       DPTR,#plugins
   \   00003B   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   00003E   90....       MOV       DPTR,#plugins
   \   000041   6011         JZ        ??zcl_registerPlugin_1
    799            {
    800              plugins = pNewItem;
    801            }
    802            else
    803            {
    804              // Look for end of list
    805              pLoop = plugins;
   \   000043   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000046   8003         SJMP      ??zcl_registerPlugin_2
    806              while ( pLoop->next != NULL )
    807              {
    808                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   000048   EA           MOV       A,R2
   \   000049   FC           MOV       R4,A
   \   00004A   EB           MOV       A,R3
    809              }
   \                     ??zcl_registerPlugin_2:
   \   00004B   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   00004E   70F8         JNZ       ??zcl_registerPlugin_3
    810          
    811              // Put new item at end of list
    812              pLoop->next = pNewItem;
   \   000050   8C82         MOV       DPL,R4
   \   000052   8D83         MOV       DPH,R5
    813            }
   \                     ??zcl_registerPlugin_1:
   \   000054   12....       LCALL     ?Subroutine31 & 0xFFFF
    814          
    815            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_29:
   \   000057   02....       LJMP      ??Subroutine212_0 & 0xFFFF
    816          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   A8..         MOV       R0,?V2
   \   00000B   A9..         MOV       R1,?V3
   \   00000D   EA           MOV       A,R2
   \   00000E   49           ORL       A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   00000A   A3           INC       DPTR
   \   00000B   E5..         MOV       A,?V0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   FD           MOV       R5,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine218_0
   \   000005                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   12....       LCALL     ??Subroutine275_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_698:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine264_0
   \   000002                ; // Fall through to label ??Subroutine264_0
    817          
    818          #ifdef ZCL_DISCOVER
    819          /*********************************************************************
    820           * @fn          zcl_registerCmdList
    821           *
    822           * @brief       Register a Command List with ZCL Foundation
    823           *
    824           * @param       endpoint - endpoint the attribute list belongs to
    825           * @param       newCmdList - array of command records
    826           *
    827           * @return      ZSuccess if OK
    828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    829          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
   \                     zcl_registerCmdList:
    830          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine132 & 0xFFFF
    831            zclCmdRecsList_t *pNewItem;
    832            zclCmdRecsList_t *pLoop;
    833          
    834            // Fill in the new profile list
    835            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
    836            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_340:
   \   000008   7004         JNZ       ??zcl_registerCmdList_0
    837            {
    838              return (ZMemError);
   \   00000A   7910         MOV       R1,#0x10
   \   00000C   8022         SJMP      ??CrossCallReturnLabel_30
    839            }
    840          
    841            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
   \                     ??zcl_registerCmdList_0:
   \   00000E   12....       LCALL     ?Subroutine13 & 0xFFFF
    842            pNewItem->endpoint = endpoint;
    843            pNewItem->numCommands = cmdListSize;
    844            pNewItem->pCmdRecs = newCmdList;
    845          
    846            // Find spot in list
    847            if ( gpCmdList == NULL )
   \                     ??CrossCallReturnLabel_0:
   \   000011   90....       MOV       DPTR,#gpCmdList
   \   000014   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000017   90....       MOV       DPTR,#gpCmdList
   \   00001A   6011         JZ        ??zcl_registerCmdList_1
    848            {
    849              gpCmdList = pNewItem;
    850            }
    851            else
    852            {
    853              // Look for end of list
    854              pLoop = gpCmdList;
   \   00001C   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00001F   8003         SJMP      ??zcl_registerCmdList_2
    855              while ( pLoop->pNext != NULL )
    856              {
    857                pLoop = pLoop->pNext;
   \                     ??zcl_registerCmdList_3:
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
    858              }
   \                     ??zcl_registerCmdList_2:
   \   000024   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000027   70F8         JNZ       ??zcl_registerCmdList_3
    859          
    860              // Put new item at end of list
    861              pLoop->pNext = pNewItem;
   \   000029   8C82         MOV       DPL,R4
   \   00002B   8D83         MOV       DPH,R5
    862            }
   \                     ??zcl_registerCmdList_1:
   \   00002D   12....       LCALL     ?Subroutine31 & 0xFFFF
    863          
    864            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_30:
   \   000030   02....       LJMP      ??Subroutine212_0 & 0xFFFF
    865          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   89..         MOV       ?V0,R1
   \   000002   8A..         MOV       ?V1,R2
   \   000004   EC           MOV       A,R4
   \   000005   FE           MOV       R6,A
   \   000006   ED           MOV       A,R5
   \   000007   FF           MOV       R7,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A06         MOV       R2,#0x6
   \   00000A                REQUIRE ??Subroutine211_0
   \   00000A                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E5..         MOV       A,?V1
   \   00000C   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   EE           MOV       A,R6
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EF           MOV       A,R7
   \   000016   F0           MOVX      @DPTR,A
   \   000017   22           RET
    866          #endif  // ZCL_DISCOVER
    867          
    868          /*********************************************************************
    869           * @fn          zcl_registerAttrList
    870           *
    871           * @brief       Register an Attribute List with ZCL Foundation
    872           *
    873           * @param       endpoint - endpoint the attribute list belongs to
    874           * @param       numAttr - number of attributes in list
    875           * @param       newAttrList - array of Attribute records.
    876           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    877           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    878           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    879           *
    880           * @return      ZSuccess if OK
    881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    882          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    883          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    884            zclAttrRecsList *pNewItem;
    885            zclAttrRecsList *pLoop;
    886          
    887            // Fill in the new profile list
    888            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   12....       LCALL     ??Subroutine211_0 & 0xFFFF
    889            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_343:
   \   000012   7004         JNZ       ??zcl_registerAttrList_0
    890            {
    891              return (ZMemError);
   \   000014   7910         MOV       R1,#0x10
   \   000016   803A         SJMP      ??CrossCallReturnLabel_31
    892            }
    893          
    894            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000018   12....       LCALL     ?Subroutine30 & 0xFFFF
    895            pNewItem->endpoint = endpoint;
    896            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_28:
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   12....       LCALL     ?Subroutine29 & 0xFFFF
    897            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_25:
   \   000028   E5..         MOV       A,?V1
   \   00002A   12....       LCALL     ?Subroutine29 & 0xFFFF
    898            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_26:
   \   00002D   A3           INC       DPTR
   \   00002E   EE           MOV       A,R6
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   EF           MOV       A,R7
   \   000032   F0           MOVX      @DPTR,A
    899          
    900            // Find spot in list
    901            if ( attrList == NULL )
   \   000033   90....       MOV       DPTR,#attrList
   \   000036   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000039   90....       MOV       DPTR,#attrList
   \   00003C   6011         JZ        ??zcl_registerAttrList_1
    902            {
    903              attrList = pNewItem;
    904            }
    905            else
    906            {
    907              // Look for end of list
    908              pLoop = attrList;
   \   00003E   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000041   8003         SJMP      ??zcl_registerAttrList_2
    909              while ( pLoop->next != NULL )
    910              {
    911                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   000043   EA           MOV       A,R2
   \   000044   FC           MOV       R4,A
   \   000045   EB           MOV       A,R3
    912              }
   \                     ??zcl_registerAttrList_2:
   \   000046   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000049   70F8         JNZ       ??zcl_registerAttrList_3
    913          
    914              // Put new item at end of list
    915              pLoop->next = pNewItem;
   \   00004B   8C82         MOV       DPL,R4
   \   00004D   8D83         MOV       DPH,R5
    916            }
   \                     ??zcl_registerAttrList_1:
   \   00004F   12....       LCALL     ?Subroutine31 & 0xFFFF
    917          
    918            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_31:
   \   000052   80..         SJMP      ??Subroutine212_0
    919          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET
    920          
    921          /*********************************************************************
    922           * @fn          zcl_registerClusterOptionList
    923           *
    924           * @brief       Register a Cluster Option List with ZCL Foundation
    925           *
    926           * @param       endpoint - endpoint the option list belongs to
    927           * @param       numOption - number of options in list
    928           * @param       optionList - array of cluster option records.
    929           *
    930           *              NOTE: This API should be called to enable 'Application
    931           *                    Link Key' security and/or 'APS ACK' for a specific
    932           *                    Cluster. The 'Application Link Key' is discarded
    933           *                    if security isn't enabled on the device.
    934           *                    The default behavior is 'Network Key' when security
    935           *                    is enabled and no 'APS ACK' for the ZCL messages.
    936           *
    937           * @return      ZSuccess if OK
    938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    940          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine132 & 0xFFFF
    941            zclClusterOptionList *pNewItem;
    942            zclClusterOptionList *pLoop;
    943          
    944            // Fill in the new profile list
    945            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
    946            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_341:
   \   000008   7004         JNZ       ??zcl_registerClusterOptionList_0
    947            {
    948              return (ZMemError);
   \   00000A   7910         MOV       R1,#0x10
   \   00000C   8022         SJMP      ??CrossCallReturnLabel_32
    949            }
    950          
    951            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   00000E   12....       LCALL     ?Subroutine13 & 0xFFFF
    952            pNewItem->endpoint = endpoint;
    953            pNewItem->numOptions = numOption;
    954            pNewItem->options = optionList;
    955          
    956            // Find spot in list
    957            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_1:
   \   000011   90....       MOV       DPTR,#clusterOptionList
   \   000014   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000017   90....       MOV       DPTR,#clusterOptionList
   \   00001A   6011         JZ        ??zcl_registerClusterOptionList_1
    958            {
    959              clusterOptionList = pNewItem;
    960            }
    961            else
    962            {
    963              // Look for end of list
    964              pLoop = clusterOptionList;
   \   00001C   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00001F   8003         SJMP      ??zcl_registerClusterOptionList_2
    965              while ( pLoop->next != NULL )
    966              {
    967                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
    968              }
   \                     ??zcl_registerClusterOptionList_2:
   \   000024   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000027   70F8         JNZ       ??zcl_registerClusterOptionList_3
    969          
    970              // Put new item at end of list
    971              pLoop->next = pNewItem;
   \   000029   8C82         MOV       DPL,R4
   \   00002B   8D83         MOV       DPH,R5
    972            }
   \                     ??zcl_registerClusterOptionList_1:
   \   00002D   12....       LCALL     ?Subroutine31 & 0xFFFF
    973          
    974            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_32:
   \   000030   80..         SJMP      ??Subroutine212_0
    975          }
    976          
    977          /*********************************************************************
    978           * @fn          zcl_registerValidateAttrData
    979           *
    980           * @brief       Add a validation function for attribute data
    981           *
    982           * @param       pfnValidateAttrData - function pointer to validate routine
    983           *
    984           * @return      ZSuccess if OK
    985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    986          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    987          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    988            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL     ??Subroutine264_0 & 0xFFFF
    989          
    990            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_611:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C                REQUIRE ?Subroutine0
   \   00000C                ; // Fall through to label ?Subroutine0
    991          }
    992          
    993          /*********************************************************************
    994           * @fn          zcl_registerReadWriteCB
    995           *
    996           * @brief       Register the application's callback function to read/write
    997           *              attribute data, and authorize read/write operation.
    998           *
    999           *              Note: The pfnReadWriteCB callback function is only required
   1000           *                    when the attribute data format is unknown to ZCL. The
   1001           *                    callback function gets called when the pointer 'dataPtr'
   1002           *                    to the attribute value is NULL in the attribute database
   1003           *                    registered with the ZCL.
   1004           *
   1005           *              Note: The pfnAuthorizeCB callback function is only required
   1006           *                    when the Read/Write operation on an attribute requires
   1007           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
   1008           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
   1009           *
   1010           * @param       endpoint - application's endpoint
   1011           * @param       pfnReadWriteCB - function pointer to read/write routine
   1012           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
   1013           *
   1014           * @return      ZSuccess if successful. ZFailure, otherwise.
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
   1017                                             zclAuthorizeCB_t pfnAuthorizeCB )
   1018          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1019            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8B..         MOV       ?V5,R3
   \   000012   A9..         MOV       R1,?V5
   1020          
   1021            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   49           ORL       A,R1
   \   000016   6019         JZ        ??zcl_registerReadWriteCB_0
   1022            {
   1023              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   EE           MOV       A,R6
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   EF           MOV       A,R7
   \   000023   12....       LCALL     ?Subroutine36 & 0xFFFF
   1024              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_42:
   \   000026   E5..         MOV       A,?V0
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   E5..         MOV       A,?V1
   \   00002C   F0           MOVX      @DPTR,A
   1025          
   1026              return ( ZSuccess );
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   8002         SJMP      ??zcl_registerReadWriteCB_1
   1027            }
   1028          
   1029            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   000031   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   000033   02....       LJMP      ?Subroutine4 & 0xFFFF
   1030          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1031          
   1032          /*********************************************************************
   1033           * @fn      zcl_DeviceOperational
   1034           *
   1035           * @brief   Used to see whether or not the device can send or respond
   1036           *          to application level commands.
   1037           *
   1038           * @param   srcEP - source endpoint
   1039           * @param   clusterID - cluster ID
   1040           * @param   frameType - command type
   1041           * @param   cmd - command ID
   1042           *
   1043           * @return  TRUE if device is operational, FALSE otherwise
   1044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine212_0
   \   000003                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1045          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
   1046                                              uint8 frameType, uint8 cmd, uint16 profileID )
   1047          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1048            zclAttrRec_t attrRec;
   1049            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
   1050          
   1051            (void)profileID;  // Intentionally unreferenced parameter
   1052          
   1053            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
   1054            // cannot send or respond to application level commands, other than commands
   1055            // to read or write attributes. Note that the Identify cluster cannot be
   1056            // disabled, and remains functional regardless of this setting.
   1057            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000015   EC           MOV       A,R4
   \   000016   7006         JNZ       ??zcl_DeviceOperational_0
   \   000018   ED           MOV       A,R5
   \   000019   C3           CLR       C
   \   00001A   9406         SUBB      A,#0x6
   \   00001C   404D         JC        ??zcl_DeviceOperational_1
   1058            {
   1059              return ( TRUE );
   1060            }
   1061          
   1062            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   00001E   7403         MOV       A,#0x3
   \   000020   6A           XRL       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   6047         JZ        ??zcl_DeviceOperational_1
   1063            {
   1064              return ( TRUE );
   1065            }
   1066          
   1067            // Is device enabled?
   1068            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
   1069                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000024                ; Setup parameters for call to function zclFindAttrRec
   \   000024   7401         MOV       A,#0x1
   \   000026   12....       LCALL     ?XSTACK_DISP100_8
   \   000029   88..         MOV       ?V2,R0
   \   00002B   89..         MOV       ?V3,R1
   \   00002D   78..         MOV       R0,#?V2
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   7C12         MOV       R4,#0x12
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   EE           MOV       A,R6
   \   00003B   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   601C         JZ        ??zcl_DeviceOperational_2
   1070            {
   1071          #ifdef ZCL_READ
   1072              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   000044                ; Setup parameters for call to function zclReadAttrData
   \   000044   E4           CLR       A
   \   000045   F5..         MOV       ?V2,A
   \   000047   F5..         MOV       ?V3,A
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7403         MOV       A,#0x3
   \   000050   12....       LCALL     ?XSTACK_DISP102_8
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?XSTACK_DISP101_8
   \   000058   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   1073          #endif
   1074            }
   1075          
   1076            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_2:
   \   000060   85..82       MOV       DPL,?XSP + 0
   \   000063   85..83       MOV       DPH,?XSP + 1
   \   000066   E0           MOVX      A,@DPTR
   \   000067   6401         XRL       A,#0x1
   \   000069   7004         JNZ       ??zcl_DeviceOperational_3
   \                     ??zcl_DeviceOperational_1:
   \   00006B   7901         MOV       R1,#0x1
   \   00006D   8002         SJMP      ??zcl_DeviceOperational_4
   \                     ??zcl_DeviceOperational_3:
   \   00006F   7900         MOV       R1,#0x0
   \                     ??zcl_DeviceOperational_4:
   \   000071   7409         MOV       A,#0x9
   \   000073   02....       LJMP      ?Subroutine1 & 0xFFFF
   1077          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F9           MOV       R1,A
   \   000001                REQUIRE ??Subroutine213_0
   \   000001                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
   1078          
   1079          /*********************************************************************
   1080           * @fn      zcl_SendCommand
   1081           *
   1082           * @brief   Used to send Profile and Cluster Specific Command messages.
   1083           *
   1084           *          NOTE: The calling application is responsible for incrementing
   1085           *                the Sequence Number.
   1086           *
   1087           * @param   srcEp - source endpoint
   1088           * @param   destAddr - destination address
   1089           * @param   clusterID - cluster ID
   1090           * @param   cmd - command ID
   1091           * @param   specific - whether the command is Cluster Specific
   1092           * @param   direction - client/server direction of the command
   1093           * @param   disableDefaultRsp - disable Default Response command
   1094           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1095           * @param   seqNumber - identification number for the transaction
   1096           * @param   cmdFormatLen - length of the command to be sent
   1097           * @param   cmdFormat - command to be sent
   1098           *
   1099           * @return  ZSuccess if OK
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
   1102                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
   1103                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
   1104                                     uint16 cmdFormatLen, uint8 *cmdFormat )
   1105          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V14,R2
   \   00000E   8B..         MOV       ?V15,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
   1106            endPointDesc_t *epDesc;
   1107            zclFrameHdr_t hdr;
   1108            uint8 *msgBuf;
   1109            uint16 msgLen;
   1110            uint8 *pBuf;
   1111            uint8 options;
   1112            ZStatus_t status;
   1113          
   1114            epDesc = afFindEndPointDesc( srcEP );
   \   000014                ; Setup parameters for call to function afFindEndPointDesc
   \   000014   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000017   8A..         MOV       ?V12,R2
   \   000019   8B..         MOV       ?V13,R3
   1115            if ( epDesc == NULL )
   \   00001B   EA           MOV       A,R2
   \   00001C   4B           ORL       A,R3
   \   00001D   7005         JNZ       ??zcl_SendCommand_0
   1116            {
   1117              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   00001F   7902         MOV       R1,#0x2
   \   000021   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1118            }
   1119          
   1120          #if defined ( INTER_PAN )
   1121            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   \                     ??zcl_SendCommand_0:
   \   000024                ; Setup parameters for call to function StubAPS_InterPan
   \   000024   85..82       MOV       DPL,?V14
   \   000027   85..83       MOV       DPH,?V15
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   85..82       MOV       DPL,?V14
   \   000038   85..83       MOV       DPH,?V15
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000048   6005         JZ        ??zcl_SendCommand_2
   1122            {
   1123              options = AF_TX_OPTIONS_NONE;
   \   00004A   75..00       MOV       ?V2,#0x0
   \   00004D   8030         SJMP      ??zcl_SendCommand_3
   1124            }
   1125            else
   1126          #endif
   1127            {
   1128              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_2:
   \   00004F                ; Setup parameters for call to function zclGetClusterOption
   \   00004F   AA..         MOV       R2,?V0
   \   000051   AB..         MOV       R3,?V1
   \   000053   A9..         MOV       R1,?V3
   \   000055   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000058   E9           MOV       A,R1
   \   000059   F5..         MOV       ?V2,A
   1129          
   1130          	options |= AF_ACK_REQUEST;
   \   00005B   D2E4         SETB      0xE0 /* A   */.4
   \   00005D   F5..         MOV       ?V2,A
   1131          
   1132              // The cluster might not have been defined to use security but if this message
   1133              // is in response to another message that was using APS security this message
   1134              // will be sent with APS security
   1135              if ( !( options & AF_EN_SECURITY ) )
   \   00005F   A2E6         MOV       C,0xE0 /* A   */.6
   \   000061   401C         JC        ??zcl_SendCommand_3
   1136              {
   1137                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000063   90....       MOV       DPTR,#rawAFMsg
   \   000066   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   1138          
   1139                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   \                     ??CrossCallReturnLabel_423:
   \   000069   6014         JZ        ??zcl_SendCommand_3
   \   00006B   E8           MOV       A,R0
   \   00006C   2419         ADD       A,#0x19
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   39           ADDC      A,R1
   \   000072   F583         MOV       DPH,A
   \   000074   E0           MOVX      A,@DPTR
   \   000075   6401         XRL       A,#0x1
   \   000077   7006         JNZ       ??zcl_SendCommand_3
   1140                {
   1141                  options |= AF_EN_SECURITY;
   \   000079   E5..         MOV       A,?V2
   \   00007B   D2E6         SETB      0xE0 /* A   */.6
   \   00007D   F5..         MOV       ?V2,A
   1142                }
   1143              }
   1144            }
   1145          
   1146            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_3:
   \   00007F                ; Setup parameters for call to function osal_memset
   \   00007F   7C06         MOV       R4,#0x6
   \   000081   7D00         MOV       R5,#0x0
   \   000083   7900         MOV       R1,#0x0
   \   000085   AA..         MOV       R2,?XSP + 0
   \   000087   AB..         MOV       R3,?XSP + 1
   \   000089   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1147          
   1148            // Not Profile wide command (like READ, WRITE)
   1149            if ( specific )
   \   00008C   741F         MOV       A,#0x1f
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000094   6009         JZ        ??zcl_SendCommand_4
   1150            {
   1151              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   000096   E0           MOVX      A,@DPTR
   \   000097   54FC         ANL       A,#0xfc
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   4401         ORL       A,#0x1
   \   00009D   8003         SJMP      ??zcl_SendCommand_5
   1152            }
   1153            else
   1154            {
   1155              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_4:
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   54FC         ANL       A,#0xfc
   1156            }
   \                     ??zcl_SendCommand_5:
   \   0000A2   12....       LCALL     ?Subroutine44 & 0xFFFF
   1157          
   1158            if ( ( epDesc->simpleDesc == NULL ) ||
   1159                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1160                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??CrossCallReturnLabel_55:
   \   0000A5   A3           INC       DPTR
   \   0000A6   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0000A9   602B         JZ        ??zcl_SendCommand_6
   \   0000AB   741E         MOV       A,#0x1e
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   FE           MOV       R6,A
   \   0000B2                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000B2   8882         MOV       DPL,R0
   \   0000B4   8983         MOV       DPH,R1
   \   0000B6   A3           INC       DPTR
   \   0000B7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FD           MOV       R5,A
   \   0000BC   7402         MOV       A,#0x2
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   5403         ANL       A,#0x3
   \   0000C4   FC           MOV       R4,A
   \   0000C5   AA..         MOV       R2,?V0
   \   0000C7   AB..         MOV       R3,?V1
   \   0000C9   A9..         MOV       R1,?V3
   \   0000CB   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D3   E9           MOV       A,R1
   \   0000D4   7005         JNZ       ??zcl_SendCommand_7
   1161            {
   1162              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_6:
   \   0000D6   7901         MOV       R1,#0x1
   \   0000D8   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1163            }
   \                     ??zcl_SendCommand_7:
   \   0000DB   7422         MOV       A,#0x22
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   1164          
   1165            // Fill in the Maufacturer Code
   1166            if ( manuCode != 0 )
   \                     ??CrossCallReturnLabel_424:
   \   0000E3   6012         JZ        ??CrossCallReturnLabel_528
   1167            {
   1168              hdr.fc.manuSpecific = 1;
   \   0000E5   85..82       MOV       DPL,?XSP + 0
   \   0000E8   85..83       MOV       DPH,?XSP + 1
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   4404         ORL       A,#0x4
   \   0000EE   F0           MOVX      @DPTR,A
   1169              hdr.manuCode = manuCode;
   \   0000EF   7402         MOV       A,#0x2
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   1170            }
   1171          
   1172            // Set the Command Direction
   1173            if ( direction )
   \                     ??CrossCallReturnLabel_528:
   \   0000F7   7420         MOV       A,#0x20
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0000FF   6005         JZ        ??zcl_SendCommand_8
   1174            {
   1175              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000101   E0           MOVX      A,@DPTR
   \   000102   4408         ORL       A,#0x8
   \   000104   8003         SJMP      ??zcl_SendCommand_9
   1176            }
   1177            else
   1178            {
   1179              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_8:
   \   000106   E0           MOVX      A,@DPTR
   \   000107   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_9:
   \   000109   F0           MOVX      @DPTR,A
   1180            }
   1181          
   1182            // Set the Disable Default Response field
   1183            if ( disableDefaultRsp )
   \   00010A   7421         MOV       A,#0x21
   \   00010C   12....       LCALL     ?XSTACK_DISP0_8
   \   00010F   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000112   6005         JZ        ??zcl_SendCommand_10
   1184            {
   1185              hdr.fc.disableDefaultRsp = 1;
   \   000114   E0           MOVX      A,@DPTR
   \   000115   4410         ORL       A,#0x10
   \   000117   8003         SJMP      ??zcl_SendCommand_11
   1186            }
   1187            else
   1188            {
   1189              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_10:
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_11:
   \   00011C   F0           MOVX      @DPTR,A
   1190            }
   1191          
   1192            // Fill in the Transaction Sequence Number
   1193            hdr.transSeqNum = seqNum;
   \   00011D   7424         MOV       A,#0x24
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   E0           MOVX      A,@DPTR
   \   000123   C0E0         PUSH      A
   \   000125   7404         MOV       A,#0x4
   \   000127   12....       LCALL     ?XSTACK_DISP0_8
   \   00012A   D0E0         POP       A
   \   00012C   F0           MOVX      @DPTR,A
   1194          
   1195            // Fill in the command
   1196            hdr.commandID = cmd;
   \   00012D   7405         MOV       A,#0x5
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   EE           MOV       A,R6
   \   000133   F0           MOVX      @DPTR,A
   1197          
   1198            // calculate the needed buffer size
   1199            msgLen = zclCalcHdrSize( &hdr );
   \   000134   7803         MOV       R0,#0x3
   \   000136   85..82       MOV       DPL,?XSP + 0
   \   000139   85..83       MOV       DPH,?XSP + 1
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   5404         ANL       A,#0x4
   \   00013F   6002         JZ        ??zcl_SendCommand_12
   \   000141   7805         MOV       R0,#0x5
   \                     ??zcl_SendCommand_12:
   \   000143   7425         MOV       A,#0x25
   \   000145   12....       LCALL     ?XSTACK_DISP0_8
   \   000148   E0           MOVX      A,@DPTR
   \   000149   F5..         MOV       ?V10,A
   \   00014B   A3           INC       DPTR
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   F5..         MOV       ?V11,A
   1200            msgLen += cmdFormatLen;
   \   00014F   E8           MOV       A,R0
   \   000150   25..         ADD       A,?V10
   \   000152   FE           MOV       R6,A
   \   000153   E4           CLR       A
   \   000154   35..         ADDC      A,?V11
   \   000156   FF           MOV       R7,A
   1201          
   1202            // Allocate the buffer needed
   1203            msgBuf = zcl_mem_alloc( msgLen );
   \   000157                ; Setup parameters for call to function osal_mem_alloc
   \   000157   EE           MOV       A,R6
   \   000158   FA           MOV       R2,A
   \   000159   EF           MOV       A,R7
   \   00015A   FB           MOV       R3,A
   \   00015B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00015E   8A..         MOV       ?V8,R2
   \   000160   8B..         MOV       ?V9,R3
   1204            if ( msgBuf != NULL )
   \   000162   EA           MOV       A,R2
   \   000163   4B           ORL       A,R3
   \   000164   6066         JZ        ??zcl_SendCommand_13
   1205            {
   1206              // Fill in the ZCL Header
   1207              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   000166                ; Setup parameters for call to function zclBuildHdr
   \   000166   AC..         MOV       R4,?V8
   \   000168   AD..         MOV       R5,?V9
   \   00016A   AA..         MOV       R2,?XSP + 0
   \   00016C   AB..         MOV       R3,?XSP + 1
   \   00016E   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1208          
   1209              // Fill in the command frame
   1210              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   000171                ; Setup parameters for call to function osal_memcpy
   \   000171   7427         MOV       A,#0x27
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017C   AC..         MOV       R4,?V10
   \   00017E   AD..         MOV       R5,?V11
   \   000180   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000183   12....       LCALL     ?DEALLOC_XSTACK8
   1211          
   1212              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1213                                       &APS_Counter, options, zcl_radius );
   \   000186                ; Setup parameters for call to function AF_DataRequest
   \   000186   90....       MOV       DPTR,#zcl_radius
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   F5..         MOV       ?V4,A
   \   00018C   78..         MOV       R0,#?V4
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000191   75....       MOV       ?V4,#APS_Counter & 0xff
   \   000194   75....       MOV       ?V5,#(APS_Counter >> 8) & 0xff
   \   000197   78..         MOV       R0,#?V4
   \   000199   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019C   78..         MOV       R0,#?V8
   \   00019E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A1   8E..         MOV       ?V4,R6
   \   0001A3   8F..         MOV       ?V5,R7
   \   0001A5   78..         MOV       R0,#?V4
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AA   78..         MOV       R0,#?V0
   \   0001AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AF   A9..         MOV       R1,?V2
   \   0001B1   AC..         MOV       R4,?V12
   \   0001B3   AD..         MOV       R5,?V13
   \   0001B5   AA..         MOV       R2,?V14
   \   0001B7   AB..         MOV       R3,?V15
   \   0001B9   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001BC   7409         MOV       A,#0x9
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C1   E9           MOV       A,R1
   \   0001C2   FE           MOV       R6,A
   1214              zcl_mem_free ( msgBuf );
   \   0001C3                ; Setup parameters for call to function osal_mem_free
   \   0001C3   AA..         MOV       R2,?V8
   \   0001C5   AB..         MOV       R3,?V9
   \   0001C7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001CA   8002         SJMP      ??zcl_SendCommand_14
   1215            }
   1216            else
   1217            {
   1218              status = ZMemError;
   \                     ??zcl_SendCommand_13:
   \   0001CC   7E10         MOV       R6,#0x10
   1219            }
   1220          
   1221            return ( status );
   \                     ??zcl_SendCommand_14:
   \   0001CE   EE           MOV       A,R6
   \   0001CF   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   0001D0   7406         MOV       A,#0x6
   \   0001D2   02....       LJMP      ?Subroutine5 & 0xFFFF
   1222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V12
   \   000004   85..83       MOV       DPH,?V13
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ??Subroutine275_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_696:
   \   000003   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000006   E9           MOV       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine232_0
   \   000002                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   75..00       MOV       ?V6,#0x0
   \   000006   78..         MOV       R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine248_0
   \   000001                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine255_0
   \   000003                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   7F10         MOV       R7,#0x10
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1223          
   1224          #ifdef ZCL_READ
   1225          /*********************************************************************
   1226           * @fn      zcl_SendRead
   1227           *
   1228           * @brief   Send a Read command
   1229           *
   1230           * @param   srcEP - Application's endpoint
   1231           * @param   dstAddr - destination address
   1232           * @param   clusterID - cluster ID
   1233           * @param   readCmd - read command to be sent
   1234           * @param   direction - direction of the command
   1235           * @param   seqNum - transaction sequence number
   1236           *
   1237           * @return  ZSuccess if OK
   1238           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1239          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
   1240                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1241                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1242          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine110 & 0xFFFF
   1243            uint16 dataLen;
   1244            uint8 *buf;
   1245            uint8 *pBuf;
   1246            ZStatus_t status;
   1247          
   1248            dataLen = readCmd->numAttr * 2; // Attribute ID
   \                     ??CrossCallReturnLabel_183:
   \   000017   85..82       MOV       DPL,?V4
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   25E0         ADD       A,0xE0 /* A   */
   \   00001F   F5..         MOV       ?V6,A
   \   000021   E4           CLR       A
   \   000022   33           RLC       A
   \   000023   12....       LCALL     ?Subroutine131 & 0xFFFF
   1249          
   1250            buf = zcl_mem_alloc( dataLen );
   1251            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_629:
   \   000026   7003         JNZ       $+5
   \   000028   02....       LJMP      ??zcl_SendRead_0 & 0xFFFF
   1252            {
   1253              uint8 i;
   1254          
   1255              // Load the buffer - serially
   1256              pBuf = buf;
   \   00002B   A8..         MOV       R0,?V0
   \   00002D   A9..         MOV       R1,?V1
   1257              for (i = 0; i < readCmd->numAttr; i++)
   \   00002F   7C00         MOV       R4,#0x0
   \   000031   8021         SJMP      ??zcl_SendRead_1
   1258              {
   1259                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   000033   EC           MOV       A,R4
   \   000034   25E0         ADD       A,0xE0 /* A   */
   \   000036   FA           MOV       R2,A
   \   000037   E4           CLR       A
   \   000038   33           RLC       A
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     ?Subroutine153 & 0xFFFF
   1260                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   1261              }
   \                     ??CrossCallReturnLabel_258:
   \   00003D   AA82         MOV       R2,DPL
   \   00003F   AB83         MOV       R3,DPH
   \   000041   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   000044   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000047   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   00004A   A3           INC       DPTR
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   E8           MOV       A,R0
   \   00004D   2402         ADD       A,#0x2
   \   00004F   F8           MOV       R0,A
   \   000050   5001         JNC       ??zcl_SendRead_3
   \   000052   09           INC       R1
   \                     ??zcl_SendRead_3:
   \   000053   0C           INC       R4
   \                     ??zcl_SendRead_1:
   \   000054   85..82       MOV       DPL,?V4
   \   000057   85..83       MOV       DPH,?V5
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FA           MOV       R2,A
   \   00005C   EC           MOV       A,R4
   \   00005D   C3           CLR       C
   \   00005E   9A           SUBB      A,R2
   \   00005F   40D2         JC        ??zcl_SendRead_2
   1262          
   1263              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1264                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000061                ; Setup parameters for call to function zcl_SendCommand
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   78..         MOV       R0,#?V6
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   741C         MOV       A,#0x1c
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000076   E4           CLR       A
   \   000077   F5..         MOV       ?V4,A
   \   000079   F5..         MOV       ?V5,A
   \   00007B   78..         MOV       R0,#?V4
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000080   741E         MOV       A,#0x1e
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008B   741E         MOV       A,#0x1e
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000096   75..00       MOV       ?V3,#0x0
   \   000099   78..         MOV       R0,#?V3
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009E   78..         MOV       R0,#?V3
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A9   E9           MOV       A,R1
   \   0000AA   FE           MOV       R6,A
   1265              zcl_mem_free( buf );
   \   0000AB                ; Setup parameters for call to function osal_mem_free
   \   0000AB   AA..         MOV       R2,?V0
   \   0000AD   AB..         MOV       R3,?V1
   \   0000AF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B2   8002         SJMP      ??zcl_SendRead_4
   1266            }
   1267            else
   1268            {
   1269              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000B4   7E10         MOV       R6,#0x10
   1270            }
   1271          
   1272            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000B6                REQUIRE ?Subroutine10
   \   0000B6                ; // Fall through to label ?Subroutine10
   1273          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   02....       LJMP      ??Subroutine254_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   E5..         MOV       A,?V4
   \   000002   2A           ADD       A,R2
   \   000003   F582         MOV       DPL,A
   \   000005   E5..         MOV       A,?V5
   \   000007   3B           ADDC      A,R3
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V3,A
   \   000003   78..         MOV       R0,#?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003   FD           MOV       R5,A
   \   000004   AA..         MOV       R2,?V8
   \   000006   AB..         MOV       R3,?V9
   \   000008                REQUIRE ??Subroutine223_0
   \   000008                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   A9..         MOV       R1,?V2
   \   000002                REQUIRE ??Subroutine224_0
   \   000002                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   F5..         MOV       ?V7,A
   \   000002                ; Setup parameters for call to function osal_mem_alloc
   \   000002                ; Setup parameters for call to function osal_mem_alloc
   \   000002                ; Setup parameters for call to function osal_mem_alloc
   \   000002   AA..         MOV       R2,?V6
   \   000004                REQUIRE ??Subroutine266_0
   \   000004                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine267_0
   \   000001                ; // Fall through to label ??Subroutine267_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine204:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET
   1274          
   1275          /*********************************************************************
   1276           * @fn      zcl_SendReadRsp
   1277           *
   1278           * @brief   Send a Read Response command.
   1279           *
   1280           * @param   srcEP - Application's endpoint
   1281           * @param   dstAddr - destination address
   1282           * @param   clusterID - cluster ID
   1283           * @param   readRspCmd - read response command to be sent
   1284           * @param   direction - direction of the command
   1285           * @param   seqNum - transaction sequence number
   1286           *
   1287           * @return  ZSuccess if OK
   1288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1289          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
   1290                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1291                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   8C..         MOV       ?V6,R4
   \   000012   8D..         MOV       ?V7,R5
   1293            uint8 *buf;
   1294            uint16 len = 0;
   \   000014   7E00         MOV       R6,#0x0
   \   000016   7F00         MOV       R7,#0x0
   1295            ZStatus_t status;
   1296            uint8 i;
   1297          
   1298            // calculate the size of the command
   1299            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   7418         MOV       A,#0x18
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000023   8011         SJMP      ??zcl_SendReadRsp_0
   1300            {
   1301              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1302          
   1303              len += 2 + 1; // Attribute ID + Status
   1304          
   1305              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1306              {
   1307                len++; // Attribute Data Type length
   1308          
   1309                // Attribute Data length
   1310                if ( statusRec->data != NULL )
   1311                {
   1312                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1313                }
   1314                else
   1315                {
   1316                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   000025                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000025   12....       LCALL     ?Subroutine89 & 0xFFFF
   1317                }
   \                     ??CrossCallReturnLabel_152:
   \   000028   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zcl_SendReadRsp_2:
   \   00002B   8B..         MOV       ?V1,R3
   \   00002D   EE           MOV       A,R6
   \   00002E   2A           ADD       A,R2
   \   00002F   FE           MOV       R6,A
   \   000030   EF           MOV       A,R7
   \   000031   35..         ADDC      A,?V1
   \   000033   FF           MOV       R7,A
   \                     ??zcl_SendReadRsp_3:
   \   000034   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_0:
   \   000036   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   000039   502D         JNC       ??zcl_SendReadRsp_4
   \   00003B   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   00003E   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000041   EE           MOV       A,R6
   \   000042   2403         ADD       A,#0x3
   \   000044   FE           MOV       R6,A
   \   000045   E4           CLR       A
   \   000046   3F           ADDC      A,R7
   \   000047   FF           MOV       R7,A
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   70E7         JNZ       ??zcl_SendReadRsp_3
   \   00004D   0E           INC       R6
   \   00004E   EE           MOV       A,R6
   \   00004F   7001         JNZ       ??zcl_SendReadRsp_5
   \   000051   0F           INC       R7
   \                     ??zcl_SendReadRsp_5:
   \   000052   8882         MOV       DPL,R0
   \   000054   8983         MOV       DPH,R1
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   00005D   8882         MOV       DPL,R0
   \   00005F   8983         MOV       DPH,R1
   \   000061   60C2         JZ        ??zcl_SendReadRsp_1
   \   000063                ; Setup parameters for call to function zclGetAttrDataLength
   \   000063   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   1318              }
   1319            }
   \                     ??CrossCallReturnLabel_354:
   \   000066   80C3         SJMP      ??zcl_SendReadRsp_2
   1320          
   1321            buf = zcl_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   EE           MOV       A,R6
   \   000069   FA           MOV       R2,A
   \   00006A   EF           MOV       A,R7
   \   00006B   FB           MOV       R3,A
   \   00006C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006F   8A..         MOV       ?V0,R2
   \   000071   8B..         MOV       ?V1,R3
   \   000073   8A..         MOV       ?V4,R2
   \   000075   8B..         MOV       ?V5,R3
   1322            if ( buf != NULL )
   \   000077   EA           MOV       A,R2
   \   000078   4B           ORL       A,R3
   \   000079   7003         JNZ       $+5
   \   00007B   02....       LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
   1323            {
   1324              // Load the buffer - serially
   1325              uint8 *pBuf = buf;
   1326          
   1327              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   00007E   75..00       MOV       ?V2,#0x0
   \   000081   8036         SJMP      ??zcl_SendReadRsp_7
   1328              {
   1329                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1330          
   1331                *pBuf++ = LO_UINT16( statusRec->attrID );
   1332                *pBuf++ = HI_UINT16( statusRec->attrID );
   1333                *pBuf++ = statusRec->status;
   1334          
   1335                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1336                {
   1337                  *pBuf++ = statusRec->dataType;
   1338          
   1339                  if ( statusRec->data != NULL )
   1340                  {
   1341                    // Copy attribute data to the buffer to be sent out
   1342                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1343                  }
   1344                  else
   1345                  {
   1346                    uint16 dataLen;
   1347          
   1348                    // Read attribute data directly into the buffer to be sent out
   1349                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_8:
   \   000083                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000083   A8..         MOV       R0,?XSP + 0
   \   000085   A9..         MOV       R1,?XSP + 1
   \   000087   88..         MOV       ?V10,R0
   \   000089   89..         MOV       ?V11,R1
   \   00008B   78..         MOV       R0,#?V10
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV       R0,#?V0
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   8A82         MOV       DPL,R2
   \   000097   8B83         MOV       DPH,R3
   \   000099   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00009C   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   00009F   7404         MOV       A,#0x4
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   1350                    pBuf += dataLen;
   \   0000A4   85..82       MOV       DPL,?XSP + 0
   \   0000A7   85..83       MOV       DPH,?XSP + 1
   \   0000AA   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   1351                  }
   \                     ??CrossCallReturnLabel_517:
   \   0000AD   E5..         MOV       A,?V0
   \   0000AF   28           ADD       A,R0
   \   0000B0   F5..         MOV       ?V0,A
   \   0000B2   E5..         MOV       A,?V1
   \   0000B4   39           ADDC      A,R1
   \   0000B5   F5..         MOV       ?V1,A
   \                     ??zcl_SendReadRsp_9:
   \   0000B7   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_7:
   \   0000B9   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   0000BC   506A         JNC       ??zcl_SendReadRsp_10
   \   0000BE   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   0000C1   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000C4   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000C7   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000CA   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0000CD   A3           INC       DPTR
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   0000D2   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000D5   F0           MOVX      @DPTR,A
   \   0000D6   E5..         MOV       A,?V0
   \   0000D8   2403         ADD       A,#0x3
   \   0000DA   F5..         MOV       ?V0,A
   \   0000DC   5002         JNC       ??zcl_SendReadRsp_11
   \   0000DE   05..         INC       ?V1
   \                     ??zcl_SendReadRsp_11:
   \   0000E0   8882         MOV       DPL,R0
   \   0000E2   8983         MOV       DPH,R1
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   70D0         JNZ       ??zcl_SendReadRsp_9
   \   0000E7   EA           MOV       A,R2
   \   0000E8   2403         ADD       A,#0x3
   \   0000EA   08           INC       R0
   \   0000EB   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   0000EE   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   8582..       MOV       ?V0,DPL
   \   0000F6   8583..       MOV       ?V1,DPH
   \   0000F9   8A82         MOV       DPL,R2
   \   0000FB   8B83         MOV       DPH,R3
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000104   8C82         MOV       DPL,R4
   \   000106   F583         MOV       DPH,A
   \   000108   E582         MOV       A,DPL
   \   00010A   4583         ORL       A,DPH
   \   00010C   7003         JNZ       $+5
   \   00010E   02....       LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
   \   000111                ; Setup parameters for call to function zclSerializeData
   \   000111   AC..         MOV       R4,?V0
   \   000113   AD..         MOV       R5,?V1
   \   000115   AA82         MOV       R2,DPL
   \   000117   AB83         MOV       R3,DPH
   \   000119   8882         MOV       DPL,R0
   \   00011B   8983         MOV       DPH,R1
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   F9           MOV       R1,A
   \   00011F   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   000122   8A..         MOV       ?V0,R2
   \   000124   8B..         MOV       ?V1,R3
   \   000126   808F         SJMP      ??zcl_SendReadRsp_9
   1352                }
   1353              } // for loop
   1354          
   1355              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1356                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_10:
   \   000128                ; Setup parameters for call to function zcl_SendCommand
   \   000128   78..         MOV       R0,#?V4
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012D   8E..         MOV       ?V0,R6
   \   00012F   8F..         MOV       ?V1,R7
   \   000131   78..         MOV       R0,#?V0
   \   000133   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000136   7420         MOV       A,#0x20
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000141   E4           CLR       A
   \   000142   F5..         MOV       ?V0,A
   \   000144   F5..         MOV       ?V1,A
   \   000146   78..         MOV       R0,#?V0
   \   000148   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014B   7422         MOV       A,#0x22
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000153   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000156   7422         MOV       A,#0x22
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000161   75..00       MOV       ?V0,#0x0
   \   000164   78..         MOV       R0,#?V0
   \   000166   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000169   75..01       MOV       ?V0,#0x1
   \   00016C   78..         MOV       R0,#?V0
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000171   AC..         MOV       R4,?V6
   \   000173   AD..         MOV       R5,?V7
   \   000175   AA..         MOV       R2,?V12
   \   000177   AB..         MOV       R3,?V13
   \   000179   A9..         MOV       R1,?V3
   \   00017B   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   00017E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000181   E9           MOV       A,R1
   \   000182   FE           MOV       R6,A
   1357              zcl_mem_free( buf );
   \   000183                ; Setup parameters for call to function osal_mem_free
   \   000183   AA..         MOV       R2,?V4
   \   000185   AB..         MOV       R3,?V5
   \   000187   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00018A   8002         SJMP      ??zcl_SendReadRsp_12
   1358            }
   1359            else
   1360            {
   1361              status = ZMemError;
   \                     ??zcl_SendReadRsp_6:
   \   00018C   7E10         MOV       R6,#0x10
   1362            }
   1363          
   1364            return ( status );
   \                     ??zcl_SendReadRsp_12:
   \   00018E   EE           MOV       A,R6
   \   00018F   F9           MOV       R1,A
   \   000190   02....       LJMP      ?Subroutine7 & 0xFFFF
   1365          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   E5..         MOV       A,?V2
   \   000002   75F006       MOV       B,#0x6
   \   000005                REQUIRE ??Subroutine214_0
   \   000005                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   A4           MUL       AB
   \   000001   F8           MOV       R0,A
   \   000002   A9F0         MOV       R1,B
   \   000004   E5..         MOV       A,?V8
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   E5..         MOV       A,?V9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   AA..         MOV       R2,?V6
   \   000005   AB..         MOV       R3,?V7
   \   000007   A9..         MOV       R1,?V3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine216_0
   \   000001                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine217_0
   \   000002                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000003   A882         MOV       R0,DPL
   \   000005   A983         MOV       R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine222_0
   \   000005                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004                REQUIRE ??Subroutine227_0
   \   000004                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   E4           CLR       A
   \   000001   3B           ADDC      A,R3
   \   000002   F9           MOV       R1,A
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   AA82         MOV       R2,DPL
   \   000005   AB83         MOV       R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine265_0
   \   000006                ; // Fall through to label ??Subroutine265_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V2
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET
   1366          #endif // ZCL_READ
   1367          
   1368          #ifdef ZCL_WRITE
   1369          /*********************************************************************
   1370           * @fn      sendWriteRequest
   1371           *
   1372           * @brief   Send a Write command
   1373           *
   1374           * @param   dstAddr - destination address
   1375           * @param   clusterID - cluster ID
   1376           * @param   writeCmd - write command to be sent
   1377           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1378           * @param   direction - direction of the command
   1379           * @param   seqNum - transaction sequence number
   1380           *
   1381           * @return  ZSuccess if OK
   1382           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1383          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
   1384                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1385                                          uint8 disableDefaultRsp, uint8 seqNum )
   1386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V7,R5
   1387            uint8 *buf;
   1388            uint16 dataLen = 0;
   \   00000F   7E00         MOV       R6,#0x0
   \   000011   7F00         MOV       R7,#0x0
   1389            ZStatus_t status;
   1390            uint8 i;
   1391          
   1392            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000013   75..00       MOV       ?V2,#0x0
   \   000016   7416         MOV       A,#0x16
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00001E   802E         SJMP      ??zcl_SendWriteRequest_0
   1393            {
   1394              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   000020   E5..         MOV       A,?V2
   \   000022   75F005       MOV       B,#0x5
   \   000025   A4           MUL       AB
   \   000026   F8           MOV       R0,A
   \   000027   A9F0         MOV       R1,B
   \   000029   E5..         MOV       A,?V4
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   E5..         MOV       A,?V5
   \   000030   12....       LCALL     ?Subroutine148 & 0xFFFF
   1395          
   1396              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1397          
   1398              // Attribute Data
   1399              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??CrossCallReturnLabel_253:
   \   000033                ; Setup parameters for call to function zclGetAttrDataLength
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ?Subroutine103 & 0xFFFF
   1400            }
   \                     ??CrossCallReturnLabel_174:
   \   000039   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00003C   8B..         MOV       ?V1,R3
   \   00003E   EA           MOV       A,R2
   \   00003F   2403         ADD       A,#0x3
   \   000041   F8           MOV       R0,A
   \   000042   E4           CLR       A
   \   000043   35..         ADDC      A,?V1
   \   000045   F9           MOV       R1,A
   \   000046   EE           MOV       A,R6
   \   000047   28           ADD       A,R0
   \   000048   FE           MOV       R6,A
   \   000049   EF           MOV       A,R7
   \   00004A   39           ADDC      A,R1
   \   00004B   FF           MOV       R7,A
   \   00004C   05..         INC       ?V2
   \                     ??zcl_SendWriteRequest_0:
   \   00004E   85..82       MOV       DPL,?V4
   \   000051   85..83       MOV       DPH,?V5
   \   000054   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   000057   40C7         JC        ??zcl_SendWriteRequest_1
   1401          
   1402            buf = zcl_mem_alloc( dataLen );
   \   000059                ; Setup parameters for call to function osal_mem_alloc
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   1403            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_632:
   \   00005F   7003         JNZ       $+5
   \   000061   02....       LJMP      ??zcl_SendWriteRequest_2 & 0xFFFF
   1404            {
   1405              // Load the buffer - serially
   1406              uint8 *pBuf = buf;
   \   000064   A8..         MOV       R0,?V0
   \   000066   A9..         MOV       R1,?V1
   1407              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000068   75..00       MOV       ?V2,#0x0
   \   00006B   803E         SJMP      ??zcl_SendWriteRequest_3
   1408              {
   1409                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_4:
   \   00006D   E5..         MOV       A,?V2
   \   00006F   75F005       MOV       B,#0x5
   \   000072   A4           MUL       AB
   \   000073   FA           MOV       R2,A
   \   000074   ABF0         MOV       R3,B
   \   000076   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000079   8582..       MOV       ?V12,DPL
   \   00007C   8583..       MOV       ?V13,DPH
   1410          
   1411                *pBuf++ = LO_UINT16( statusRec->attrID );
   \   00007F   12....       LCALL     ?Subroutine26 & 0xFFFF
   1412                *pBuf++ = HI_UINT16( statusRec->attrID );
   1413                *pBuf++ = statusRec->dataType;
   \                     ??CrossCallReturnLabel_21:
   \   000082   E5..         MOV       A,?V12
   \   000084   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   1414          
   1415                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   1416              }
   \                     ??CrossCallReturnLabel_677:
   \   000087   35..         ADDC      A,?V13
   \   000089   8A..         MOV       ?V10,R2
   \   00008B   F5..         MOV       ?V11,A
   \   00008D   8A82         MOV       DPL,R2
   \   00008F   F583         MOV       DPH,A
   \   000091   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000094   FC           MOV       R4,A
   \   000095   E4           CLR       A
   \   000096   39           ADDC      A,R1
   \   000097   FD           MOV       R5,A
   \   000098   85..82       MOV       DPL,?V12
   \   00009B   85..83       MOV       DPH,?V13
   \   00009E   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000A1   8A..         MOV       ?V10,R2
   \   0000A3   8B..         MOV       ?V11,R3
   \   0000A5   A8..         MOV       R0,?V10
   \   0000A7   A9..         MOV       R1,?V11
   \   0000A9   05..         INC       ?V2
   \                     ??zcl_SendWriteRequest_3:
   \   0000AB   85..82       MOV       DPL,?V4
   \   0000AE   85..83       MOV       DPH,?V5
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FA           MOV       R2,A
   \   0000B3   E5..         MOV       A,?V2
   \   0000B5   C3           CLR       C
   \   0000B6   9A           SUBB      A,R2
   \   0000B7   40B4         JC        ??zcl_SendWriteRequest_4
   1417          
   1418              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1419                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000B9                ; Setup parameters for call to function zcl_SendCommand
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   8E..         MOV       ?V4,R6
   \   0000C0   8F..         MOV       ?V5,R7
   \   0000C2   78..         MOV       R0,#?V4
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   741F         MOV       A,#0x1f
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D2   E4           CLR       A
   \   0000D3   F5..         MOV       ?V4,A
   \   0000D5   F5..         MOV       ?V5,A
   \   0000D7   78..         MOV       R0,#?V4
   \   0000D9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DC   7421         MOV       A,#0x21
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   0000E4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E7   7421         MOV       A,#0x21
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F2   75..00       MOV       ?V2,#0x0
   \   0000F5   78..         MOV       R0,#?V2
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FA   7422         MOV       A,#0x22
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000105   AC..         MOV       R4,?V6
   \   000107   AD..         MOV       R5,?V7
   \   000109   AA..         MOV       R2,?V8
   \   00010B   AB..         MOV       R3,?V9
   \   00010D   A9..         MOV       R1,?V3
   \   00010F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000112   12....       LCALL     ?DEALLOC_XSTACK8
   \   000115   E9           MOV       A,R1
   \   000116   FE           MOV       R6,A
   1420              zcl_mem_free( buf );
   \   000117                ; Setup parameters for call to function osal_mem_free
   \   000117   AA..         MOV       R2,?V0
   \   000119   AB..         MOV       R3,?V1
   \   00011B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00011E   8002         SJMP      ??zcl_SendWriteRequest_5
   1421            }
   1422            else
   1423            {
   1424              status = ZMemError;
   \                     ??zcl_SendWriteRequest_2:
   \   000120   7E10         MOV       R6,#0x10
   1425            }
   1426          
   1427            return ( status);
   \                     ??zcl_SendWriteRequest_5:
   \   000122   EE           MOV       A,R6
   \   000123   F9           MOV       R1,A
   \   000124   02....       LJMP      ??Subroutine222_0 & 0xFFFF
   1428          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ??Subroutine274_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_700:
   \   000003   85..82       MOV       DPL,?V10
   \   000006   85..83       MOV       DPH,?V11
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006                ; Setup parameters for call to function zclSerializeData
   \   000006   E8           MOV       A,R0
   \   000007   2403         ADD       A,#0x3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000003   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000006   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine271_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine274_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine275_0
   \   000003                ; // Fall through to label ??Subroutine275_0
   1429          
   1430          /*********************************************************************
   1431           * @fn      zcl_SendWriteRsp
   1432           *
   1433           * @brief   Send a Write Response command
   1434           *
   1435           * @param   dstAddr - destination address
   1436           * @param   clusterID - cluster ID
   1437           * @param   wrtieRspCmd - write response command to be sent
   1438           * @param   direction - direction of the command
   1439           * @param   seqNum - transaction sequence number
   1440           *
   1441           * @return  ZSuccess if OK
   1442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1443          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
   1444                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1445                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1446          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine53 & 0xFFFF
   1447            uint16 dataLen;
   1448            uint8 *buf;
   1449            ZStatus_t status;
   1450          
   1451            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   1452          
   1453            buf = zcl_mem_alloc( dataLen );
   1454            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_66:
   \   000017   7003         JNZ       $+5
   \   000019   02....       LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
   1455            {
   1456              // Load the buffer - serially
   1457              uint8 i;
   1458              uint8 *pBuf = buf;
   \   00001C   A8..         MOV       R0,?V0
   \   00001E   A9..         MOV       R1,?V1
   1459              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   000020   7C00         MOV       R4,#0x0
   \   000022   800D         SJMP      ??zcl_SendWriteRsp_1
   1460              {
   1461                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_2:
   \   000024   12....       LCALL     ?Subroutine96 & 0xFFFF
   1462                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   1463                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   1464              }
   \                     ??CrossCallReturnLabel_165:
   \   000027   5001         JNC       ??zcl_SendWriteRsp_3
   \   000029   0B           INC       R3
   \                     ??zcl_SendWriteRsp_3:
   \   00002A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00002D   5001         JNC       ??zcl_SendWriteRsp_4
   \   00002F   09           INC       R1
   \                     ??zcl_SendWriteRsp_4:
   \   000030   0C           INC       R4
   \                     ??zcl_SendWriteRsp_1:
   \   000031   85..82       MOV       DPL,?V4
   \   000034   85..83       MOV       DPH,?V5
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   EC           MOV       A,R4
   \   00003A   C3           CLR       C
   \   00003B   9A           SUBB      A,R2
   \   00003C   40E6         JC        ??zcl_SendWriteRsp_2
   1465          
   1466              // If there's only a single status record and its status field is set to
   1467              // SUCCESS then omit the attribute ID field.
   1468              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00003E   7401         MOV       A,#0x1
   \   000040   6A           XRL       A,R2
   \   000041   700A         JNZ       ??zcl_SendWriteRsp_5
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   7006         JNZ       ??zcl_SendWriteRsp_5
   1469              {
   1470                dataLen = 1;
   \   000047   75..01       MOV       ?V6,#0x1
   \   00004A   75..00       MOV       ?V7,#0x0
   1471              }
   1472          
   1473              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1474                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_5:
   \   00004D                ; Setup parameters for call to function zcl_SendCommand
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   78..         MOV       R0,#?V6
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   741C         MOV       A,#0x1c
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000062   E4           CLR       A
   \   000063   F5..         MOV       ?V4,A
   \   000065   F5..         MOV       ?V5,A
   \   000067   78..         MOV       R0,#?V4
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   741E         MOV       A,#0x1e
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   741E         MOV       A,#0x1e
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000082   75..00       MOV       ?V3,#0x0
   \   000085   78..         MOV       R0,#?V3
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008A   75..04       MOV       ?V3,#0x4
   \   00008D   78..         MOV       R0,#?V3
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000092   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   E9           MOV       A,R1
   \   000099   FE           MOV       R6,A
   1475              zcl_mem_free( buf );
   \   00009A                ; Setup parameters for call to function osal_mem_free
   \   00009A   AA..         MOV       R2,?V0
   \   00009C   AB..         MOV       R3,?V1
   \   00009E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A1   8002         SJMP      ??zcl_SendWriteRsp_6
   1476            }
   1477            else
   1478            {
   1479              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   0000A3   7E10         MOV       R6,#0x10
   1480            }
   1481          
   1482            return ( status );
   \                     ??zcl_SendWriteRsp_6:
   \   0000A5   02....       LJMP      ?Subroutine10 & 0xFFFF
   1483          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   EC           MOV       A,R4
   \   000001   75F003       MOV       B,#0x3
   \   000004   A4           MUL       AB
   \   000005   FA           MOV       R2,A
   \   000006   ABF0         MOV       R3,B
   \   000008   E5..         MOV       A,?V4
   \   00000A   2A           ADD       A,R2
   \   00000B   FA           MOV       R2,A
   \   00000C   E5..         MOV       A,?V5
   \   00000E   3B           ADDC      A,R3
   \   00000F   FB           MOV       R3,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   F583         MOV       DPH,A
   \   000014   A3           INC       DPTR
   \   000015   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000018   F0           MOVX      @DPTR,A
   \   000019   EA           MOV       A,R2
   \   00001A   2402         ADD       A,#0x2
   \   00001C   FA           MOV       R2,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   75F003       MOV       B,#0x3
   \   000007   A4           MUL       AB
   \   000008   F5..         MOV       ?V6,A
   \   00000A   E5F0         MOV       A,B
   \   00000C   F5..         MOV       ?V7,A
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E   AA..         MOV       R2,?V6
   \   000010   FB           MOV       R3,A
   \   000011   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F582         MOV       DPL,A
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000007   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00000A   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00000D   F8           MOV       R0,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   85..82       MOV       DPL,?V4
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET
   1484          #endif // ZCL_WRITE
   1485          
   1486          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1487          /*********************************************************************
   1488           * @fn      zcl_SendConfigReportCmd
   1489           *
   1490           * @brief   Send a Configure Reporting command
   1491           *
   1492           * @param   dstAddr - destination address
   1493           * @param   clusterID - cluster ID
   1494           * @param   cfgReportCmd - configure reporting command to be sent
   1495           * @param   direction - direction of the command
   1496           * @param   seqNum - transaction sequence number
   1497           *
   1498           * @return  ZSuccess if OK
   1499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1500          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendConfigReportCmd:
   1501                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1502                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000013   89..         MOV       ?V1,R1
   \   000015   8C..         MOV       ?V12,R4
   \   000017   8D..         MOV       ?V13,R5
   1504            uint8 *buf;
   1505            uint16 dataLen = 0;
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   7F00         MOV       R7,#0x0
   1506            ZStatus_t status;
   1507            uint8 i;
   1508          
   1509            // Find out the data length
   1510            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   \   00001D   75..00       MOV       ?V0,#0x0
   \   000020   741A         MOV       A,#0x1a
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000028   8009         SJMP      ??zcl_SendConfigReportCmd_0
   1511            {
   1512              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1513          
   1514              dataLen += 1 + 2; // Direction + Attribute ID
   1515          
   1516              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1517              {
   1518                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1519          
   1520                // Find out the size of the Reportable Change field (for Analog data types)
   1521                if ( zclAnalogDataType( reportRec->dataType ) )
   1522                {
   1523                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1524                }
   1525              }
   1526              else
   1527              {
   1528                dataLen += 2; // Timeout Period
   \                     ??zcl_SendConfigReportCmd_1:
   \   00002A   EE           MOV       A,R6
   \   00002B   2402         ADD       A,#0x2
   \                     ??zcl_SendConfigReportCmd_2:
   \   00002D   FE           MOV       R6,A
   \   00002E   E4           CLR       A
   \   00002F   3F           ADDC      A,R7
   \   000030   FF           MOV       R7,A
   1529              }
   \                     ??zcl_SendConfigReportCmd_3:
   \   000031   05..         INC       ?V0
   \                     ??zcl_SendConfigReportCmd_0:
   \   000033   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000036   5041         JNC       ??zcl_SendConfigReportCmd_4
   \   000038   E5..         MOV       A,?V0
   \   00003A   75F00C       MOV       B,#0xc
   \   00003D   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000040   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000043   EE           MOV       A,R6
   \   000044   2403         ADD       A,#0x3
   \   000046   FE           MOV       R6,A
   \   000047   E4           CLR       A
   \   000048   3F           ADDC      A,R7
   \   000049   FF           MOV       R7,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   70DD         JNZ       ??zcl_SendConfigReportCmd_1
   \   00004D   EE           MOV       A,R6
   \   00004E   2405         ADD       A,#0x5
   \   000050   FE           MOV       R6,A
   \   000051   E4           CLR       A
   \   000052   3F           ADDC      A,R7
   \   000053   FF           MOV       R7,A
   \   000054   E582         MOV       A,DPL
   \   000056   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000059   3583         ADDC      A,DPH
   \   00005B   F5..         MOV       ?V3,A
   \   00005D                ; Setup parameters for call to function zclAnalogDataType
   \   00005D   85..82       MOV       DPL,?V2
   \   000060   F583         MOV       DPH,A
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000067   E9           MOV       A,R1
   \   000068   60C7         JZ        ??zcl_SendConfigReportCmd_3
   \   00006A                ; Setup parameters for call to function zclGetDataTypeLength
   \   00006A   85..82       MOV       DPL,?V2
   \   00006D   85..83       MOV       DPH,?V3
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000075   EE           MOV       A,R6
   \   000076   29           ADD       A,R1
   \   000077   80B4         SJMP      ??zcl_SendConfigReportCmd_2
   1530            }
   1531          
   1532            buf = zcl_mem_alloc( dataLen );
   \                     ??zcl_SendConfigReportCmd_4:
   \   000079                ; Setup parameters for call to function osal_mem_alloc
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000080   8A..         MOV       ?V2,R2
   \   000082   8B..         MOV       ?V3,R3
   1533            if ( buf != NULL )
   \   000084   EA           MOV       A,R2
   \   000085   4B           ORL       A,R3
   \   000086   7003         JNZ       $+5
   \   000088   02....       LJMP      ??zcl_SendConfigReportCmd_5 & 0xFFFF
   1534            {
   1535              // Load the buffer - serially
   1536              uint8 *pBuf = buf;
   \   00008B   8A..         MOV       ?V6,R2
   \   00008D   8B..         MOV       ?V7,R3
   1537          
   1538              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   \   00008F   75..00       MOV       ?V0,#0x0
   \   000092   801E         SJMP      ??zcl_SendConfigReportCmd_6
   1539              {
   1540                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1541          
   1542                *pBuf++ = reportRec->direction;
   1543                *pBuf++ = LO_UINT16( reportRec->attrID );
   1544                *pBuf++ = HI_UINT16( reportRec->attrID );
   1545          
   1546                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1547                {
   1548                  *pBuf++ = reportRec->dataType;
   1549                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1550                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1551                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1552                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1553          
   1554                  if ( zclAnalogDataType( reportRec->dataType ) )
   1555                  {
   1556                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1557                  }
   1558                }
   1559                else
   1560                {
   1561                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   \                     ??zcl_SendConfigReportCmd_7:
   \   000094   E5..         MOV       A,?V4
   \   000096   2408         ADD       A,#0x8
   \   000098   F5..         MOV       ?V4,A
   \   00009A   5002         JNC       ??zcl_SendConfigReportCmd_8
   \   00009C   05..         INC       ?V5
   \                     ??zcl_SendConfigReportCmd_8:
   \   00009E   F582         MOV       DPL,A
   \   0000A0   85..83       MOV       DPH,?V5
   \   0000A3   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   1562                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1563                }
   \                     ??CrossCallReturnLabel_642:
   \   0000A6   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000A9   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000AC   8C..         MOV       ?V6,R4
   \   0000AE   8D..         MOV       ?V7,R5
   \                     ??zcl_SendConfigReportCmd_9:
   \   0000B0   05..         INC       ?V0
   \                     ??zcl_SendConfigReportCmd_6:
   \   0000B2   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   0000B5   4003         JC        $+5
   \   0000B7   02....       LJMP      ??zcl_SendConfigReportCmd_10 & 0xFFFF
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   75F00C       MOV       B,#0xc
   \   0000BF   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   0000C2   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0000C5   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000C8   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000CB   A882         MOV       R0,DPL
   \   0000CD   A983         MOV       R1,DPH
   \   0000CF   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0000D2   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000D5   F0           MOVX      @DPTR,A
   \   0000D6   E5..         MOV       A,?V6
   \   0000D8   2405         ADD       A,#0x5
   \   0000DA   FC           MOV       R4,A
   \   0000DB   E4           CLR       A
   \   0000DC   35..         ADDC      A,?V7
   \   0000DE   FD           MOV       R5,A
   \   0000DF   E5..         MOV       A,?V6
   \   0000E1   2404         ADD       A,#0x4
   \   0000E3   FA           MOV       R2,A
   \   0000E4   E4           CLR       A
   \   0000E5   35..         ADDC      A,?V7
   \   0000E7   FB           MOV       R3,A
   \   0000E8   E5..         MOV       A,?V6
   \   0000EA   2403         ADD       A,#0x3
   \   0000EC   F8           MOV       R0,A
   \   0000ED   E4           CLR       A
   \   0000EE   35..         ADDC      A,?V7
   \   0000F0   F9           MOV       R1,A
   \   0000F1   85..82       MOV       DPL,?V4
   \   0000F4   85..83       MOV       DPH,?V5
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   709A         JNZ       ??zcl_SendConfigReportCmd_7
   \   0000FA   E5..         MOV       A,?V4
   \   0000FC   2403         ADD       A,#0x3
   \   0000FE   F5..         MOV       ?V10,A
   \   000100   E4           CLR       A
   \   000101   35..         ADDC      A,?V5
   \   000103   F5..         MOV       ?V11,A
   \   000105   85..82       MOV       DPL,?V10
   \   000108   F583         MOV       DPH,A
   \   00010A   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   E5..         MOV       A,?V4
   \   000110   2404         ADD       A,#0x4
   \   000112   F5..         MOV       ?V14,A
   \   000114   E4           CLR       A
   \   000115   35..         ADDC      A,?V5
   \   000117   F5..         MOV       ?V15,A
   \   000119   85..82       MOV       DPL,?V14
   \   00011C   F583         MOV       DPH,A
   \   00011E   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000121   85..82       MOV       DPL,?V14
   \   000124   85..83       MOV       DPH,?V15
   \   000127   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   E5..         MOV       A,?V4
   \   00012D   2406         ADD       A,#0x6
   \   00012F   F8           MOV       R0,A
   \   000130   E4           CLR       A
   \   000131   35..         ADDC      A,?V5
   \   000133   F9           MOV       R1,A
   \   000134   8882         MOV       DPL,R0
   \   000136   F583         MOV       DPH,A
   \   000138   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   F0           MOVX      @DPTR,A
   \   000149   E5..         MOV       A,?V6
   \   00014B   2408         ADD       A,#0x8
   \   00014D   F5..         MOV       ?V6,A
   \   00014F   5002         JNC       ??zcl_SendConfigReportCmd_11
   \   000151   05..         INC       ?V7
   \                     ??zcl_SendConfigReportCmd_11:
   \   000153                ; Setup parameters for call to function zclAnalogDataType
   \   000153   85..82       MOV       DPL,?V10
   \   000156   85..83       MOV       DPH,?V11
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F9           MOV       R1,A
   \   00015B   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   00015E   E9           MOV       A,R1
   \   00015F   7003         JNZ       $+5
   \   000161   02....       LJMP      ??zcl_SendConfigReportCmd_9 & 0xFFFF
   \   000164                ; Setup parameters for call to function zclSerializeData
   \   000164   AC..         MOV       R4,?V6
   \   000166   AD..         MOV       R5,?V7
   \   000168   85..82       MOV       DPL,?V4
   \   00016B   85..83       MOV       DPH,?V5
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   A3           INC       DPTR
   \   000175   12....       LCALL     ?Subroutine74 & 0xFFFF
   1564              } // for loop
   \                     ??CrossCallReturnLabel_126:
   \   000178   8A..         MOV       ?V6,R2
   \   00017A   8B..         MOV       ?V7,R3
   \   00017C   02....       LJMP      ??zcl_SendConfigReportCmd_9 & 0xFFFF
   1565          
   1566              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1567                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendConfigReportCmd_10:
   \   00017F                ; Setup parameters for call to function zcl_SendCommand
   \   00017F   78..         MOV       R0,#?V2
   \   000181   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000184   8E..         MOV       ?V4,R6
   \   000186   8F..         MOV       ?V5,R7
   \   000188   78..         MOV       R0,#?V4
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018D   7422         MOV       A,#0x22
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000198   E4           CLR       A
   \   000199   F5..         MOV       ?V4,A
   \   00019B   F5..         MOV       ?V5,A
   \   00019D   78..         MOV       R0,#?V4
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A2   7424         MOV       A,#0x24
   \   0001A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A7   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0001AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AD   7424         MOV       A,#0x24
   \   0001AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0001B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B8   75..00       MOV       ?V0,#0x0
   \   0001BB   78..         MOV       R0,#?V0
   \   0001BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C0   75..06       MOV       ?V0,#0x6
   \   0001C3   78..         MOV       R0,#?V0
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C8   AC..         MOV       R4,?V12
   \   0001CA   AD..         MOV       R5,?V13
   \   0001CC   740B         MOV       A,#0xb
   \   0001CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D1   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   0001D4   A9..         MOV       R1,?V1
   \   0001D6   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   0001D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DC   E9           MOV       A,R1
   \   0001DD   FE           MOV       R6,A
   1568              zcl_mem_free( buf );
   \   0001DE                ; Setup parameters for call to function osal_mem_free
   \   0001DE   AA..         MOV       R2,?V2
   \   0001E0   AB..         MOV       R3,?V3
   \   0001E2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E5   8002         SJMP      ??zcl_SendConfigReportCmd_12
   1569            }
   1570            else
   1571            {
   1572              status = ZMemError;
   \                     ??zcl_SendConfigReportCmd_5:
   \   0001E7   7E10         MOV       R6,#0x10
   1573            }
   1574          
   1575            return ( status );
   \                     ??zcl_SendConfigReportCmd_12:
   \   0001E9   EE           MOV       A,R6
   \   0001EA   F9           MOV       R1,A
   \   0001EB   7402         MOV       A,#0x2
   \   0001ED   02....       LJMP      ?Subroutine5 & 0xFFFF
   1576          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine219_0
   \   000001                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine220_0
   \   000006                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V0
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V6
   \   000004   85..83       MOV       DPH,?V7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000004   E0           MOVX      A,@DPTR
   \   000005   85..82       MOV       DPL,?V6
   \   000008   85..83       MOV       DPH,?V7
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   2403         ADD       A,#0x3
   \   000002   F5..         MOV       ?V2,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000003   8582..       MOV       ?V4,DPL
   \   000006   8583..       MOV       ?V5,DPH
   \   000009   22           RET
   1577          #endif
   1578          
   1579          #ifdef ZCL_REPORTING_DEVICE
   1580          /*********************************************************************
   1581           * @fn      zcl_SendConfigReportRspCmd
   1582           *
   1583           * @brief   Send a Configure Reporting Response command
   1584           *
   1585           * @param   dstAddr - destination address
   1586           * @param   clusterID - cluster ID
   1587           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1588           * @param   direction - direction of the command
   1589           * @param   seqNum - transaction sequence number
   1590           *
   1591           * @return  ZSuccess if OK
   1592           */
   1593          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1594                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1595                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1596          {
   1597            uint16 dataLen;
   1598            uint8 *buf;
   1599            ZStatus_t status;
   1600          
   1601            // Atrribute list (Status, Direction and Attribute ID)
   1602            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   1603          
   1604            buf = zcl_mem_alloc( dataLen );
   1605            if ( buf != NULL )
   1606            {
   1607              // Load the buffer - serially
   1608              uint8 *pBuf = buf;
   1609              uint8 i;
   1610          
   1611              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   1612              {
   1613                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   1614                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   1615                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1616                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1617              }
   1618          
   1619              // If there's only a single status record and its status field is set to
   1620              // SUCCESS then omit the attribute ID field.
   1621              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   1622              {
   1623                dataLen = 1;
   1624              }
   1625          
   1626              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1627                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1628                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   1629              zcl_mem_free( buf );
   1630            }
   1631            else
   1632            {
   1633              status = ZMemError;
   1634            }
   1635          
   1636            return ( status );
   1637          }
   1638          #endif
   1639          
   1640          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1641          /*********************************************************************
   1642           * @fn      zcl_SendReadReportCfgCmd
   1643           *
   1644           * @brief   Send a Read Reporting Configuration command
   1645           *
   1646           * @param   dstAddr - destination address
   1647           * @param   clusterID - cluster ID
   1648           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1649           * @param   direction - direction of the command
   1650           * @param   seqNum - transaction sequence number
   1651           *
   1652           * @return  ZSuccess if OK
   1653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1654          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadReportCfgCmd:
   1655                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1656                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1657          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine53 & 0xFFFF
   1658            uint16 dataLen;
   1659            uint8 *buf;
   1660            ZStatus_t status;
   1661          
   1662            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1663          
   1664            buf = zcl_mem_alloc( dataLen );
   1665            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_67:
   \   000017   6078         JZ        ??zcl_SendReadReportCfgCmd_0
   1666            {
   1667              // Load the buffer - serially
   1668              uint8 *pBuf = buf;
   \   000019   A8..         MOV       R0,?V0
   \   00001B   A9..         MOV       R1,?V1
   1669              uint8 i;
   1670          
   1671              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   \   00001D   7C00         MOV       R4,#0x0
   \   00001F   800D         SJMP      ??zcl_SendReadReportCfgCmd_1
   1672              {
   1673                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   \                     ??zcl_SendReadReportCfgCmd_2:
   \   000021   12....       LCALL     ?Subroutine96 & 0xFFFF
   1674                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1675                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1676              }
   \                     ??CrossCallReturnLabel_166:
   \   000024   5001         JNC       ??zcl_SendReadReportCfgCmd_3
   \   000026   0B           INC       R3
   \                     ??zcl_SendReadReportCfgCmd_3:
   \   000027   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00002A   5001         JNC       ??zcl_SendReadReportCfgCmd_4
   \   00002C   09           INC       R1
   \                     ??zcl_SendReadReportCfgCmd_4:
   \   00002D   0C           INC       R4
   \                     ??zcl_SendReadReportCfgCmd_1:
   \   00002E   85..82       MOV       DPL,?V4
   \   000031   85..83       MOV       DPH,?V5
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FA           MOV       R2,A
   \   000036   EC           MOV       A,R4
   \   000037   C3           CLR       C
   \   000038   9A           SUBB      A,R2
   \   000039   40E6         JC        ??zcl_SendReadReportCfgCmd_2
   1677          
   1678              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1679                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00003B                ; Setup parameters for call to function zcl_SendCommand
   \   00003B   78..         MOV       R0,#?V0
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000040   78..         MOV       R0,#?V6
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   741C         MOV       A,#0x1c
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   E4           CLR       A
   \   000051   F5..         MOV       ?V4,A
   \   000053   F5..         MOV       ?V5,A
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   741E         MOV       A,#0x1e
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   741E         MOV       A,#0x1e
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000070   75..00       MOV       ?V3,#0x0
   \   000073   78..         MOV       R0,#?V3
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000078   75..08       MOV       ?V3,#0x8
   \   00007B   78..         MOV       R0,#?V3
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000080   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   E9           MOV       A,R1
   \   000087   FE           MOV       R6,A
   1680              zcl_mem_free( buf );
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   AA..         MOV       R2,?V0
   \   00008A   AB..         MOV       R3,?V1
   \   00008C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00008F   8002         SJMP      ??zcl_SendReadReportCfgCmd_5
   1681            }
   1682            else
   1683            {
   1684              status = ZMemError;
   \                     ??zcl_SendReadReportCfgCmd_0:
   \   000091   7E10         MOV       R6,#0x10
   1685            }
   1686          
   1687            return ( status );
   \                     ??zcl_SendReadReportCfgCmd_5:
   \   000093   02....       LJMP      ?Subroutine10 & 0xFFFF
   1688          }
   1689          #endif
   1690          
   1691          #ifdef ZCL_REPORTING_DEVICE
   1692          /*********************************************************************
   1693           * @fn      zcl_SendReadReportCfgRspCmd
   1694           *
   1695           * @brief   Send a Read Reporting Configuration Response command
   1696           *
   1697           * @param   dstAddr - destination address
   1698           * @param   clusterID - cluster ID
   1699           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1700           * @param   direction - direction of the command
   1701           * @param   seqNum - transaction sequence number
   1702           *
   1703           * @return  ZSuccess if OK
   1704           */
   1705          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1706                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1707                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1708          {
   1709            uint8 *buf;
   1710            uint16 dataLen = 0;
   1711            ZStatus_t status;
   1712            uint8 i;
   1713          
   1714            // Find out the data length
   1715            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1716            {
   1717              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1718          
   1719              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1720          
   1721              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1722              {
   1723                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1724                {
   1725                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1726          
   1727                  // Find out the size of the Reportable Change field (for Analog data types)
   1728                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1729                  {
   1730                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1731                  }
   1732                }
   1733                else
   1734                {
   1735                  dataLen += 2; // Timeout Period
   1736                }
   1737              }
   1738            }
   1739          
   1740            buf = zcl_mem_alloc( dataLen );
   1741            if ( buf != NULL )
   1742            {
   1743              // Load the buffer - serially
   1744              uint8 *pBuf = buf;
   1745          
   1746              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1747              {
   1748                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1749          
   1750                *pBuf++ = reportRspRec->status;
   1751                *pBuf++ = reportRspRec->direction;
   1752                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1753                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1754          
   1755                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1756                {
   1757                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1758                  {
   1759                    *pBuf++ = reportRspRec->dataType;
   1760                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1761                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1762                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1763                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1764          
   1765                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1766                    {
   1767                      pBuf = zclSerializeData( reportRspRec->dataType,
   1768                                               reportRspRec->reportableChange, pBuf );
   1769                    }
   1770                  }
   1771                  else
   1772                  {
   1773                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1774                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1775                  }
   1776                }
   1777              }
   1778          
   1779              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1780                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1781                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1782              zcl_mem_free( buf );
   1783            }
   1784            else
   1785            {
   1786              status = ZMemError;
   1787            }
   1788          
   1789            return ( status );
   1790          }
   1791          
   1792          /*********************************************************************
   1793           * @fn      zcl_SendReportCmd
   1794           *
   1795           * @brief   Send a Report command
   1796           *
   1797           * @param   dstAddr - destination address
   1798           * @param   clusterID - cluster ID
   1799           * @param   reportCmd - report command to be sent
   1800           * @param   direction - direction of the command
   1801           * @param   seqNum - transaction sequence number
   1802           *
   1803           * @return  ZSuccess if OK
   1804           */
   1805          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1806                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1807                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1808          {
   1809            uint16 dataLen = 0;
   1810            uint8 *buf;
   1811            ZStatus_t status;
   1812            uint8 i;
   1813          
   1814            // calculate the size of the command
   1815            for ( i = 0; i < reportCmd->numAttr; i++ )
   1816            {
   1817              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1818          
   1819              dataLen += 2 + 1; // Attribute ID + data type
   1820          
   1821              // Attribute Data
   1822              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1823            }
   1824          
   1825            buf = zcl_mem_alloc( dataLen );
   1826            if ( buf != NULL )
   1827            {
   1828              // Load the buffer - serially
   1829              uint8 *pBuf = buf;
   1830          
   1831              for ( i = 0; i < reportCmd->numAttr; i++ )
   1832              {
   1833                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1834          
   1835                *pBuf++ = LO_UINT16( reportRec->attrID );
   1836                *pBuf++ = HI_UINT16( reportRec->attrID );
   1837                *pBuf++ = reportRec->dataType;
   1838          
   1839                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1840              }
   1841          
   1842              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1843                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1844              zcl_mem_free( buf );
   1845            }
   1846            else
   1847            {
   1848              status = ZMemError;
   1849            }
   1850          
   1851            return ( status );
   1852          }
   1853          #endif
   1854          
   1855          /*********************************************************************
   1856           * @fn      zcl_SendDefaultRspCmd
   1857           *
   1858           * @brief   Send a Default Response command
   1859           *
   1860           *          Note: The manufacturer code field should be set if this
   1861           *          command is being sent in response to a manufacturer specific
   1862           *          command.
   1863           *
   1864           * @param   dstAddr - destination address
   1865           * @param   clusterID - cluster ID
   1866           * @param   defaultRspCmd - default response command to be sent
   1867           * @param   direction - direction of the command
   1868           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1869           * @param   seqNum - transaction sequence number
   1870           *
   1871           * @return  ZSuccess if OK
   1872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1873          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1874                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1875                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1876          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine25 & 0xFFFF
   1877            uint8 buf[2]; // Command ID and Status;
   1878          
   1879            // Load the buffer - serially
   1880            buf[0] = defaultRspCmd->commandID;
   1881            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_378:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   F0           MOVX      @DPTR,A
   1882          
   1883            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1884                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \   00001E                ; Setup parameters for call to function zcl_SendCommand
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V0,R0
   \   000024   89..         MOV       ?V1,R1
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   75..02       MOV       ?V0,#0x2
   \   00002E   75..00       MOV       ?V1,#0x0
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7416         MOV       A,#0x16
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   7415         MOV       A,#0x15
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000049   7416         MOV       A,#0x16
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   7416         MOV       A,#0x16
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..00       MOV       ?V0,#0x0
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   75..0B       MOV       ?V0,#0xb
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006F   EE           MOV       A,R6
   \   000070   F9           MOV       R1,A
   \   000071   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   7402         MOV       A,#0x2
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007C   02....       LJMP      ?Subroutine3 & 0xFFFF
   1885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000006                REQUIRE ??Subroutine221_0
   \   000006                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   1886          
   1887          #ifdef ZCL_DISCOVER
   1888          /*********************************************************************
   1889           * @fn      zcl_SendDiscoverCmdsCmd
   1890           *
   1891           * @brief   Send a Discover Commands command
   1892           *
   1893           * @param   dstAddr - destination address
   1894           * @param   clusterID - cluster ID
   1895           * @param   cmdType - requesting command ID
   1896           * @param   pDiscoverCmd - discover command to be sent
   1897           * @param   direction - direction of the command
   1898           * @param   seqNum - transaction sequence number
   1899           *
   1900           * @return  ZSuccess if OK
   1901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1902          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDiscoverCmdsCmd:
   1903                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1904                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine25 & 0xFFFF
   1906            uint8 payload[2]; // size of startCmdID and maxCmdID
   1907            ZStatus_t status;
   1908          
   1909            payload[0] = pDiscoverCmd->startCmdID;
   1910            payload[1] = pDiscoverCmd->maxCmdID;
   \                     ??CrossCallReturnLabel_379:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   7411         MOV       A,#0x11
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FF           MOV       R7,A
   \   000025   7412         MOV       A,#0x12
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   7413         MOV       A,#0x13
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V1,A
   1911          
   1912            // Send message for either commands received or generated
   1913            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   000035   740E         MOV       A,#0xe
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6411         XRL       A,#0x11
   \   00003D   A8..         MOV       R0,?XSP + 0
   \   00003F   A9..         MOV       R1,?XSP + 1
   \   000041   88..         MOV       ?V2,R0
   \   000043   89..         MOV       ?V3,R1
   \   000045   78..         MOV       R0,#?V2
   \   000047   7035         JNZ       ??zcl_SendDiscoverCmdsCmd_0
   1914            {
   1915              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1916                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \   000049                ; Setup parameters for call to function zcl_SendCommand
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   75..02       MOV       ?V2,#0x2
   \   00004F   75..00       MOV       ?V3,#0x0
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   78..         MOV       R0,#?V1
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   E4           CLR       A
   \   00005D   F5..         MOV       ?V2,A
   \   00005F   78..         MOV       R0,#?V2
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   EF           MOV       A,R7
   \   00006A   F5..         MOV       ?V0,A
   \   00006C   78..         MOV       R0,#?V0
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000071   75..00       MOV       ?V0,#0x0
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   75..11       MOV       ?V0,#0x11
   \   00007C   8033         SJMP      ??zcl_SendDiscoverCmdsCmd_1
   1917            }
   1918            else  // generated
   1919            {
   1920              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1921                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \                     ??zcl_SendDiscoverCmdsCmd_0:
   \   00007E                ; Setup parameters for call to function zcl_SendCommand
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   75..02       MOV       ?V2,#0x2
   \   000084   75..00       MOV       ?V3,#0x0
   \   000087   78..         MOV       R0,#?V2
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   78..         MOV       R0,#?V1
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000091   E4           CLR       A
   \   000092   F5..         MOV       ?V2,A
   \   000094   78..         MOV       R0,#?V2
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009E   EF           MOV       A,R7
   \   00009F   F5..         MOV       ?V0,A
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A6   75..00       MOV       ?V0,#0x0
   \   0000A9   78..         MOV       R0,#?V0
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AE   75..13       MOV       ?V0,#0x13
   \                     ??zcl_SendDiscoverCmdsCmd_1:
   \   0000B1   78..         MOV       R0,#?V0
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B6   EE           MOV       A,R6
   \   0000B7   F9           MOV       R1,A
   1922            }
   \   0000B8   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BE   E9           MOV       A,R1
   \   0000BF   F9           MOV       R1,A
   1923          
   1924            return ( status );
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   02....       LJMP      ?Subroutine1 & 0xFFFF
   1925          }
   1926          
   1927          /*********************************************************************
   1928           * @fn      zcl_SendDiscoverCmdsRspCmd
   1929           *
   1930           * @brief   Send a Discover Commands Response command
   1931           *
   1932           * @param   dstAddr - destination address
   1933           * @param   clusterID - cluster ID
   1934           * @param   pDiscoverRspCmd - response command to be sent
   1935           * @param   direction - direction of the command
   1936           * @param   seqNum - transaction sequence number
   1937           *
   1938           * @return  ZSuccess if OK
   1939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1940          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverCmdsRspCmd:
   1941                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1942                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1943          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V11,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ??Subroutine272_0 & 0xFFFF
   1944            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   \                     ??CrossCallReturnLabel_683:
   \   000017   E5..         MOV       A,?V2
   \   000019   2402         ADD       A,#0x2
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V3
   \   000020   F5..         MOV       ?V5,A
   \   000022   85..82       MOV       DPL,?V4
   \   000025   F583         MOV       DPH,A
   \   000027   E0           MOVX      A,@DPTR
   \   000028   04           INC       A
   1945            uint8 *pCmdBuf;
   1946            uint8 i;
   1947            ZStatus_t status = ZSuccess;
   \   000029   75..00       MOV       ?V10,#0x0
   1948          
   1949            // allocate memory
   1950            pCmdBuf = zcl_mem_alloc( payloadSize );
   \   00002C   F5..         MOV       ?V6,A
   \   00002E   75..00       MOV       ?V7,#0x0
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   FA           MOV       R2,A
   \   000032   AB..         MOV       R3,?V7
   \   000034   12....       LCALL     ??Subroutine267_0 & 0xFFFF
   1951            if ( pCmdBuf != NULL )
   \                     ??CrossCallReturnLabel_637:
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??zcl_SendDiscoverCmdsRspCmd_0 & 0xFFFF
   1952            {
   1953              uint8 *pBuf = pCmdBuf;
   1954          
   1955              // Load the buffer - serially
   1956              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00003C   85..82       MOV       DPL,?V2
   \   00003F   85..83       MOV       DPH,?V3
   \   000042   12....       LCALL     ?Subroutine43 & 0xFFFF
   1957              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_53:
   \   000045   8020         SJMP      ??zcl_SendDiscoverCmdsRspCmd_1
   1958              {
   1959                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   \                     ??zcl_SendDiscoverCmdsRspCmd_2:
   \   000047   EA           MOV       A,R2
   \   000048   FC           MOV       R4,A
   \   000049   85..82       MOV       DPL,?V2
   \   00004C   85..83       MOV       DPH,?V3
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   2C           ADD       A,R4
   \   000054   FB           MOV       R3,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   3400         ADDC      A,#0x0
   \   000059   8B82         MOV       DPL,R3
   \   00005B   F583         MOV       DPH,A
   \   00005D   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   1960              }
   \                     ??CrossCallReturnLabel_644:
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   A882         MOV       R0,DPL
   \   000064   A983         MOV       R1,DPH
   \   000066   0A           INC       R2
   \                     ??zcl_SendDiscoverCmdsRspCmd_1:
   \   000067   85..82       MOV       DPL,?V4
   \   00006A   85..83       MOV       DPH,?V5
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   FB           MOV       R3,A
   \   00006F   EA           MOV       A,R2
   \   000070   C3           CLR       C
   \   000071   9B           SUBB      A,R3
   \   000072   40D3         JC        ??zcl_SendDiscoverCmdsRspCmd_2
   1961          
   1962              // Send response message for either commands received or generated
   1963              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   000074   85..82       MOV       DPL,?V2
   \   000077   85..83       MOV       DPH,?V3
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F8           MOV       R0,A
   \   00007D   7418         MOV       A,#0x18
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   7419         MOV       A,#0x19
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   FA           MOV       R2,A
   \   00008B   741A         MOV       A,#0x1a
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E0           MOVX      A,@DPTR
   \   000091   FB           MOV       R3,A
   \   000092   7411         MOV       A,#0x11
   \   000094   68           XRL       A,R0
   \   000095   7039         JNZ       ??zcl_SendDiscoverCmdsRspCmd_3
   1964              {
   1965                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1966                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   000097                ; Setup parameters for call to function zcl_SendCommand
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   78..         MOV       R0,#?V6
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   EB           MOV       A,R3
   \   0000A2   F5..         MOV       ?V2,A
   \   0000A4   78..         MOV       R0,#?V2
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A9   E4           CLR       A
   \   0000AA   F5..         MOV       ?V2,A
   \   0000AC   F5..         MOV       ?V3,A
   \   0000AE   78..         MOV       R0,#?V2
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   EA           MOV       A,R2
   \   0000B4   F5..         MOV       ?V2,A
   \   0000B6   78..         MOV       R0,#?V2
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   E9           MOV       A,R1
   \   0000BC   F5..         MOV       ?V2,A
   \   0000BE   78..         MOV       R0,#?V2
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   75..00       MOV       ?V2,#0x0
   \   0000C6   78..         MOV       R0,#?V2
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   75..12       MOV       ?V2,#0x12
   \   0000CE   803C         SJMP      ??zcl_SendDiscoverCmdsRspCmd_4
   1967              }
   1968              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zcl_SendDiscoverCmdsRspCmd_3:
   \   0000D0   7413         MOV       A,#0x13
   \   0000D2   68           XRL       A,R0
   \   0000D3   704F         JNZ       ??zcl_SendDiscoverCmdsRspCmd_5
   1969              {
   1970                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1971                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   0000D5                ; Setup parameters for call to function zcl_SendCommand
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   78..         MOV       R0,#?V6
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   EB           MOV       A,R3
   \   0000E0   F5..         MOV       ?V2,A
   \   0000E2   78..         MOV       R0,#?V2
   \   0000E4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E7   E4           CLR       A
   \   0000E8   F5..         MOV       ?V2,A
   \   0000EA   F5..         MOV       ?V3,A
   \   0000EC   78..         MOV       R0,#?V2
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   EA           MOV       A,R2
   \   0000F2   F5..         MOV       ?V2,A
   \   0000F4   78..         MOV       R0,#?V2
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F9   E9           MOV       A,R1
   \   0000FA   F5..         MOV       ?V2,A
   \   0000FC   78..         MOV       R0,#?V2
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000101   75..00       MOV       ?V2,#0x0
   \   000104   78..         MOV       R0,#?V2
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000109   75..14       MOV       ?V2,#0x14
   \                     ??zcl_SendDiscoverCmdsRspCmd_4:
   \   00010C   78..         MOV       R0,#?V2
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000111   EE           MOV       A,R6
   \   000112   FC           MOV       R4,A
   \   000113   EF           MOV       A,R7
   \   000114   FD           MOV       R5,A
   \   000115   AA..         MOV       R2,?V8
   \   000117   AB..         MOV       R3,?V9
   \   000119   A9..         MOV       R1,?V11
   1972              }
   \   00011B   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000121   E9           MOV       A,R1
   \   000122   F5..         MOV       ?V10,A
   1973          
   1974              zcl_mem_free( pCmdBuf );
   \                     ??zcl_SendDiscoverCmdsRspCmd_5:
   \   000124                ; Setup parameters for call to function osal_mem_free
   \   000124   AA..         MOV       R2,?V0
   \   000126   AB..         MOV       R3,?V1
   \   000128   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012B   8003         SJMP      ??zcl_SendDiscoverCmdsRspCmd_6
   1975            }
   1976            else
   1977            {
   1978              status = ZMemError;
   \                     ??zcl_SendDiscoverCmdsRspCmd_0:
   \   00012D   75..10       MOV       ?V10,#0x10
   1979            }
   1980          
   1981            return ( status );
   \                     ??zcl_SendDiscoverCmdsRspCmd_6:
   \   000130   A9..         MOV       R1,?V10
   \   000132   80..         SJMP      ??Subroutine222_0
   1982          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   A882         MOV       R0,DPL
   \   000007   A983         MOV       R1,DPH
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine272_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET
   1983          
   1984          /*********************************************************************
   1985           * @fn      zcl_SendDiscoverAttrsCmd
   1986           *
   1987           * @brief   Send a Discover Attributes command
   1988           *
   1989           * @param   dstAddr - destination address
   1990           * @param   clusterID - cluster ID
   1991           * @param   pDiscoverCmd - discover command to be sent
   1992           * @param   direction - direction of the command
   1993           * @param   seqNum - transaction sequence number
   1994           *
   1995           * @return  ZSuccess if OK
   1996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1997          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsCmd:
   1998                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1999                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   2001            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   2002            uint8 *buf;
   2003            ZStatus_t status;
   2004          
   2005            buf = zcl_mem_alloc( dataLen );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A03         MOV       R2,#0x3
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V4,R2
   \   000018   8B..         MOV       ?V5,R3
   2006            if ( buf != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   607F         JZ        ??zcl_SendDiscoverAttrsCmd_0
   \   00001E   7410         MOV       A,#0x10
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ?Subroutine98 & 0xFFFF
   2007            {
   2008              // Load the buffer - serially
   2009              uint8 *pBuf = buf;
   2010              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_169:
   \   000026   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000029   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   2011              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_381:
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   12....       LCALL     ?Subroutine46 & 0xFFFF
   2012              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   \                     ??CrossCallReturnLabel_59:
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   F0           MOVX      @DPTR,A
   2013          
   2014              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   2015                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00003B                ; Setup parameters for call to function zcl_SendCommand
   \   00003B   78..         MOV       R0,#?V4
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000040   75..03       MOV       ?V6,#0x3
   \   000043   75..00       MOV       ?V7,#0x0
   \   000046   78..         MOV       R0,#?V6
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7418         MOV       A,#0x18
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   E4           CLR       A
   \   000057   F5..         MOV       ?V6,A
   \   000059   78..         MOV       R0,#?V6
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   741A         MOV       A,#0x1a
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   741A         MOV       A,#0x1a
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000074   75..00       MOV       ?V3,#0x0
   \   000077   78..         MOV       R0,#?V3
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007C   75..0C       MOV       ?V3,#0xc
   \   00007F   78..         MOV       R0,#?V3
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000084   AC..         MOV       R4,?V0
   \   000086   AD..         MOV       R5,?V1
   \   000088   EE           MOV       A,R6
   \   000089   FA           MOV       R2,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FB           MOV       R3,A
   \   00008C   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000092   E9           MOV       A,R1
   \   000093   FE           MOV       R6,A
   2016              zcl_mem_free( buf );
   \   000094                ; Setup parameters for call to function osal_mem_free
   \   000094   AA..         MOV       R2,?V4
   \   000096   AB..         MOV       R3,?V5
   \   000098   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00009B   8002         SJMP      ??zcl_SendDiscoverAttrsCmd_1
   2017            }
   2018            else
   2019            {
   2020              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsCmd_0:
   \   00009D   7E10         MOV       R6,#0x10
   2021            }
   2022          
   2023            return ( status );
   \                     ??zcl_SendDiscoverAttrsCmd_1:
   \   00009F   EE           MOV       A,R6
   \   0000A0   F9           MOV       R1,A
   \   0000A1   02....       LJMP      ??Subroutine230_0 & 0xFFFF
   2024          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2025          
   2026          /*********************************************************************
   2027           * @fn      zcl_SendDiscoverAttrsRspCmd
   2028           *
   2029           * @brief   Send a Discover Attributes Response command
   2030           *
   2031           * @param   dstAddr - destination address
   2032           * @param   clusterID - cluster ID
   2033           * @param   reportRspCmd - report response command to be sent
   2034           * @param   direction - direction of the command
   2035           * @param   seqNum - transaction sequence number
   2036           *
   2037           * @return  ZSuccess if OK
   2038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2039          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsRspCmd:
   2040                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   2041                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V8,R1
   \   000007   8A..         MOV       ?V10,R2
   \   000009   8B..         MOV       ?V11,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine68 & 0xFFFF
   2043            uint16 dataLen = 1; // Discovery complete
   2044            uint8 *buf;
   2045            ZStatus_t status;
   2046          
   2047            // calculate the size of the command
   2048            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   \                     ??CrossCallReturnLabel_110:
   \   000017   75F003       MOV       B,#0x3
   \   00001A   A4           MUL       AB
   \   00001B   A9F0         MOV       R1,B
   \   00001D   2401         ADD       A,#0x1
   \   00001F   F5..         MOV       ?V6,A
   \   000021   E4           CLR       A
   \   000022   39           ADDC      A,R1
   \   000023   12....       LCALL     ?Subroutine131 & 0xFFFF
   2049          
   2050            buf = zcl_mem_alloc( dataLen );
   2051            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_630:
   \   000026   7003         JNZ       $+5
   \   000028   02....       LJMP      ??zcl_SendDiscoverAttrsRspCmd_0 & 0xFFFF
   2052            {
   2053              // Load the buffer - serially
   2054              uint8 i;
   2055              uint8 *pBuf = buf;
   2056          
   2057              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00002B   85..82       MOV       DPL,?V4
   \   00002E   85..83       MOV       DPH,?V5
   \   000031   12....       LCALL     ?Subroutine43 & 0xFFFF
   2058          
   2059              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_54:
   \   000034   8025         SJMP      ??zcl_SendDiscoverAttrsRspCmd_1
   2060              {
   2061                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   \                     ??zcl_SendDiscoverAttrsRspCmd_2:
   \   000036   EA           MOV       A,R2
   \   000037   75F003       MOV       B,#0x3
   \   00003A   A4           MUL       AB
   \   00003B   FC           MOV       R4,A
   \   00003C   ADF0         MOV       R5,B
   \   00003E   E5..         MOV       A,?V4
   \   000040   2C           ADD       A,R4
   \   000041   FC           MOV       R4,A
   \   000042   E5..         MOV       A,?V5
   \   000044   3D           ADDC      A,R5
   \   000045   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000048   12....       LCALL     ?Subroutine26 & 0xFFFF
   2062                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   2063                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   \                     ??CrossCallReturnLabel_22:
   \   00004B   8C82         MOV       DPL,R4
   \   00004D   8D83         MOV       DPH,R5
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   12....       LCALL     ?Subroutine92 & 0xFFFF
   2064              }
   \                     ??CrossCallReturnLabel_157:
   \   000056   F8           MOV       R0,A
   \   000057   5001         JNC       ??zcl_SendDiscoverAttrsRspCmd_3
   \   000059   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsRspCmd_3:
   \   00005A   0A           INC       R2
   \                     ??zcl_SendDiscoverAttrsRspCmd_1:
   \   00005B   85..82       MOV       DPL,?V2
   \   00005E   85..83       MOV       DPH,?V3
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FB           MOV       R3,A
   \   000063   EA           MOV       A,R2
   \   000064   C3           CLR       C
   \   000065   9B           SUBB      A,R3
   \   000066   40CE         JC        ??zcl_SendDiscoverAttrsRspCmd_2
   2065          
   2066              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   2067                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000068                ; Setup parameters for call to function zcl_SendCommand
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   78..         MOV       R0,#?V6
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   7420         MOV       A,#0x20
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007D   E4           CLR       A
   \   00007E   F5..         MOV       ?V2,A
   \   000080   F5..         MOV       ?V3,A
   \   000082   78..         MOV       R0,#?V2
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   7422         MOV       A,#0x22
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000092   7422         MOV       A,#0x22
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009D   75..00       MOV       ?V2,#0x0
   \   0000A0   78..         MOV       R0,#?V2
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   75..0D       MOV       ?V2,#0xd
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   EE           MOV       A,R6
   \   0000AE   FC           MOV       R4,A
   \   0000AF   EF           MOV       A,R7
   \   0000B0   FD           MOV       R5,A
   \   0000B1   AA..         MOV       R2,?V10
   \   0000B3   AB..         MOV       R3,?V11
   \   0000B5   A9..         MOV       R1,?V8
   \   0000B7   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   0000BA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BD   E9           MOV       A,R1
   \   0000BE   FE           MOV       R6,A
   2068              zcl_mem_free( buf );
   \   0000BF                ; Setup parameters for call to function osal_mem_free
   \   0000BF   AA..         MOV       R2,?V0
   \   0000C1   AB..         MOV       R3,?V1
   \   0000C3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C6   8002         SJMP      ??zcl_SendDiscoverAttrsRspCmd_4
   2069            }
   2070            else
   2071            {
   2072              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsRspCmd_0:
   \   0000C8   7E10         MOV       R6,#0x10
   2073            }
   2074          
   2075            return ( status );
   \                     ??zcl_SendDiscoverAttrsRspCmd_4:
   \   0000CA                REQUIRE ?Subroutine12
   \   0000CA                ; // Fall through to label ?Subroutine12
   2076          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   02....       LJMP      ??Subroutine255_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   FD           MOV       R5,A
   \   000001   EC           MOV       A,R4
   \   000002   2402         ADD       A,#0x2
   \   000004   F5..         MOV       ?V12,A
   \   000006   E4           CLR       A
   \   000007   3D           ADDC      A,R5
   \   000008   F5..         MOV       ?V13,A
   \   00000A   85..82       MOV       DPL,?V12
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   A3           INC       DPTR
   \   000004   8582..       MOV       ?V2,DPL
   \   000007   8583..       MOV       ?V3,DPH
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET
   2077          
   2078          /*********************************************************************
   2079           * @fn      zcl_SendDiscoverAttrsExt
   2080           *
   2081           * @brief   Send a Discover Attributes Extended command
   2082           *
   2083           * @param   dstAddr - destination address
   2084           * @param   clusterID - cluster ID
   2085           * @param   pDiscoverAttrsExt:
   2086           *            - startAttrID: the first attribute to be selected
   2087           *            - maxAttrIDs: maximum number of returned attributes
   2088           * @param   direction - direction of the command
   2089           * @param   seqNum - transaction sequence number
   2090           *
   2091           * @return  ZSuccess if OK
   2092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2093          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExt:
   2094                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   2095                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2096          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine25 & 0xFFFF
   2097            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   2098            ZStatus_t status;
   2099          
   2100            // Load the buffer - serially
   2101            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   2102            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   \                     ??CrossCallReturnLabel_380:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   12....       LCALL     ?Subroutine46 & 0xFFFF
   2103            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   \                     ??CrossCallReturnLabel_60:
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   F0           MOVX      @DPTR,A
   2104          
   2105            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   2106                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   2107          
   2108            return ( status );
   \   00002A                ; Setup parameters for call to function zcl_SendCommand
   \   00002A   A8..         MOV       R0,?XSP + 0
   \   00002C   A9..         MOV       R1,?XSP + 1
   \   00002E   88..         MOV       ?V2,R0
   \   000030   89..         MOV       ?V3,R1
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..03       MOV       ?V2,#0x3
   \   00003A   75..00       MOV       ?V3,#0x0
   \   00003D   78..         MOV       R0,#?V2
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   7417         MOV       A,#0x17
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V1,A
   \   00004A   78..         MOV       R0,#?V1
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   E4           CLR       A
   \   000050   F5..         MOV       ?V2,A
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7419         MOV       A,#0x19
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F5..         MOV       ?V1,A
   \   00005F   78..         MOV       R0,#?V1
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   7419         MOV       A,#0x19
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V1,A
   \   00006C   78..         MOV       R0,#?V1
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000071   75..00       MOV       ?V1,#0x0
   \   000074   78..         MOV       R0,#?V1
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   75..15       MOV       ?V1,#0x15
   \   00007C   78..         MOV       R0,#?V1
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000081   A9..         MOV       R1,?V0
   \   000083   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   7403         MOV       A,#0x3
   \   00008B   02....       LJMP      ?Subroutine1 & 0xFFFF
   2109          }
   2110          
   2111          /*********************************************************************
   2112           * @fn      zcl_SendDiscoverAttrsExtRsp
   2113           *
   2114           * @brief   Send a Discover Attributes Extended Response command
   2115           *
   2116           * @param   dstAddr - destination address
   2117           * @param   clusterID - cluster ID
   2118           * @param   pDiscoverRspCmd:
   2119           *            - discComplete: indicates whether all requested attributes returned
   2120           *            - attrID: attribute ID
   2121           *            - attrDataType: data type of the given attribute
   2122           *            - attrAccessControl: access control of the given attribute
   2123           * @param   direction - direction of the command
   2124           * @param   seqNum - transaction sequence number
   2125           *
   2126           * @return  ZSuccess if OK
   2127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2128          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExtRsp:
   2129                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   2130                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2131          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V10,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine68 & 0xFFFF
   2132            uint8 *buf;
   2133            uint8 i;
   2134            uint16 dataLen = 1; // Discovery complete
   2135            ZStatus_t status;
   2136          
   2137            // calculate the size of the command
   2138            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   \                     ??CrossCallReturnLabel_111:
   \   000017   F5..         MOV       ?V0,A
   \   000019   75..00       MOV       ?V1,#0x0
   \   00001C   7402         MOV       A,#0x2
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?S_SHL
   \   000023   E5..         MOV       A,?V0
   \   000025   2401         ADD       A,#0x1
   \   000027   F5..         MOV       ?V6,A
   \   000029   E4           CLR       A
   \   00002A   35..         ADDC      A,?V1
   \   00002C   12....       LCALL     ?Subroutine131 & 0xFFFF
   2139          
   2140            buf = zcl_mem_alloc( dataLen );
   2141            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_631:
   \   00002F   7003         JNZ       $+5
   \   000031   02....       LJMP      ??zcl_SendDiscoverAttrsExtRsp_0 & 0xFFFF
   2142            {
   2143              // Load the buffer - serially
   2144              uint8 *pBuf = buf;
   2145              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000034   85..82       MOV       DPL,?V4
   \   000037   85..83       MOV       DPH,?V5
   \   00003A   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00003D   A3           INC       DPTR
   \   00003E   AA82         MOV       R2,DPL
   \   000040   AB83         MOV       R3,DPH
   2146              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \   000042   7900         MOV       R1,#0x0
   \   000044   803A         SJMP      ??zcl_SendDiscoverAttrsExtRsp_1
   2147              {
   2148                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   \                     ??zcl_SendDiscoverAttrsExtRsp_2:
   \   000046   E9           MOV       A,R1
   \   000047   F5..         MOV       ?V12,A
   \   000049   75..00       MOV       ?V13,#0x0
   \   00004C   7402         MOV       A,#0x2
   \   00004E   78..         MOV       R0,#?V12
   \   000050   12....       LCALL     ?S_SHL
   \   000053   E5..         MOV       A,?V4
   \   000055   25..         ADD       A,?V12
   \   000057   FC           MOV       R4,A
   \   000058   E5..         MOV       A,?V5
   \   00005A   35..         ADDC      A,?V13
   \   00005C   12....       LCALL     ?Subroutine140 & 0xFFFF
   2149                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2150                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   2151                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   2152              }
   \                     ??CrossCallReturnLabel_240:
   \   00005F   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000062   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000065   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000068   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00006B   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00006E   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000071   A3           INC       DPTR
   \   000072   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   F0           MOVX      @DPTR,A
   \   000078   EA           MOV       A,R2
   \   000079   2404         ADD       A,#0x4
   \   00007B   FA           MOV       R2,A
   \   00007C   5001         JNC       ??zcl_SendDiscoverAttrsExtRsp_3
   \   00007E   0B           INC       R3
   \                     ??zcl_SendDiscoverAttrsExtRsp_3:
   \   00007F   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsExtRsp_1:
   \   000080   85..82       MOV       DPL,?V2
   \   000083   85..83       MOV       DPH,?V3
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F8           MOV       R0,A
   \   000088   E9           MOV       A,R1
   \   000089   C3           CLR       C
   \   00008A   98           SUBB      A,R0
   \   00008B   40B9         JC        ??zcl_SendDiscoverAttrsExtRsp_2
   2153          
   2154              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2155                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00008D                ; Setup parameters for call to function zcl_SendCommand
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   78..         MOV       R0,#?V6
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   7420         MOV       A,#0x20
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A2   E4           CLR       A
   \   0000A3   F5..         MOV       ?V2,A
   \   0000A5   F5..         MOV       ?V3,A
   \   0000A7   78..         MOV       R0,#?V2
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   7422         MOV       A,#0x22
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B7   7422         MOV       A,#0x22
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   75..00       MOV       ?V2,#0x0
   \   0000C5   78..         MOV       R0,#?V2
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   75..16       MOV       ?V2,#0x16
   \   0000CD   78..         MOV       R0,#?V2
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D2   EE           MOV       A,R6
   \   0000D3   FC           MOV       R4,A
   \   0000D4   EF           MOV       A,R7
   \   0000D5   FD           MOV       R5,A
   \   0000D6   AA..         MOV       R2,?V8
   \   0000D8   AB..         MOV       R3,?V9
   \   0000DA   A9..         MOV       R1,?V10
   \   0000DC   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV       A,R1
   \   0000E3   FE           MOV       R6,A
   2156              zcl_mem_free( buf );
   \   0000E4                ; Setup parameters for call to function osal_mem_free
   \   0000E4   AA..         MOV       R2,?V0
   \   0000E6   AB..         MOV       R3,?V1
   \   0000E8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000EB   8002         SJMP      ??zcl_SendDiscoverAttrsExtRsp_4
   2157            }
   2158            else
   2159            {
   2160              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsExtRsp_0:
   \   0000ED   7E10         MOV       R6,#0x10
   2161            }
   2162          
   2163            return ( status );
   \                     ??zcl_SendDiscoverAttrsExtRsp_4:
   \   0000EF   02....       LJMP      ?Subroutine12 & 0xFFFF
   2164          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   8C82         MOV       DPL,R4
   \   000004   8D83         MOV       DPH,R5
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   2165          #endif // ZCL_DISCOVER
   2166          
   2167          /*********************************************************************
   2168           * @fn      zcl_ProcessMessageMSG
   2169           *
   2170           * @brief   Data message processor callback.  This function processes
   2171           *          any incoming data - probably from other devices.  So, based
   2172           *          on cluster ID, perform the intended action.
   2173           *
   2174           * @param   pkt - incoming message
   2175           *
   2176           * @return  zclProcMsgStatus_t
   2177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2178          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2179          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2180            endPointDesc_t *epDesc;
   2181            zclIncoming_t inMsg;
   2182            zclLibPlugin_t *pInPlugin;
   2183            zclDefaultRspCmd_t defautlRspCmd;
   2184            uint8 options;
   2185            uint8 securityEnable;
   2186            uint8 interPanMsg;
   2187            ZStatus_t status = ZFailure;
   2188            uint8 defaultResponseSent = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   2189          
   2190            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000010   EA           MOV       A,R2
   \   000011   2420         ADD       A,#0x20
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   88..         MOV       ?V0,R0
   \   000018   F5..         MOV       ?V1,A
   \   00001A   8882         MOV       DPL,R0
   \   00001C   F583         MOV       DPH,A
   \   00001E   C3           CLR       C
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   9403         SUBB      A,#0x3
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   9400         SUBB      A,#0x0
   \   000026   5005         JNC       ??zcl_ProcessMessageMSG_0
   2191            {
   2192              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   000028   7901         MOV       R1,#0x1
   \   00002A   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2193            }
   2194          
   2195            // Initialize
   2196            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   00002D   90....       MOV       DPTR,#rawAFMsg
   \   000030   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   2197            inMsg.msg = pkt;
   \                     ??CrossCallReturnLabel_613:
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   2198            inMsg.attrCmd = NULL;
   \                     ??CrossCallReturnLabel_614:
   \   00003B   740E         MOV       A,#0xe
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   2199            inMsg.pData = NULL;
   \   000044   740A         MOV       A,#0xa
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   2200            inMsg.pDataLen = 0;
   \   00004D   740C         MOV       A,#0xc
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
   2201          
   2202            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   000056   EA           MOV       A,R2
   \   000057   2422         ADD       A,#0x22
   \   000059   F8           MOV       R0,A
   \   00005A   E4           CLR       A
   \   00005B   3F           ADDC      A,R7
   \   00005C   88..         MOV       ?V2,R0
   \   00005E   F5..         MOV       ?V3,A
   \   000060                ; Setup parameters for call to function zclParseHdr
   \   000060   8882         MOV       DPL,R0
   \   000062   F583         MOV       DPH,A
   \   000064   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   AA82         MOV       R2,DPL
   \   00006E   AB83         MOV       R3,DPH
   \   000070   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   000073   8A..         MOV       ?V4,R2
   \   000075   8B..         MOV       ?V5,R3
   \   000077   A8..         MOV       R0,?V4
   \   000079   A9..         MOV       R1,?V5
   \   00007B   740A         MOV       A,#0xa
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   EA           MOV       A,R2
   \   000081   F0           MOVX      @DPTR,A
   \   000082   A3           INC       DPTR
   \   000083   EB           MOV       A,R3
   \   000084   12....       LCALL     ?Subroutine35 & 0xFFFF
   2203            inMsg.pDataLen = pkt->cmd.DataLength;
   2204            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_39:
   \   000087   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   00008A   EA           MOV       A,R2
   \   00008B   C3           CLR       C
   \   00008C   98           SUBB      A,R0
   \   00008D   F8           MOV       R0,A
   \   00008E   EB           MOV       A,R3
   \   00008F   99           SUBB      A,R1
   \   000090   F9           MOV       R1,A
   \   000091   85..82       MOV       DPL,?V2
   \   000094   85..83       MOV       DPH,?V3
   \   000097   E0           MOVX      A,@DPTR
   \   000098   28           ADD       A,R0
   \   000099   F8           MOV       R0,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   39           ADDC      A,R1
   \   00009D   F9           MOV       R1,A
   \   00009E   740C         MOV       A,#0xc
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   2205          
   2206            // Temporary workaround to allow callback functions access to the
   2207            // transaction sequence number.  Callback functions will call
   2208            // zcl_getParsedTransSeqNum() to retrieve this number.
   2209            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \                     ??CrossCallReturnLabel_529:
   \   0000A6   7408         MOV       A,#0x8
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000AF   F0           MOVX      @DPTR,A
   2210          
   2211            // Find the wanted endpoint
   2212            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000B0   EE           MOV       A,R6
   \   0000B1   2414         ADD       A,#0x14
   \   0000B3   F5..         MOV       ?V0,A
   \   0000B5   E4           CLR       A
   \   0000B6   3F           ADDC      A,R7
   \   0000B7   F5..         MOV       ?V1,A
   \   0000B9                ; Setup parameters for call to function afFindEndPointDesc
   \   0000B9   85..82       MOV       DPL,?V0
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F9           MOV       R1,A
   \   0000C0   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000C3   8A82         MOV       DPL,R2
   \   0000C5   8B83         MOV       DPH,R3
   2213            if ( epDesc == NULL )
   \   0000C7   E582         MOV       A,DPL
   \   0000C9   4583         ORL       A,DPH
   \   0000CB   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2214            {
   2215              rawAFMsg = NULL;
   \   0000CD   90....       MOV       DPTR,#rawAFMsg
   \   0000D0   E4           CLR       A
   \   0000D1   F0           MOVX      @DPTR,A
   \   0000D2   A3           INC       DPTR
   \   0000D3   F0           MOVX      @DPTR,A
   2216              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000D4   7902         MOV       R1,#0x2
   \   0000D6   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2217            }
   2218          
   2219            if ( ( epDesc->simpleDesc == NULL ) ||
   2220                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2221                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000D9   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   0000DC   602B         JZ        ??zcl_ProcessMessageMSG_3
   \   0000DE   EE           MOV       A,R6
   \   0000DF   2404         ADD       A,#0x4
   \   0000E1   F5..         MOV       ?V2,A
   \   0000E3   E4           CLR       A
   \   0000E4   3F           ADDC      A,R7
   \   0000E5   F5..         MOV       ?V3,A
   \   0000E7                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E7   A3           INC       DPTR
   \   0000E8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000EB   740B         MOV       A,#0xb
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   FD           MOV       R5,A
   \   0000F2   7406         MOV       A,#0x6
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   5403         ANL       A,#0x3
   \   0000FA   FC           MOV       R4,A
   \   0000FB   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000FE   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   000101   7402         MOV       A,#0x2
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   \   000106   E9           MOV       A,R1
   \   000107   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2222            {
   2223              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   000109   90....       MOV       DPTR,#rawAFMsg
   \   00010C   E4           CLR       A
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   A3           INC       DPTR
   \   00010F   F0           MOVX      @DPTR,A
   2224              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   000110   7903         MOV       R1,#0x3
   \   000112   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2225            }
   2226          
   2227          #if defined ( INTER_PAN )
   2228            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   \                     ??zcl_ProcessMessageMSG_4:
   \   000115                ; Setup parameters for call to function StubAPS_InterPan
   \   000115   EE           MOV       A,R6
   \   000116   240F         ADD       A,#0xf
   \   000118   F582         MOV       DPL,A
   \   00011A   E4           CLR       A
   \   00011B   3F           ADDC      A,R7
   \   00011C   F583         MOV       DPH,A
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F9           MOV       R1,A
   \   000120   EE           MOV       A,R6
   \   000121   2410         ADD       A,#0x10
   \   000123   F582         MOV       DPL,A
   \   000125   E4           CLR       A
   \   000126   3F           ADDC      A,R7
   \   000127   F583         MOV       DPH,A
   \   000129   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00012C   601D         JZ        ??zcl_ProcessMessageMSG_5
   2229            {
   2230              // No foundation command is supported thru Inter-PAN communication.
   2231              // But the Light Link cluster uses a different Frame Control format
   2232              // for it's Inter-PAN messages, where the messages could be confused
   2233              // with the foundation commands.
   2234              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \   00012E   7404         MOV       A,#0x4
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   E0           MOVX      A,@DPTR
   \   000134   5403         ANL       A,#0x3
   \   000136   700C         JNZ       ??zcl_ProcessMessageMSG_6
   2235              {
   2236                rawAFMsg = NULL;
   \   000138   90....       MOV       DPTR,#rawAFMsg
   \   00013B   E4           CLR       A
   \   00013C   F0           MOVX      @DPTR,A
   \   00013D   A3           INC       DPTR
   \   00013E   F0           MOVX      @DPTR,A
   2237                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   \   00013F   7904         MOV       R1,#0x4
   \   000141   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2238              }
   2239          
   2240              interPanMsg = TRUE;
   \                     ??zcl_ProcessMessageMSG_6:
   \   000144   D2..         SETB      ?VB.1
   2241              options = AF_TX_OPTIONS_NONE;
   \   000146   75..00       MOV       ?V4,#0x0
   \   000149   800D         SJMP      ??zcl_ProcessMessageMSG_7
   2242            }
   2243            else
   2244          #endif
   2245            {
   2246              interPanMsg = FALSE;
   \                     ??zcl_ProcessMessageMSG_5:
   \   00014B   C2..         CLR       ?VB.1
   2247              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \   00014D                ; Setup parameters for call to function zclGetClusterOption
   \   00014D   12....       LCALL     ?Subroutine63 & 0xFFFF
   2248            }
   \                     ??CrossCallReturnLabel_94:
   \   000150   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000153   E9           MOV       A,R1
   \   000154   5440         ANL       A,#0x40
   \   000156   F5..         MOV       ?V4,A
   2249          
   2250            // Find the appropriate plugin
   2251            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \                     ??zcl_ProcessMessageMSG_7:
   \   000158   85..82       MOV       DPL,?V2
   \   00015B   85..83       MOV       DPH,?V3
   \   00015E   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000161   EA           MOV       A,R2
   \   000162   FC           MOV       R4,A
   \   000163   EB           MOV       A,R3
   \   000164   FD           MOV       R5,A
   \   000165   90....       MOV       DPTR,#plugins
   \   000168   8004         SJMP      ??zcl_ProcessMessageMSG_8
   \                     ??zcl_ProcessMessageMSG_9:
   \   00016A   8882         MOV       DPL,R0
   \   00016C   8983         MOV       DPH,R1
   \                     ??zcl_ProcessMessageMSG_8:
   \   00016E   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000171   7003         JNZ       $+5
   \   000173   02....       LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
   \   000176   8882         MOV       DPL,R0
   \   000178   8983         MOV       DPH,R1
   \   00017A   A3           INC       DPTR
   \   00017B   A3           INC       DPTR
   \   00017C   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00017F   C3           CLR       C
   \   000180   EA           MOV       A,R2
   \   000181   95..         SUBB      A,?V6
   \   000183   EB           MOV       A,R3
   \   000184   95..         SUBB      A,?V7
   \   000186   40E2         JC        ??zcl_ProcessMessageMSG_9
   \   000188   8882         MOV       DPL,R0
   \   00018A   8983         MOV       DPH,R1
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   C3           CLR       C
   \   000191   E0           MOVX      A,@DPTR
   \   000192   9C           SUBB      A,R4
   \   000193   A3           INC       DPTR
   \   000194   E0           MOVX      A,@DPTR
   \   000195   9D           SUBB      A,R5
   \   000196   40D2         JC        ??zcl_ProcessMessageMSG_9
   \   000198   E8           MOV       A,R0
   \   000199   FC           MOV       R4,A
   \   00019A   E9           MOV       A,R1
   \   00019B   FD           MOV       R5,A
   \   00019C   7404         MOV       A,#0x4
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   5407         ANL       A,#0x7
   \   0001A4   700D         JNZ       ??zcl_ProcessMessageMSG_11
   \   0001A6   7409         MOV       A,#0x9
   \   0001A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   640B         XRL       A,#0xb
   \   0001AE   7003         JNZ       $+5
   \   0001B0   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   2252          
   2253            // Local and remote Security options must match except for Default Response command
   2254            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   2255            {
   2256              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zcl_ProcessMessageMSG_11:
   \   0001B3   E5..         MOV       A,?V4
   \   0001B5   7003         JNZ       $+5
   \   0001B7   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   \   0001BA   EE           MOV       A,R6
   \   0001BB   2419         ADD       A,#0x19
   \   0001BD   F582         MOV       DPL,A
   \   0001BF   E4           CLR       A
   \   0001C0   3F           ADDC      A,R7
   \   0001C1   F583         MOV       DPH,A
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   6003         JZ        $+5
   \   0001C6   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   2257          
   2258              // Make sure that Clusters specifically defined to use security are received secure,
   2259              // any other cluster that wants to use APS security will be allowed
   2260              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   2261              {
   2262                if ( UNICAST_MSG( inMsg.msg ) )
   \   0001C9   7402         MOV       A,#0x2
   \   0001CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CE   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0001D1   707A         JNZ       ??zcl_ProcessMessageMSG_13
   \   0001D3   7402         MOV       A,#0x2
   \   0001D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   0001DB   7070         JNZ       ??zcl_ProcessMessageMSG_13
   2263                {
   2264                  // Send a Default Response command back with no Application Link Key security
   2265                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   0001DD                ; Setup parameters for call to function zclSetSecurityOption
   \   0001DD   7C00         MOV       R4,#0x0
   \   0001DF   85..82       MOV       DPL,?V0
   \   0001E2   85..83       MOV       DPH,?V1
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   F9           MOV       R1,A
   \   0001E7   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2266          
   2267                  defautlRspCmd.statusCode = status;
   \   0001EA   7401         MOV       A,#0x1
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   7401         MOV       A,#0x1
   \   0001F1   F0           MOVX      @DPTR,A
   2268                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001F2   7409         MOV       A,#0x9
   \   0001F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F7   12....       LCALL     ?Subroutine95 & 0xFFFF
   2269                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2270                                         inMsg.msg->clusterId, &defautlRspCmd,
   2271                                         !inMsg.hdr.fc.direction, true,
   2272                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_163:
   \   0001FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FD   E0           MOVX      A,@DPTR
   \   0001FE   F5..         MOV       ?V4,A
   \   000200   78..         MOV       R0,#?V4
   \   000202   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000205   7407         MOV       A,#0x7
   \   000207   12....       LCALL     ?XSTACK_DISP0_8
   \   00020A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00020D   75..01       MOV       ?V4,#0x1
   \   000210   78..         MOV       R0,#?V4
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000215   7408         MOV       A,#0x8
   \   000217   12....       LCALL     ?XSTACK_DISP0_8
   \   00021A   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   00021D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000220   7405         MOV       A,#0x5
   \   000222   12....       LCALL     ?XSTACK_DISP100_8
   \   000225   88..         MOV       ?V4,R0
   \   000227   89..         MOV       ?V5,R1
   \   000229   78..         MOV       R0,#?V4
   \   00022B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00022E   7409         MOV       A,#0x9
   \   000230   12....       LCALL     ?XSTACK_DISP0_8
   \   000233   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000236   12....       LCALL     ?XSTACK_DISP0_8
   \   000239   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00023C   12....       LCALL     ?XSTACK_DISP0_8
   \   00023F   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000242   12....       LCALL     ?DEALLOC_XSTACK8
   2273          
   2274                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   000245                ; Setup parameters for call to function zclSetSecurityOption
   \   000245   7C01         MOV       R4,#0x1
   \   000247   12....       LCALL     ?Subroutine63 & 0xFFFF
   2275                }
   \                     ??CrossCallReturnLabel_95:
   \   00024A   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2276          
   2277                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_13:
   \   00024D   90....       MOV       DPTR,#rawAFMsg
   \   000250   E4           CLR       A
   \   000251   F0           MOVX      @DPTR,A
   \   000252   A3           INC       DPTR
   \   000253   F0           MOVX      @DPTR,A
   2278                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   000254   7905         MOV       R1,#0x5
   \   000256   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2279              }
   2280            }
   \                     ??zcl_ProcessMessageMSG_10:
   \   000259   7C00         MOV       R4,#0x0
   \   00025B   7D00         MOV       R5,#0x0
   2281          
   2282            // Is this a foundation type message
   2283            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_12:
   \   00025D   A2..         MOV       C,?VB.1
   \   00025F   5003         JNC       $+5
   \   000261   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   \   000264   7404         MOV       A,#0x4
   \   000266   12....       LCALL     ?XSTACK_DISP0_8
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   F8           MOV       R0,A
   \   00026B   5403         ANL       A,#0x3
   \   00026D   6003         JZ        $+5
   \   00026F   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   2284            {
   2285              if ( inMsg.hdr.fc.manuSpecific )
   \   000272   E8           MOV       A,R0
   \   000273   5404         ANL       A,#0x4
   \   000275   6005         JZ        ??zcl_ProcessMessageMSG_15
   2286              {
   2287                // We don't support any manufacturer specific command
   2288                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   000277   7E84         MOV       R6,#-0x7c
   \   000279   02....       LJMP      ??zcl_ProcessMessageMSG_16 & 0xFFFF
   2289              }
   2290              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2291                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zcl_ProcessMessageMSG_15:
   \   00027C   7409         MOV       A,#0x9
   \   00027E   12....       LCALL     ?XSTACK_DISP0_8
   \   000281   E0           MOVX      A,@DPTR
   \   000282   F8           MOV       R0,A
   \   000283   C3           CLR       C
   \   000284   9417         SUBB      A,#0x17
   \   000286   4003         JC        $+5
   \   000288   02....       LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
   \   00028B   E8           MOV       A,R0
   \   00028C   F5..         MOV       ?V2,A
   \   00028E   75..00       MOV       ?V3,#0x0
   \   000291   7402         MOV       A,#0x2
   \   000293   78..         MOV       R0,#?V2
   \   000295   12....       LCALL     ?S_SHL
   \   000298   74..         MOV       A,#zclCmdTable & 0xff
   \   00029A   25..         ADD       A,?V2
   \   00029C   F582         MOV       DPL,A
   \   00029E   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   0002A0   35..         ADDC      A,?V3
   \   0002A2   F583         MOV       DPH,A
   \   0002A4   E4           CLR       A
   \   0002A5   93           MOVC      A,@A+DPTR
   \   0002A6   F8           MOV       R0,A
   \   0002A7   7401         MOV       A,#0x1
   \   0002A9   93           MOVC      A,@A+DPTR
   \   0002AA   F9           MOV       R1,A
   \   0002AB   E8           MOV       A,R0
   \   0002AC   49           ORL       A,R1
   \   0002AD   7003         JNZ       $+5
   \   0002AF   02....       LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
   2292              {
   2293                zclParseCmd_t parseCmd;
   2294          
   2295                parseCmd.endpoint = pkt->endPoint;
   \   0002B2   85..82       MOV       DPL,?V0
   \   0002B5   85..83       MOV       DPH,?V1
   \   0002B8   E0           MOVX      A,@DPTR
   \   0002B9   C0E0         PUSH      A
   \   0002BB   7410         MOV       A,#0x10
   \   0002BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C0   D0E0         POP       A
   \   0002C2   F0           MOVX      @DPTR,A
   2296                parseCmd.dataLen = inMsg.pDataLen;
   \   0002C3   740C         MOV       A,#0xc
   \   0002C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C8   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   0002CB   7411         MOV       A,#0x11
   \   0002CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D0   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   2297                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_615:
   \   0002D3   740A         MOV       A,#0xa
   \   0002D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D8   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   0002DB   7413         MOV       A,#0x13
   \   0002DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E0   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   2298          
   2299                // Parse the command, remember that the return value is a pointer to allocated memory
   2300                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_616:
   \   0002E3                ; Setup parameters for indirect call
   \   0002E3   7410         MOV       A,#0x10
   \   0002E5   12....       LCALL     ?XSTACK_DISP101_8
   \   0002E8   8882         MOV       DPL,R0
   \   0002EA   8983         MOV       DPH,R1
   \   0002EC   12....       LCALL     ?CALL_IND
   \   0002EF   8B..         MOV       ?V1,R3
   \   0002F1   A9..         MOV       R1,?V1
   \   0002F3   740E         MOV       A,#0xe
   \   0002F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F8   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   2301                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_617:
   \   0002FB   EA           MOV       A,R2
   \   0002FC   49           ORL       A,R1
   \   0002FD   6048         JZ        ??CrossCallReturnLabel_177
   \   0002FF   7409         MOV       A,#0x9
   \   000301   12....       LCALL     ?XSTACK_DISP0_8
   \   000304   E0           MOVX      A,@DPTR
   \   000305   F5..         MOV       ?V0,A
   \   000307   75..00       MOV       ?V1,#0x0
   \   00030A   7402         MOV       A,#0x2
   \   00030C   78..         MOV       R0,#?V0
   \   00030E   12....       LCALL     ?S_SHL
   \   000311   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   000313   25..         ADD       A,?V0
   \   000315   F582         MOV       DPL,A
   \   000317   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   000319   35..         ADDC      A,?V1
   \   00031B   F583         MOV       DPH,A
   \   00031D   E4           CLR       A
   \   00031E   93           MOVC      A,@A+DPTR
   \   00031F   F8           MOV       R0,A
   \   000320   7401         MOV       A,#0x1
   \   000322   93           MOVC      A,@A+DPTR
   \   000323   8882         MOV       DPL,R0
   \   000325   F583         MOV       DPH,A
   \   000327   E582         MOV       A,DPL
   \   000329   4583         ORL       A,DPH
   \   00032B   6012         JZ        ??zcl_ProcessMessageMSG_18
   2302                {
   2303                  // Process the command
   2304                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   00032D                ; Setup parameters for indirect call
   \   00032D   7402         MOV       A,#0x2
   \   00032F   12....       LCALL     ?XSTACK_DISP101_8
   \   000332   12....       LCALL     ?CALL_IND
   2305                  {
   2306                    // Couldn't find attribute in the table.
   2307                  }
   2308                }
   2309          
   2310                // Free the buffer
   2311                if ( inMsg.attrCmd )
   \   000335   740E         MOV       A,#0xe
   \   000337   12....       LCALL     ?XSTACK_DISP0_8
   \   00033A   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   00033D   6008         JZ        ??CrossCallReturnLabel_177
   2312                {
   2313                  zcl_mem_free( inMsg.attrCmd );
   \                     ??zcl_ProcessMessageMSG_18:
   \   00033F                ; Setup parameters for call to function osal_mem_free
   \   00033F   740E         MOV       A,#0xe
   \   000341   12....       LCALL     ?XSTACK_DISP0_8
   \   000344   12....       LCALL     ?Subroutine105 & 0xFFFF
   2314                }
   2315          
   2316                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??CrossCallReturnLabel_177:
   \   000347   7409         MOV       A,#0x9
   \   000349   12....       LCALL     ?XSTACK_DISP0_8
   \   00034C   E0           MOVX      A,@DPTR
   \   00034D   F8           MOV       R0,A
   \   00034E   605F         JZ        ??zcl_ProcessMessageMSG_19
   \   000350   7402         MOV       A,#0x2
   \   000352   68           XRL       A,R0
   \   000353   605A         JZ        ??zcl_ProcessMessageMSG_19
   \   000355   7403         MOV       A,#0x3
   \   000357   68           XRL       A,R0
   \   000358   6055         JZ        ??zcl_ProcessMessageMSG_19
   \   00035A   7405         MOV       A,#0x5
   \   00035C   68           XRL       A,R0
   \   00035D   6050         JZ        ??zcl_ProcessMessageMSG_19
   \   00035F   7406         MOV       A,#0x6
   \   000361   68           XRL       A,R0
   \   000362   604B         JZ        ??zcl_ProcessMessageMSG_19
   \   000364   7408         MOV       A,#0x8
   \   000366   68           XRL       A,R0
   \   000367   6046         JZ        ??zcl_ProcessMessageMSG_19
   \   000369   740C         MOV       A,#0xc
   \   00036B   68           XRL       A,R0
   \   00036C   6041         JZ        ??zcl_ProcessMessageMSG_19
   \   00036E   7411         MOV       A,#0x11
   \   000370   68           XRL       A,R0
   \   000371   603C         JZ        ??zcl_ProcessMessageMSG_19
   \   000373   7413         MOV       A,#0x13
   \   000375   68           XRL       A,R0
   \   000376   6037         JZ        ??zcl_ProcessMessageMSG_19
   \   000378   7415         MOV       A,#0x15
   \   00037A   68           XRL       A,R0
   \   00037B   6032         JZ        ??zcl_ProcessMessageMSG_19
   \   00037D   740B         MOV       A,#0xb
   \   00037F   68           XRL       A,R0
   \   000380   602D         JZ        ??zcl_ProcessMessageMSG_19
   2317                {
   2318                  rawAFMsg = NULL;
   2319                  return ( ZCL_PROC_SUCCESS ); // We're done
   2320                }
   2321          
   2322                status = ZSuccess;
   \   000382   7E00         MOV       R6,#0x0
   \   000384   8049         SJMP      ??zcl_ProcessMessageMSG_16
   2323              }
   2324              else
   2325              {
   2326                // Unsupported message
   2327                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_17:
   \   000386   7E82         MOV       R6,#-0x7e
   \   000388   8045         SJMP      ??zcl_ProcessMessageMSG_16
   2328              }
   2329            }
   2330            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2331            {
   2332              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_14:
   \   00038A   EC           MOV       A,R4
   \   00038B   4D           ORL       A,R5
   \   00038C   6031         JZ        ??zcl_ProcessMessageMSG_20
   \   00038E   8C82         MOV       DPL,R4
   \   000390   8D83         MOV       DPH,R5
   \   000392   A3           INC       DPTR
   \   000393   A3           INC       DPTR
   \   000394   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000397   6026         JZ        ??zcl_ProcessMessageMSG_20
   2333              {
   2334                // The return value of the plugin function will be
   2335                //  ZSuccess - Supported and need default response
   2336                //  ZFailure - Unsupported
   2337                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2338                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2339                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2340                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2341                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   000399                ; Setup parameters for indirect call
   \   000399   7402         MOV       A,#0x2
   \   00039B   12....       LCALL     ?XSTACK_DISP101_8
   \   00039E   12....       LCALL     ?CALL_IND
   \   0003A1   E9           MOV       A,R1
   \   0003A2   FE           MOV       R6,A
   2342                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   0003A3   74FF         MOV       A,#-0x1
   \   0003A5   6E           XRL       A,R6
   \   0003A6   6007         JZ        ??zcl_ProcessMessageMSG_19
   \   0003A8   A2..         MOV       C,?VB.1
   \   0003AA   500E         JNC       ??zcl_ProcessMessageMSG_21
   \   0003AC   E9           MOV       A,R1
   \   0003AD   700B         JNZ       ??zcl_ProcessMessageMSG_21
   2343                {
   2344                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_19:
   \   0003AF   90....       MOV       DPTR,#rawAFMsg
   \   0003B2   E4           CLR       A
   \   0003B3   F0           MOVX      @DPTR,A
   \   0003B4   A3           INC       DPTR
   \   0003B5   F0           MOVX      @DPTR,A
   2345                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   0003B6   F9           MOV       R1,A
   \   0003B7   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2346                }
   2347              }
   2348          
   2349              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_21:
   \   0003BA   7401         MOV       A,#0x1
   \   0003BC   6E           XRL       A,R6
   \   0003BD   7010         JNZ       ??zcl_ProcessMessageMSG_16
   2350              {
   2351                // Unsupported message
   2352                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zcl_ProcessMessageMSG_20:
   \   0003BF   7404         MOV       A,#0x4
   \   0003C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C4   E0           MOVX      A,@DPTR
   \   0003C5   5404         ANL       A,#0x4
   \   0003C7   6004         JZ        ??zcl_ProcessMessageMSG_22
   2353                {
   2354                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   0003C9   7E83         MOV       R6,#-0x7d
   \   0003CB   8002         SJMP      ??zcl_ProcessMessageMSG_16
   2355                }
   2356                else
   2357                {
   2358                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_22:
   \   0003CD   7E81         MOV       R6,#-0x7f
   2359                }
   2360              }
   2361            }
   2362          
   2363            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_16:
   \   0003CF   7402         MOV       A,#0x2
   \   0003D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D4   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0003D7   706B         JNZ       ??zcl_ProcessMessageMSG_23
   \   0003D9   7402         MOV       A,#0x2
   \   0003DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0003DE   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   0003E1   7061         JNZ       ??zcl_ProcessMessageMSG_23
   \   0003E3   7404         MOV       A,#0x4
   \   0003E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E8   E0           MOVX      A,@DPTR
   \   0003E9   FA           MOV       R2,A
   \   0003EA   5410         ANL       A,#0x10
   \   0003EC   7056         JNZ       ??zcl_ProcessMessageMSG_23
   2364            {
   2365              // Send a Default Response command back
   2366              defautlRspCmd.statusCode = status;
   \   0003EE   7401         MOV       A,#0x1
   \   0003F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F3   EE           MOV       A,R6
   \   0003F4   F0           MOVX      @DPTR,A
   2367              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0003F5   7409         MOV       A,#0x9
   \   0003F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0003FA   12....       LCALL     ?Subroutine95 & 0xFFFF
   2368              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2369                                     inMsg.msg->clusterId, &defautlRspCmd,
   2370                                     !inMsg.hdr.fc.direction, true,
   2371                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_164:
   \   0003FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000400   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000403   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000406   7407         MOV       A,#0x7
   \   000408   12....       LCALL     ?XSTACK_DISP0_8
   \   00040B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00040E   75..01       MOV       ?V0,#0x1
   \   000411   78..         MOV       R0,#?V0
   \   000413   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000416   EA           MOV       A,R2
   \   000417   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00041A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00041D   7405         MOV       A,#0x5
   \   00041F   12....       LCALL     ?XSTACK_DISP100_8
   \   000422   88..         MOV       ?V0,R0
   \   000424   89..         MOV       ?V1,R1
   \   000426   78..         MOV       R0,#?V0
   \   000428   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00042B   7409         MOV       A,#0x9
   \   00042D   12....       LCALL     ?XSTACK_DISP0_8
   \   000430   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000433   12....       LCALL     ?XSTACK_DISP0_8
   \   000436   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000439   12....       LCALL     ?XSTACK_DISP0_8
   \   00043C   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00043F   12....       LCALL     ?DEALLOC_XSTACK8
   2372              defaultResponseSent = TRUE;
   \   000442   D2..         SETB      ?VB.0
   2373            }
   2374          
   2375            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_23:
   \   000444   90....       MOV       DPTR,#rawAFMsg
   \   000447   E4           CLR       A
   \   000448   F0           MOVX      @DPTR,A
   \   000449   A3           INC       DPTR
   \   00044A   F0           MOVX      @DPTR,A
   2376            if ( status == ZSuccess )
   \   00044B   EE           MOV       A,R6
   \   00044C   7004         JNZ       ??zcl_ProcessMessageMSG_24
   2377            {
   2378              return ( ZCL_PROC_SUCCESS );
   \   00044E   7900         MOV       R1,#0x0
   \   000450   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2379            }
   2380            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_24:
   \   000452   7484         MOV       A,#-0x7c
   \   000454   6E           XRL       A,R6
   \   000455   A2..         MOV       C,?VB.0
   \   000457   700A         JNZ       ??zcl_ProcessMessageMSG_25
   2381            {
   2382              if ( defaultResponseSent )
   \   000459   5004         JNC       ??zcl_ProcessMessageMSG_26
   2383              {
   2384                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   00045B   7907         MOV       R1,#0x7
   \   00045D   800C         SJMP      ??zcl_ProcessMessageMSG_1
   2385              }
   2386              else
   2387              {
   2388                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_26:
   \   00045F   7906         MOV       R1,#0x6
   \   000461   8008         SJMP      ??zcl_ProcessMessageMSG_1
   2389              }
   2390            }
   2391            else
   2392            {
   2393              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_25:
   \   000463   5004         JNC       ??zcl_ProcessMessageMSG_27
   2394              {
   2395                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   000465   7909         MOV       R1,#0x9
   \   000467   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2396              }
   2397              else
   2398              {
   2399                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_27:
   \   000469   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   00046B   7415         MOV       A,#0x15
   2400              }
   2401            }
   \   00046D   02....       LJMP      ?Subroutine8 & 0xFFFF
   2402          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000003                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000003                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000003   7408         MOV       A,#0x8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   7409         MOV       A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000003   C8           XCH       A,R0
   \   000004   2415         ADD       A,#0x15
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000007   7407         MOV       A,#0x7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000006   7409         MOV       A,#0x9
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine225_0
   \   000004                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ??Subroutine275_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_695:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003                REQUIRE ??Subroutine231_0
   \   000003                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine207:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   13           RRC       A
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   541F         ANL       A,#0x1f
   \   000005   6401         XRL       A,#0x1
   \   000007   5401         ANL       A,#0x1
   \   000009   F5..         MOV       ?V0,A
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine262_0
   \   000004                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000003   F5..         MOV       ?V4,A
   \   000005   78..         MOV       R0,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   000003   6401         XRL       A,#0x1
   \   000005   5401         ANL       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine206:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL     ??Subroutine275_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_697:
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   22           RET
   2403          
   2404          /*********************************************************************
   2405           * PRIVATE FUNCTIONS
   2406           *********************************************************************/
   2407          
   2408          /*********************************************************************
   2409           * @fn      zclParseHdr
   2410           *
   2411           * @brief   Parse header of the ZCL format
   2412           *
   2413           * @param   hdr - place to put the frame control information
   2414           * @param   pData - incoming buffer to parse
   2415           *
   2416           * @return  pointer past the header
   2417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2418          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2420            // Clear the header
   2421            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2422          
   2423            // Parse the Frame Control
   2424            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   54FC         ANL       A,#0xfc
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E8           MOV       A,R0
   \   00002C   4A           ORL       A,R2
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E9           MOV       A,R1
   \   000036   12....       LCALL     ?Subroutine32 & 0xFFFF
   2425            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_33:
   \   000039   A2E2         MOV       C,0xE0 /* A   */.2
   \   00003B   5004         JNC       ??zclParseHdr_0
   \   00003D   D2F0         SETB      B.0
   \   00003F   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   000041   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   54FB         ANL       A,#0xfb
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A2F0         MOV       C,B.0
   \   00004F   E4           CLR       A
   \   000050   33           RLC       A
   \   000051   F5..         MOV       ?V2,A
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   7402         MOV       A,#0x2
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?S_SHL
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   45..         ORL       A,?V2
   \   000060   12....       LCALL     ?Subroutine32 & 0xFFFF
   2426            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_34:
   \   000063   A2E3         MOV       C,0xE0 /* A   */.3
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   5004         JNC       ??zclParseHdr_2
   2427            {
   2428              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006E   4408         ORL       A,#0x8
   \   000070   8002         SJMP      ??zclParseHdr_3
   2429            }
   2430            else
   2431            {
   2432              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   000072   54F7         ANL       A,#0xf7
   2433            }
   \                     ??zclParseHdr_3:
   \   000074   12....       LCALL     ?Subroutine32 & 0xFFFF
   2434          
   2435            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_35:
   \   000077   A2E4         MOV       C,0xE0 /* A   */.4
   \   000079   5004         JNC       ??zclParseHdr_4
   \   00007B   D2F0         SETB      B.0
   \   00007D   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007F   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   000081   85..82       MOV       DPL,?V0
   \   000084   85..83       MOV       DPH,?V1
   \   000087   E0           MOVX      A,@DPTR
   \   000088   54EF         ANL       A,#0xef
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A2F0         MOV       C,B.0
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   F5..         MOV       ?V2,A
   \   000091   7404         MOV       A,#0x4
   \   000093   78..         MOV       R0,#?V2
   \   000095   12....       LCALL     ?S_SHL
   \   000098   E0           MOVX      A,@DPTR
   \   000099   45..         ORL       A,?V2
   \   00009B   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   2436            pData++;  // move past the frame control field
   2437          
   2438            // parse the manfacturer code
   2439            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_476:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   5404         ANL       A,#0x4
   \   0000A7   6016         JZ        ??zclParseHdr_6
   2440            {
   2441              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   FA           MOV       R2,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   EA           MOV       A,R2
   \   0000B3   85..82       MOV       DPL,?V0
   \   0000B6   85..83       MOV       DPH,?V1
   \   0000B9   12....       LCALL     ?Subroutine23 & 0xFFFF
   2442              pData += 2;
   2443            }
   \                     ??CrossCallReturnLabel_503:
   \   0000BC   5001         JNC       ??zclParseHdr_6
   \   0000BE   0F           INC       R7
   2444          
   2445            // parse the Transaction Sequence Number
   2446            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000C6   A3           INC       DPTR
   \   0000C7   12....       LCALL     ?Subroutine28 & 0xFFFF
   2447          
   2448            // parse the Cluster's command ID
   2449            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_408:
   \   0000CA   85..82       MOV       DPL,?V0
   \   0000CD   85..83       MOV       DPH,?V1
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   F0           MOVX      @DPTR,A
   2450          
   2451            // Should point to the frame payload
   2452            return ( pData );
   \   0000D6   EE           MOV       A,R6
   \   0000D7   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   0000DA   3F           ADDC      A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   02....       LJMP      ??Subroutine212_0 & 0xFFFF
   2453          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine226_0
   \   000001                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000003   AE82         MOV       R6,DPL
   \   000005   AF83         MOV       R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E9           MOV       A,R1
   \   000005                REQUIRE ??Subroutine243_0
   \   000005                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2402         ADD       A,#0x2
   \   000004   FE           MOV       R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine210 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2454          
   2455          /*********************************************************************
   2456           * @fn      zclBuildHdr
   2457           *
   2458           * @brief   Build header of the ZCL format
   2459           *
   2460           * @param   hdr - outgoing header information
   2461           * @param   pData - outgoing header space
   2462           *
   2463           * @return  pointer past the header
   2464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2465          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2466          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2467            // Build the Frame Control byte
   2468            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   2469            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_420:
   \   000013   5404         ANL       A,#0x4
   \   000015   12....       LCALL     ?Subroutine38 & 0xFFFF
   2470            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_418:
   \   000018   5408         ANL       A,#0x8
   \   00001A   12....       LCALL     ?Subroutine38 & 0xFFFF
   2471            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_419:
   \   00001D   5410         ANL       A,#0x10
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   48           ORL       A,R0
   \   000026   F0           MOVX      @DPTR,A
   2472            pData++;  // move past the frame control field
   \   000027   A3           INC       DPTR
   \   000028   AC82         MOV       R4,DPL
   \   00002A   AD83         MOV       R5,DPH
   2473          
   2474            // Add the manfacturer code
   2475            if ( hdr->fc.manuSpecific )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5404         ANL       A,#0x4
   \   000033   6016         JZ        ??zclBuildHdr_0
   2476            {
   2477              *pData++ = LO_UINT16( hdr->manuCode );
   \   000035   12....       LCALL     ?Subroutine139 & 0xFFFF
   2478              *pData++ = HI_UINT16( hdr->manuCode );
   2479            }
   \                     ??CrossCallReturnLabel_417:
   \   000038   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   00003B   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   00003E   8C82         MOV       DPL,R4
   \   000040   8D83         MOV       DPH,R5
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   \   000044   EC           MOV       A,R4
   \   000045   2402         ADD       A,#0x2
   \   000047   FC           MOV       R4,A
   \   000048   5001         JNC       ??zclBuildHdr_0
   \   00004A   0D           INC       R5
   2480          
   2481            // Add the Transaction Sequence Number
   2482            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000055   12....       LCALL     ?Subroutine36 & 0xFFFF
   2483          
   2484            // Add the Cluster's command ID
   2485            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_43:
   \   000058   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   00005B   A3           INC       DPTR
   \   00005C   F0           MOVX      @DPTR,A
   2486          
   2487            // Should point to the frame payload
   2488            return ( pData );
   \   00005D   EC           MOV       A,R4
   \   00005E   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_679:
   \   000061   3D           ADDC      A,R5
   \   000062   FB           MOV       R3,A
   \   000063   80..         SJMP      ??Subroutine229_0
   2489          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F8           MOV       R0,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   48           ORL       A,R0
   \   000007                REQUIRE ??Subroutine228_0
   \   000007                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   2490          
   2491          /*********************************************************************
   2492           * @fn      zclCalcHdrSize
   2493           *
   2494           * @brief   Calculate the number of bytes needed for an outgoing
   2495           *          ZCL header.
   2496           *
   2497           * @param   hdr - outgoing header information
   2498           *
   2499           * @return  returns the number of bytes needed
   2500           */
   2501          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   2502          {
   2503            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   2504          
   2505            // Add the manfacturer code
   2506            if ( hdr->fc.manuSpecific )
   2507            {
   2508              needed += 2;
   2509            }
   2510          
   2511            return ( needed );
   2512          }
   2513          
   2514          /*********************************************************************
   2515           * @fn      zclFindPlugin
   2516           *
   2517           * @brief   Find the right plugin for a cluster ID
   2518           *
   2519           * @param   clusterID - cluster ID to look for
   2520           * @param   profileID - profile ID
   2521           *
   2522           * @return  pointer to plugin, NULL if not found
   2523           */
   2524          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   2525          {
   2526            zclLibPlugin_t *pLoop = plugins;
   2527          
   2528            (void)profileID;  // Intentionally unreferenced parameter
   2529          
   2530            while ( pLoop != NULL )
   2531            {
   2532              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2533              {
   2534                return ( pLoop );
   2535              }
   2536          
   2537              pLoop = pLoop->next;
   2538            }
   2539          
   2540            return ( (zclLibPlugin_t *)NULL );
   2541          }
   2542          
   2543          #ifdef ZCL_DISCOVER
   2544          /*********************************************************************
   2545           * @fn      zclFindCmdRecsList
   2546           *
   2547           * @brief   Find the right command record list for an endpoint
   2548           *
   2549           * @param   endpoint - endpoint to look for
   2550           *
   2551           * @return  pointer to record list, NULL if not found
   2552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2553          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   \                     zclFindCmdRecsList:
   2554          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2555            zclCmdRecsList_t *pLoop = gpCmdList;
   \   000004   90....       MOV       DPTR,#gpCmdList
   \   000007   8004         SJMP      ??zclFindCmdRecsList_0
   2556          
   2557            while ( pLoop != NULL )
   2558            {
   2559              if ( pLoop->endpoint == endpoint )
   2560              {
   2561                return ( pLoop );
   2562              }
   2563          
   2564              pLoop = pLoop->pNext;
   \                     ??zclFindCmdRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindCmdRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000010   600C         JZ        ??zclFindCmdRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindCmdRecsList_1
   \   00001C   8004         SJMP      ??zclFindCmdRecsList_3
   2565            }
   2566          
   2567            return ( NULL );
   \                     ??zclFindCmdRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindCmdRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2568          }
   2569          
   2570          /*********************************************************************
   2571           * @fn      zclFindCmdRec
   2572           *
   2573           * @brief   Find the command record that matchs the parameters
   2574           *
   2575           * @param   endpoint - Application's endpoint
   2576           * @param   clusterID - cluster ID
   2577           * @param   attrId - attribute looking for
   2578           * @param   pAttr - attribute record to be returned
   2579           *
   2580           * @return  TRUE if record found. FALSE, otherwise.
   2581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2582          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   \                     zclFindCmdRec:
   2583          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2584            uint8 i;
   2585            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000B   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   2586          
   2587            if ( pRec != NULL )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   604F         JZ        ??zclFindCmdRec_0
   2588            {
   2589              for ( i = 0; i < pRec->numCommands; i++ )
   \   000016   7C00         MOV       R4,#0x0
   \   000018   8001         SJMP      ??zclFindCmdRec_1
   \                     ??zclFindCmdRec_2:
   \   00001A   0C           INC       R4
   \                     ??zclFindCmdRec_1:
   \   00001B   85..82       MOV       DPL,?V2
   \   00001E   85..83       MOV       DPH,?V3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000027   503C         JNC       ??zclFindCmdRec_0
   2590              {
   2591                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   \   000029   EC           MOV       A,R4
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   75..00       MOV       ?V5,#0x0
   \   00002F   7402         MOV       A,#0x2
   \   000031   78..         MOV       R0,#?V4
   \   000033   12....       LCALL     ?S_SHL
   \   000036   85..82       MOV       DPL,?V2
   \   000039   85..83       MOV       DPH,?V3
   \   00003C   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00003F   8882         MOV       DPL,R0
   \   000041   F583         MOV       DPH,A
   \   000043   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000046   7002         JNZ       ??zclFindCmdRec_3
   \   000048   EF           MOV       A,R7
   \   000049   6B           XRL       A,R3
   \                     ??zclFindCmdRec_3:
   \   00004A   70CE         JNZ       ??zclFindCmdRec_2
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E4           CLR       A
   \   00004F   93           MOVC      A,@A+DPTR
   \   000050   65..         XRL       A,?V1
   \   000052   70C6         JNZ       ??zclFindCmdRec_2
   2592                {
   2593                  *pCmd = pRec->pCmdRecs[i];
   \   000054   740E         MOV       A,#0xe
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2594          
   2595                  return ( TRUE ); // EMBEDDED RETURN
   \   000061   7901         MOV       R1,#0x1
   \   000063   8002         SJMP      ??zclFindCmdRec_4
   2596                }
   2597              }
   2598            }
   2599          
   2600            return ( FALSE );
   \                     ??zclFindCmdRec_0:
   \   000065   7900         MOV       R1,#0x0
   \                     ??zclFindCmdRec_4:
   \   000067   02....       LJMP      ?Subroutine4 & 0xFFFF
   2601          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   E4           CLR       A
   \   000001   93           MOVC      A,@A+DPTR
   \   000002   FA           MOV       R2,A
   \   000003   7401         MOV       A,#0x1
   \   000005   93           MOVC      A,@A+DPTR
   \   000006   FB           MOV       R3,A
   \   000007   EE           MOV       A,R6
   \   000008   6A           XRL       A,R2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000003   8983         MOV       DPH,R1
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   25..         ADD       A,?V4
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   35..         ADDC      A,?V5
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   EC           MOV       A,R4
   \   000003   C3           CLR       C
   \   000004   98           SUBB      A,R0
   \   000005   22           RET
   2602          #endif // ZCL_DISCOVER
   2603          
   2604          /*********************************************************************
   2605           * @fn      zclFindAttrRecsList
   2606           *
   2607           * @brief   Find the right attribute record list for an endpoint
   2608           *
   2609           * @param   clusterID - endpointto look for
   2610           *
   2611           * @return  pointer to record list, NULL if not found
   2612           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2613          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2614          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2615            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2616          
   2617            while ( pLoop != NULL )
   2618            {
   2619              if ( pLoop->endpoint == endpoint )
   2620              {
   2621                return ( pLoop );
   2622              }
   2623          
   2624              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000010   600C         JZ        ??zclFindAttrRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP      ??zclFindAttrRecsList_3
   2625            }
   2626          
   2627            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2628          }
   2629          
   2630          /*********************************************************************
   2631           * @fn      zclFindAttrRec
   2632           *
   2633           * @brief   Find the attribute record that matchs the parameters
   2634           *
   2635           * @param   endpoint - Application's endpoint
   2636           * @param   clusterID - cluster ID
   2637           * @param   attrId - attribute looking for
   2638           * @param   pAttr - attribute record to be returned
   2639           *
   2640           * @return  TRUE if record found. FALSE, otherwise.
   2641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2642          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2643          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2644            uint8 x;
   2645            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   2646          
   2647            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   6062         JZ        ??zclFindAttrRec_0
   2648            {
   2649              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000018   7C00         MOV       R4,#0x0
   \   00001A   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   00001C   0C           INC       R4
   \                     ??zclFindAttrRec_1:
   \   00001D   85..82       MOV       DPL,?V4
   \   000020   85..83       MOV       DPH,?V5
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   00002D   504B         JNC       ??zclFindAttrRec_0
   2650              {
   2651                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   00002F   EC           MOV       A,R4
   \   000030   F5..         MOV       ?V6,A
   \   000032   75..00       MOV       ?V7,#0x0
   \   000035   7403         MOV       A,#0x3
   \   000037   78..         MOV       R0,#?V6
   \   000039   12....       LCALL     ?S_SHL
   \   00003C   85..82       MOV       DPL,?V4
   \   00003F   85..83       MOV       DPH,?V5
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000049   8882         MOV       DPL,R0
   \   00004B   F583         MOV       DPH,A
   \   00004D   E4           CLR       A
   \   00004E   93           MOVC      A,@A+DPTR
   \   00004F   FA           MOV       R2,A
   \   000050   7401         MOV       A,#0x1
   \   000052   93           MOVC      A,@A+DPTR
   \   000053   FB           MOV       R3,A
   \   000054   E5..         MOV       A,?V0
   \   000056   6A           XRL       A,R2
   \   000057   7003         JNZ       ??zclFindAttrRec_3
   \   000059   E5..         MOV       A,?V1
   \   00005B   6B           XRL       A,R3
   \                     ??zclFindAttrRec_3:
   \   00005C   70BE         JNZ       ??zclFindAttrRec_2
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000063   7002         JNZ       ??zclFindAttrRec_4
   \   000065   EF           MOV       A,R7
   \   000066   6B           XRL       A,R3
   \                     ??zclFindAttrRec_4:
   \   000067   70B3         JNZ       ??zclFindAttrRec_2
   2652                {
   2653                  *pAttr = pRec->attrs[x];
   \   000069   7410         MOV       A,#0x10
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000071   7408         MOV       A,#0x8
   \   000073   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2654          
   2655                  return ( TRUE ); // EMBEDDED RETURN
   \   000076   7901         MOV       R1,#0x1
   \   000078   8002         SJMP      ??zclFindAttrRec_5
   2656                }
   2657              }
   2658            }
   2659          
   2660            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   00007A   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   00007C   80..         SJMP      ??Subroutine230_0
   2661          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   25..         ADD       A,?V6
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   35..         ADDC      A,?V7
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET
   2662          
   2663          #if defined ( ZCL_STANDALONE )
   2664          /*********************************************************************
   2665           * @fn      zclSetAttrRecList
   2666           *
   2667           * @brief   Set attribute record list for end point
   2668           *
   2669           * @param   endpoint - endpoint the attribute list belongs to
   2670           * @param   numAttr - number of attributes in list
   2671           * @param   attrList - array of attribute records.
   2672           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2673           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2674           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2675           *                     ATTRIBUTE INFO
   2676           *
   2677           * @return  TRUE if successful, FALSE otherwise.
   2678           */
   2679          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2680          {
   2681            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2682          
   2683            if ( pRecsList != NULL )
   2684            {
   2685              pRecsList->numAttributes = numAttr;
   2686              pRecsList->attrs = attrList;
   2687              return ( TRUE );
   2688            }
   2689          
   2690            return ( FALSE );
   2691          }
   2692          
   2693          #endif // ZCL_STANDALONE
   2694          
   2695          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2696          /*********************************************************************
   2697           * @fn      zclGetReadWriteCB
   2698           *
   2699           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2700           *
   2701           * @param   endpoint - Application's endpoint
   2702           *
   2703           * @return  Read/Write CB, NULL if not found
   2704           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2705          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   2706          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2707            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     ?Subroutine142 & 0xFFFF
   2708          
   2709            if ( pRec != NULL )
   \                     ??CrossCallReturnLabel_244:
   \   000008   6005         JZ        ??zclGetReadWriteCB_0
   2710            {
   2711              return ( pRec->pfnReadWriteCB );
   \   00000A   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   2712            }
   \                     ??CrossCallReturnLabel_456:
   \   00000D   8004         SJMP      ??zclGetReadWriteCB_1
   2713          
   2714            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   000013   02....       LJMP      ?Subroutine3 & 0xFFFF
   2715          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine236_0
   \   000003                ; // Fall through to label ??Subroutine236_0
   2716          
   2717          /*********************************************************************
   2718           * @fn      zclGetAuthorizeCB
   2719           *
   2720           * @brief   Get the Read/Write Authorization callback function pointer
   2721           *          for a given endpoint.
   2722           *
   2723           * @param   endpoint - Application's endpoint
   2724           *
   2725           * @return  Authorization CB, NULL if not found
   2726           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2727          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   2728          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2729            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     ?Subroutine142 & 0xFFFF
   2730          
   2731            if ( pRec != NULL )
   \                     ??CrossCallReturnLabel_245:
   \   000008   6005         JZ        ??zclGetAuthorizeCB_0
   2732            {
   2733              return ( pRec->pfnAuthorizeCB );
   \   00000A   12....       LCALL     ?Subroutine106 & 0xFFFF
   2734            }
   \                     ??CrossCallReturnLabel_461:
   \   00000D   8004         SJMP      ??zclGetAuthorizeCB_1
   2735          
   2736            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   000013   02....       LJMP      ?Subroutine3 & 0xFFFF
   2737          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine234_0
   \   000001                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine235_0
   \   000001                ; // Fall through to label ??Subroutine235_0
   2738          #endif // ZCL_READ || ZCL_WRITE
   2739          
   2740          /*********************************************************************
   2741           * @fn      zclFindClusterOption
   2742           *
   2743           * @brief   Find the option record that matchs the cluster id
   2744           *
   2745           * @param   endpoint - Application's endpoint
   2746           * @param   clusterID - cluster ID looking for
   2747           *
   2748           * @return  pointer to clutser option, NULL if not found
   2749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2750          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2751          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   2752            zclClusterOptionList *pLoop;
   2753          
   2754            pLoop = clusterOptionList;
   \   00000B   90....       MOV       DPTR,#clusterOptionList
   \   00000E   8004         SJMP      ??zclFindClusterOption_0
   2755            while ( pLoop != NULL )
   2756            {
   2757              if ( pLoop->endpoint == endpoint )
   2758              {
   2759                uint8 x;
   2760                for ( x = 0; x < pLoop->numOptions; x++ )
   2761                {
   2762                  if ( pLoop->options[x].clusterID == clusterID )
   2763                  {
   2764                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2765                  }
   2766                }
   2767              }
   2768          
   2769              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000014   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000017   6046         JZ        ??zclFindClusterOption_2
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6F           XRL       A,R7
   \   000021   70ED         JNZ       ??zclFindClusterOption_1
   \   000023   7E00         MOV       R6,#0x0
   \   000025   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000027   0E           INC       R6
   \                     ??zclFindClusterOption_3:
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   EE           MOV       A,R6
   \   000032   C3           CLR       C
   \   000033   9A           SUBB      A,R2
   \   000034   50DA         JNC       ??zclFindClusterOption_1
   \   000036   EE           MOV       A,R6
   \   000037   75F003       MOV       B,#0x3
   \   00003A   A4           MUL       AB
   \   00003B   FA           MOV       R2,A
   \   00003C   85F0..       MOV       ?V0,B
   \   00003F   AB..         MOV       R3,?V0
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2A           ADD       A,R2
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   3B           ADDC      A,R3
   \   00004F   FB           MOV       R3,A
   \   000050   8A82         MOV       DPL,R2
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6C           XRL       A,R4
   \   000056   7003         JNZ       ??zclFindClusterOption_5
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6D           XRL       A,R5
   \                     ??zclFindClusterOption_5:
   \   00005B   70CA         JNZ       ??zclFindClusterOption_4
   \   00005D   8004         SJMP      ??zclFindClusterOption_6
   2770            }
   2771          
   2772            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000063   02....       LJMP      ??Subroutine229_0 & 0xFFFF
   2773          }
   2774          
   2775          /*********************************************************************
   2776           * @fn      zclGetClusterOption
   2777           *
   2778           * @brief   Get the option record that matchs the cluster id
   2779           *
   2780           * @param   endpoint - Application's endpoint
   2781           * @param   clusterID - cluster ID looking for
   2782           *
   2783           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2785          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2787            uint8 option;
   2788            zclOptionRec_t *pOption;
   2789          
   2790            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2791            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2792            {
   2793              option = pOption->option;
   2794              if ( !ZG_SECURE_ENABLED )
   2795              {
   2796                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2797              }
   2798          
   2799              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2800            }
   2801          
   2802            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A                REQUIRE ?Subroutine3
   \   00001A                ; // Fall through to label ?Subroutine3
   2803          }
   2804          
   2805          /*********************************************************************
   2806           * @fn      zclSetSecurityOption
   2807           *
   2808           * @brief   Set the security option for the cluster id
   2809           *
   2810           * @param   endpoint - Application's endpoint
   2811           * @param   clusterID - cluster ID looking for
   2812           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2813           *
   2814           * @return  none
   2815           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2816          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2817          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2818            zclOptionRec_t *pOption;
   2819          
   2820            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   A9..         MOV       R1,?V1
   2821            if ( pOption != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   49           ORL       A,R1
   \   000010   6015         JZ        ??zclSetSecurityOption_0
   2822            {
   2823              if ( enable )
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   EF           MOV       A,R7
   \   00001C   6005         JZ        ??zclSetSecurityOption_1
   2824              {
   2825                pOption->option |= AF_EN_SECURITY;
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E6         SETB      0xE0 /* A   */.6
   \   000021   8003         SJMP      ??zclSetSecurityOption_2
   2826              }
   2827              else
   2828              {
   2829                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   000026   F0           MOVX      @DPTR,A
   2830              }
   2831            }
   2832          }
   \                     ??zclSetSecurityOption_0:
   \   000027   80..         SJMP      ?Subroutine3
   2833          
   2834          #ifdef ZCL_DISCOVER
   2835          /*********************************************************************
   2836           * @fn      zclFindNextCmdRec
   2837           *
   2838           * @brief   Find the command (or next) record that matchs the parameters
   2839           *
   2840           * @param   endpoint - Application's endpoint
   2841           * @param   clusterID - cluster ID
   2842           * @param   commandID - command ID from requesting command
   2843           * @param   direction- direction of received command
   2844           * @param   pCmdID - command looking for
   2845           * @param   pCmd - command information within command record list
   2846           *
   2847           * @return  pointer to command record, NULL no more records of this cluster
   2848           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2849          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   \                     zclFindNextCmdRec:
   2850                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   \   00000B   8D..         MOV       ?V2,R5
   2852            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000D   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   2853            uint8 i;
   2854          
   2855            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   2856            {
   2857              for ( i = 0; i < pRec->numCommands; i++ )
   \   00001B   75..00       MOV       ?V3,#0x0
   \   00001E   7410         MOV       A,#0x10
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000026   E8           MOV       A,R0
   \   000027   FA           MOV       R2,A
   \   000028   E9           MOV       A,R1
   \   000029   FB           MOV       R3,A
   \   00002A   8012         SJMP      ??zclFindNextCmdRec_1
   2858              {
   2859                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2860                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2861                {
   2862                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2863                  {
   2864                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   \                     ??zclFindNextCmdRec_2:
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   8D83         MOV       DPH,R5
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E4           CLR       A
   \   000034   93           MOVC      A,@A+DPTR
   \   000035   A2E3         MOV       C,0xE0 /* A   */.3
   \   000037   5003         JNC       $+5
   \   000039   02....       LJMP      ??zclFindNextCmdRec_3 & 0xFFFF
   \                     ??zclFindNextCmdRec_4:
   \   00003C   05..         INC       ?V3
   \                     ??zclFindNextCmdRec_1:
   \   00003E   85..82       MOV       DPL,?V4
   \   000041   85..83       MOV       DPH,?V5
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   E5..         MOV       A,?V3
   \   00004B   C3           CLR       C
   \   00004C   98           SUBB      A,R0
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   \   000052   E5..         MOV       A,?V3
   \   000054   F5..         MOV       ?V6,A
   \   000056   75..00       MOV       ?V7,#0x0
   \   000059   7402         MOV       A,#0x2
   \   00005B   78..         MOV       R0,#?V6
   \   00005D   12....       LCALL     ?S_SHL
   \   000060   85..82       MOV       DPL,?V4
   \   000063   85..83       MOV       DPH,?V5
   \   000066   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000069   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00006C   7002         JNZ       ??zclFindNextCmdRec_5
   \   00006E   EF           MOV       A,R7
   \   00006F   69           XRL       A,R1
   \                     ??zclFindNextCmdRec_5:
   \   000070   70CA         JNZ       ??zclFindNextCmdRec_4
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F8           MOV       R0,A
   \   000078   8C82         MOV       DPL,R4
   \   00007A   8D83         MOV       DPH,R5
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   E4           CLR       A
   \   00007F   93           MOVC      A,@A+DPTR
   \   000080   C3           CLR       C
   \   000081   98           SUBB      A,R0
   \   000082   40B8         JC        ??zclFindNextCmdRec_4
   \   000084   7411         MOV       A,#0x11
   \   000086   65..         XRL       A,?V1
   \   000088   7019         JNZ       ??zclFindNextCmdRec_6
   \   00008A   7401         MOV       A,#0x1
   \   00008C   65..         XRL       A,?V2
   \   00008E   609C         JZ        ??zclFindNextCmdRec_2
   2865                    {
   2866                      *pCmd = pRec->pCmdRecs[i];
   2867          
   2868                      // Update command ID
   2869                      *pCmdID = pCmd->cmdID;
   2870          
   2871                      return ( TRUE ); // EMBEDDED RETURN
   2872                    }
   2873                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   \   000090   E5..         MOV       A,?V2
   \   000092   70A8         JNZ       ??zclFindNextCmdRec_4
   \   000094   8C82         MOV       DPL,R4
   \   000096   8D83         MOV       DPH,R5
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   E4           CLR       A
   \   00009C   93           MOVC      A,@A+DPTR
   \   00009D   A2E2         MOV       C,0xE0 /* A   */.2
   \                     ??zclFindNextCmdRec_7:
   \   00009F   4032         JC        ??zclFindNextCmdRec_3
   \   0000A1   8099         SJMP      ??zclFindNextCmdRec_4
   2874                    {
   2875                      *pCmd = pRec->pCmdRecs[i];
   2876          
   2877                      // Update command ID
   2878                      *pCmdID = pCmd->cmdID;
   2879          
   2880                      return ( TRUE ); // EMBEDDED RETURN
   2881                    }
   2882                  }
   2883                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zclFindNextCmdRec_6:
   \   0000A3   7413         MOV       A,#0x13
   \   0000A5   65..         XRL       A,?V1
   \   0000A7   7044         JNZ       ??zclFindNextCmdRec_0
   2884                  {
   2885                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   \   0000A9   E5..         MOV       A,?V2
   \   0000AB   700D         JNZ       ??zclFindNextCmdRec_8
   \   0000AD   8C82         MOV       DPL,R4
   \   0000AF   8D83         MOV       DPH,R5
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   E4           CLR       A
   \   0000B5   93           MOVC      A,@A+DPTR
   \   0000B6   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000B8   80E5         SJMP      ??zclFindNextCmdRec_7
   2886                    {
   2887                      *pCmd = pRec->pCmdRecs[i];
   2888          
   2889                      // Update command ID
   2890                      *pCmdID = pCmd->cmdID;
   2891          
   2892                      return ( TRUE ); // EMBEDDED RETURN
   2893                    }
   2894                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   \                     ??zclFindNextCmdRec_8:
   \   0000BA   7401         MOV       A,#0x1
   \   0000BC   65..         XRL       A,?V2
   \   0000BE   6003         JZ        $+5
   \   0000C0   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \   0000C3   8C82         MOV       DPL,R4
   \   0000C5   8D83         MOV       DPH,R5
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   E4           CLR       A
   \   0000CB   93           MOVC      A,@A+DPTR
   \   0000CC   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000CE   4003         JC        $+5
   \   0000D0   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \                     ??zclFindNextCmdRec_3:
   \   0000D3   7412         MOV       A,#0x12
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine85 & 0xFFFF
   2895                    {
   2896                      *pCmd = pRec->pCmdRecs[i];
   \                     ??CrossCallReturnLabel_144:
   \   0000DB   7404         MOV       A,#0x4
   \   0000DD   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2897          
   2898                      // Update command ID
   2899                      *pCmdID = pCmd->cmdID;
   \   0000E0   8882         MOV       DPL,R0
   \   0000E2   8983         MOV       DPH,R1
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   12....       LCALL     ?Subroutine73 & 0xFFFF
   2900          
   2901                      return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_122:
   \   0000E9   7901         MOV       R1,#0x1
   \   0000EB   8002         SJMP      ??zclFindNextCmdRec_9
   2902                    }
   2903                  }
   2904                  else
   2905                  {
   2906                    return ( FALSE ); // Incorrect Command ID
   2907                  }
   2908                }
   2909              }
   2910            }
   2911          
   2912            return ( FALSE );
   \                     ??zclFindNextCmdRec_0:
   \   0000ED   7900         MOV       R1,#0x0
   \                     ??zclFindNextCmdRec_9:
   \   0000EF   02....       LJMP      ??Subroutine230_0 & 0xFFFF
   2913          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   E8           MOV       A,R0
   \   000001   FC           MOV       R4,A
   \   000002   E9           MOV       A,R1
   \   000003   FD           MOV       R5,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E4           CLR       A
   \   000009   93           MOVC      A,@A+DPTR
   \   00000A   F8           MOV       R0,A
   \   00000B   7401         MOV       A,#0x1
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   EE           MOV       A,R6
   \   000010   68           XRL       A,R0
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   E8           MOV       A,R0
   \   000008   FC           MOV       R4,A
   \   000009   E9           MOV       A,R1
   \   00000A   FD           MOV       R5,A
   \   00000B   22           RET
   2914          
   2915          /*********************************************************************
   2916           * @fn      zclFindNextAttrRec
   2917           *
   2918           * @brief   Find the attribute (or next) record that matchs the parameters
   2919           *
   2920           * @param   endpoint - Application's endpoint
   2921           * @param   clusterID - cluster ID
   2922           * @param   attr - attribute looking for
   2923           *
   2924           * @return  pointer to attribute record, NULL if not found
   2925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2926          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   \                     zclFindNextAttrRec:
   2927                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2928          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2929            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000B   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   00000E   8A..         MOV       ?V6,R2
   \   000010   8B..         MOV       ?V7,R3
   2930            uint8 attrDir;
   2931          
   2932            if ( pRec != NULL )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2933            {
   2934              uint16 x;
   2935          
   2936              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   7410         MOV       A,#0x10
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000025   88..         MOV       ?V2,R0
   \   000027   F5..         MOV       ?V3,A
   \   000029   8005         SJMP      ??zclFindNextAttrRec_1
   \                     ??zclFindNextAttrRec_2:
   \   00002B   0A           INC       R2
   \   00002C   EA           MOV       A,R2
   \   00002D   7001         JNZ       ??zclFindNextAttrRec_1
   \   00002F   0B           INC       R3
   \                     ??zclFindNextAttrRec_1:
   \   000030   85..82       MOV       DPL,?V6
   \   000033   85..83       MOV       DPH,?V7
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   C3           CLR       C
   \   000040   EA           MOV       A,R2
   \   000041   98           SUBB      A,R0
   \   000042   EB           MOV       A,R3
   \   000043   9400         SUBB      A,#0x0
   \   000045   506E         JNC       ??zclFindNextAttrRec_0
   2937              {
   2938                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2939                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   7403         MOV       A,#0x3
   \   00004D   78..         MOV       R0,#?V4
   \   00004F   12....       LCALL     ?S_SHL
   \   000052   85..82       MOV       DPL,?V6
   \   000055   85..83       MOV       DPH,?V7
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00005F   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000062   7002         JNZ       ??zclFindNextAttrRec_3
   \   000064   EF           MOV       A,R7
   \   000065   69           XRL       A,R1
   \                     ??zclFindNextAttrRec_3:
   \   000066   70C3         JNZ       ??zclFindNextAttrRec_2
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   E4           CLR       A
   \   00006B   93           MOVC      A,@A+DPTR
   \   00006C   F5..         MOV       ?V4,A
   \   00006E   7401         MOV       A,#0x1
   \   000070   93           MOVC      A,@A+DPTR
   \   000071   F5..         MOV       ?V5,A
   \   000073   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000076   C3           CLR       C
   \   000077   E5..         MOV       A,?V4
   \   000079   98           SUBB      A,R0
   \   00007A   E5..         MOV       A,?V5
   \   00007C   99           SUBB      A,R1
   \   00007D   40AC         JC        ??zclFindNextAttrRec_2
   2940                {
   2941                  // also make sure direction is right
   2942                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2943                  if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
   \   00007F   EC           MOV       A,R4
   \   000080   2405         ADD       A,#0x5
   \   000082   F582         MOV       DPL,A
   \   000084   E4           CLR       A
   \   000085   3D           ADDC      A,R5
   \   000086   F583         MOV       DPH,A
   \   000088   E4           CLR       A
   \   000089   93           MOVC      A,@A+DPTR
   \   00008A   A2E7         MOV       C,0xE0 /* A   */.7
   \   00008C   E4           CLR       A
   \   00008D   33           RLC       A
   \   00008E   65..         XRL       A,?V1
   \   000090   6006         JZ        ??zclFindNextAttrRec_4
   \   000092   E4           CLR       A
   \   000093   93           MOVC      A,@A+DPTR
   \   000094   A2E6         MOV       C,0xE0 /* A   */.6
   \   000096   5093         JNC       ??zclFindNextAttrRec_2
   \                     ??zclFindNextAttrRec_4:
   \   000098   7412         MOV       A,#0x12
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   12....       LCALL     ?Subroutine85 & 0xFFFF
   2944                  {
   2945                    // return attribute and found attribute ID
   2946                    *pAttr = pRec->attrs[x];
   \                     ??CrossCallReturnLabel_145:
   \   0000A0   7408         MOV       A,#0x8
   \   0000A2   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2947                    *attrId = pAttr->attr.attrId;
   \   0000A5   8882         MOV       DPL,R0
   \   0000A7   8983         MOV       DPH,R1
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   0000AE   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   2948          
   2949                    return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_530:
   \   0000B1   7901         MOV       R1,#0x1
   \   0000B3   8002         SJMP      ??zclFindNextAttrRec_5
   2950                  }
   2951                }
   2952              }
   2953            }
   2954          
   2955            return ( FALSE );
   \                     ??zclFindNextAttrRec_0:
   \   0000B5   7900         MOV       R1,#0x0
   \                     ??zclFindNextAttrRec_5:
   \   0000B7   02....       LJMP      ??Subroutine230_0 & 0xFFFF
   2956          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine246_0
   \   000006                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000003                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000003                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   22           RET
   2957          #endif // ZCL_DISCOVER
   2958          
   2959          /*********************************************************************
   2960           * @fn      zclSerializeData
   2961           *
   2962           * @brief   Builds a buffer from the attribute data to sent out over
   2963           *          the air.
   2964           *          NOTE - Not compatible with application's attributes callbacks.
   2965           *
   2966           * @param   dataType - data types defined in zcl.h
   2967           * @param   attrData - pointer to the attribute data
   2968           * @param   buf - where to put the serialized data
   2969           *
   2970           * @return  pointer to end of destination buffer
   2971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2972          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2973          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2974            uint8 *pStr;
   2975            uint16 len;
   2976          
   2977            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2978            {
   2979              return ( buf );
   2980            }
   2981          
   2982            switch ( dataType )
   \   000014   EC           MOV       A,R4
   \   000015   2402         ADD       A,#0x2
   \   000017   F5..         MOV       ?V4,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   F5..         MOV       ?V5,A
   \   00001D   8C82         MOV       DPL,R4
   \   00001F   8D83         MOV       DPH,R5
   \   000021   A3           INC       DPTR
   \   000022   AC82         MOV       R4,DPL
   \   000024   AD83         MOV       R5,DPH
   \   000026   8E..         MOV       ?V0,R6
   \   000028   8F..         MOV       ?V1,R7
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   E9           MOV       A,R1
   \   00002E   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000031   04           DB        4
   \   000032   41           DB        65
   \   000033   42           DB        66
   \   000034   ....         DW        ??zclSerializeData_1
   \   000036   43           DB        67
   \   000037   44           DB        68
   \   000038   ....         DW        ??zclSerializeData_2
   \   00003A   E0           DB        224
   \   00003B   E2           DB        226
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   E8           DB        232
   \   00003F   E9           DB        233
   \   000040   ....         DW        ??zclSerializeData_4
   \   000042   25           DB        37
   \   000043   08           DB        8
   \   000044   ....         DW        ??zclSerializeData_5
   \   000046   09           DB        9
   \   000047   ....         DW        ??zclSerializeData_4
   \   000049   0A           DB        10
   \   00004A   ....         DW        ??zclSerializeData_6
   \   00004C   0B           DB        11
   \   00004D   ....         DW        ??zclSerializeData_3
   \   00004F   10           DB        16
   \   000050   ....         DW        ??zclSerializeData_5
   \   000052   18           DB        24
   \   000053   ....         DW        ??zclSerializeData_5
   \   000055   19           DB        25
   \   000056   ....         DW        ??zclSerializeData_4
   \   000058   1A           DB        26
   \   000059   ....         DW        ??zclSerializeData_6
   \   00005B   1B           DB        27
   \   00005C   ....         DW        ??zclSerializeData_3
   \   00005E   1C           DB        28
   \   00005F   ....         DW        ??zclSerializeData_7
   \   000061   1D           DB        29
   \   000062   ....         DW        ??zclSerializeData_8
   \   000064   1E           DB        30
   \   000065   ....         DW        ??zclSerializeData_9
   \   000067   1F           DB        31
   \   000068   ....         DW        ??zclSerializeData_10
   \   00006A   20           DB        32
   \   00006B   ....         DW        ??zclSerializeData_5
   \   00006D   21           DB        33
   \   00006E   ....         DW        ??zclSerializeData_4
   \   000070   22           DB        34
   \   000071   ....         DW        ??zclSerializeData_6
   \   000073   23           DB        35
   \   000074   ....         DW        ??zclSerializeData_3
   \   000076   24           DB        36
   \   000077   ....         DW        ??zclSerializeData_7
   \   000079   25           DB        37
   \   00007A   ....         DW        ??zclSerializeData_8
   \   00007C   26           DB        38
   \   00007D   ....         DW        ??zclSerializeData_9
   \   00007F   27           DB        39
   \   000080   ....         DW        ??zclSerializeData_10
   \   000082   28           DB        40
   \   000083   ....         DW        ??zclSerializeData_5
   \   000085   29           DB        41
   \   000086   ....         DW        ??zclSerializeData_4
   \   000088   2A           DB        42
   \   000089   ....         DW        ??zclSerializeData_6
   \   00008B   2B           DB        43
   \   00008C   ....         DW        ??zclSerializeData_3
   \   00008E   2C           DB        44
   \   00008F   ....         DW        ??zclSerializeData_7
   \   000091   2D           DB        45
   \   000092   ....         DW        ??zclSerializeData_8
   \   000094   2E           DB        46
   \   000095   ....         DW        ??zclSerializeData_9
   \   000097   2F           DB        47
   \   000098   ....         DW        ??zclSerializeData_10
   \   00009A   30           DB        48
   \   00009B   ....         DW        ??zclSerializeData_5
   \   00009D   31           DB        49
   \   00009E   ....         DW        ??zclSerializeData_4
   \   0000A0   38           DB        56
   \   0000A1   ....         DW        ??zclSerializeData_4
   \   0000A3   39           DB        57
   \   0000A4   ....         DW        ??zclSerializeData_3
   \   0000A6   3A           DB        58
   \   0000A7   ....         DW        ??zclSerializeData_10
   \   0000A9   EA           DB        234
   \   0000AA   ....         DW        ??zclSerializeData_3
   \   0000AC   F0           DB        240
   \   0000AD   ....         DW        ??zclSerializeData_10
   \   0000AF   F1           DB        241
   \   0000B0   ....         DW        ??zclSerializeData_11
   \   0000B2   ....         DW        ??zclSerializeData_0
   2983            {
   2984              case ZCL_DATATYPE_DATA8:
   2985              case ZCL_DATATYPE_BOOLEAN:
   2986              case ZCL_DATATYPE_BITMAP8:
   2987              case ZCL_DATATYPE_INT8:
   2988              case ZCL_DATATYPE_UINT8:
   2989              case ZCL_DATATYPE_ENUM8:
   2990                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000BB   EC           MOV       A,R4
   \   0000BC   FA           MOV       R2,A
   \   0000BD   ED           MOV       A,R5
   \   0000BE   FB           MOV       R3,A
   2991                 break;
   \   0000BF   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2992          
   2993              case ZCL_DATATYPE_DATA16:
   2994              case ZCL_DATATYPE_BITMAP16:
   2995              case ZCL_DATATYPE_UINT16:
   2996              case ZCL_DATATYPE_INT16:
   2997              case ZCL_DATATYPE_ENUM16:
   2998              case ZCL_DATATYPE_SEMI_PREC:
   2999              case ZCL_DATATYPE_CLUSTER_ID:
   3000              case ZCL_DATATYPE_ATTR_ID:
   3001                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   0000C9   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   3002                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_410:
   \   0000CC   8C82         MOV       DPL,R4
   \   0000CE   8D83         MOV       DPH,R5
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   0A           INC       R2
   \   0000D2   0A           INC       R2
   \   0000D3   AB..         MOV       R3,?V5
   3003                break;
   \   0000D5   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   3004          
   3005              case ZCL_DATATYPE_DATA24:
   3006              case ZCL_DATATYPE_BITMAP24:
   3007              case ZCL_DATATYPE_UINT24:
   3008              case ZCL_DATATYPE_INT24:
   3009                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000D8   8E82         MOV       DPL,R6
   \   0000DA   8F83         MOV       DPH,R7
   \   0000DC   78..         MOV       R0,#?V0
   \   0000DE   12....       LCALL     ?L_MOV_X
   \   0000E1   8A82         MOV       DPL,R2
   \   0000E3   8B83         MOV       DPH,R3
   \   0000E5   E5..         MOV       A,?V0
   \   0000E7   12....       LCALL     ?Subroutine210 & 0xFFFF
   3010                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_486:
   \   0000EA   78..         MOV       R0,#?V0
   \   0000EC   12....       LCALL     ?L_MOV_X
   \   0000EF   E5..         MOV       A,?V1
   \   0000F1   8C82         MOV       DPL,R4
   \   0000F3   8D83         MOV       DPH,R5
   \   0000F5   12....       LCALL     ?Subroutine210 & 0xFFFF
   3011                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_487:
   \   0000F8   78..         MOV       R0,#?V0
   \   0000FA   12....       LCALL     ?L_MOV_X
   \   0000FD   7410         MOV       A,#0x10
   \   0000FF   78..         MOV       R0,#?V0
   \   000101   12....       LCALL     ?UL_SHR
   \   000104   85..82       MOV       DPL,?V4
   \   000107   85..83       MOV       DPH,?V5
   \   00010A   E5..         MOV       A,?V0
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   EA           MOV       A,R2
   \   00010E   2403         ADD       A,#0x3
   \   000110   FA           MOV       R2,A
   \   000111   506B         JNC       ??zclSerializeData_0
   \   000113   0B           INC       R3
   3012                break;
   \   000114   8068         SJMP      ??zclSerializeData_0
   3013          
   3014              case ZCL_DATATYPE_DATA32:
   3015              case ZCL_DATATYPE_BITMAP32:
   3016              case ZCL_DATATYPE_UINT32:
   3017              case ZCL_DATATYPE_INT32:
   3018              case ZCL_DATATYPE_SINGLE_PREC:
   3019              case ZCL_DATATYPE_TOD:
   3020              case ZCL_DATATYPE_DATE:
   3021              case ZCL_DATATYPE_UTC:
   3022              case ZCL_DATATYPE_BAC_OID:
   3023                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   000116                ; Setup parameters for call to function osal_buffer_uint32
   \   000116   8E82         MOV       DPL,R6
   \   000118   8F83         MOV       DPH,R7
   \   00011A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00011D   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000120   7404         MOV       A,#0x4
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   3024                break;
   \   000125   8057         SJMP      ??zclSerializeData_0
   3025          
   3026              case ZCL_DATATYPE_BITMAP40:
   3027              case ZCL_DATATYPE_UINT40:
   3028              case ZCL_DATATYPE_INT40:
   3029                pStr = (uint8*)attrData;
   3030                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000127                ; Setup parameters for call to function osal_memcpy
   \   000127   78..         MOV       R0,#?V0
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012C   7C05         MOV       R4,#0x5
   \   00012E   8046         SJMP      ??zclSerializeData_12
   3031                break;
   3032          
   3033              case ZCL_DATATYPE_BITMAP48:
   3034              case ZCL_DATATYPE_UINT48:
   3035              case ZCL_DATATYPE_INT48:
   3036                pStr = (uint8*)attrData;
   3037                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   000130                ; Setup parameters for call to function osal_memcpy
   \   000130   78..         MOV       R0,#?V0
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000135   7C06         MOV       R4,#0x6
   \   000137   803D         SJMP      ??zclSerializeData_12
   3038                break;
   3039          
   3040              case ZCL_DATATYPE_BITMAP56:
   3041              case ZCL_DATATYPE_UINT56:
   3042              case ZCL_DATATYPE_INT56:
   3043                pStr = (uint8*)attrData;
   3044                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000139                ; Setup parameters for call to function osal_memcpy
   \   000139   78..         MOV       R0,#?V0
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013E   7C07         MOV       R4,#0x7
   \   000140   8034         SJMP      ??zclSerializeData_12
   3045                break;
   3046          
   3047              case ZCL_DATATYPE_BITMAP64:
   3048              case ZCL_DATATYPE_DOUBLE_PREC:
   3049              case ZCL_DATATYPE_IEEE_ADDR:
   3050              case ZCL_DATATYPE_UINT64:
   3051              case ZCL_DATATYPE_INT64:
   3052                pStr = (uint8*)attrData;
   3053                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   000142                ; Setup parameters for call to function osal_memcpy
   \   000142   78..         MOV       R0,#?V0
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000147   7C08         MOV       R4,#0x8
   \   000149   802B         SJMP      ??zclSerializeData_12
   3054                break;
   3055          
   3056              case ZCL_DATATYPE_CHAR_STR:
   3057              case ZCL_DATATYPE_OCTET_STR:
   3058                pStr = (uint8*)attrData;
   3059                len = *pStr;
   3060                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   00014B                ; Setup parameters for call to function osal_memcpy
   \   00014B   78..         MOV       R0,#?V0
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000150   8E82         MOV       DPL,R6
   \   000152   8F83         MOV       DPH,R7
   \   000154   E0           MOVX      A,@DPTR
   \   000155   2401         ADD       A,#0x1
   \   000157   FC           MOV       R4,A
   \   000158   E4           CLR       A
   \   000159   3400         ADDC      A,#0x0
   \   00015B   800F         SJMP      ??zclSerializeData_13
   3061                break;
   3062          
   3063              case ZCL_DATATYPE_LONG_CHAR_STR:
   3064              case ZCL_DATATYPE_LONG_OCTET_STR:
   3065                pStr = (uint8*)attrData;
   3066                len = BUILD_UINT16( pStr[0], pStr[1] );
   3067                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   00015D                ; Setup parameters for call to function osal_memcpy
   \   00015D   78..         MOV       R0,#?V0
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000162   8E82         MOV       DPL,R6
   \   000164   8F83         MOV       DPH,R7
   \   000166   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000169   FC           MOV       R4,A
   \   00016A   E4           CLR       A
   \   00016B   39           ADDC      A,R1
   \                     ??zclSerializeData_13:
   \   00016C   FD           MOV       R5,A
   \   00016D   8009         SJMP      ??zclSerializeData_14
   3068                break;
   3069          
   3070              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3071                pStr = (uint8*)attrData;
   3072                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   00016F                ; Setup parameters for call to function osal_memcpy
   \   00016F   78..         MOV       R0,#?V0
   \   000171   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000174   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_12:
   \   000176   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_14:
   \   000178   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   00017B   12....       LCALL     ?DEALLOC_XSTACK8
   3073                break;
   3074          
   3075              case ZCL_DATATYPE_NO_DATA:
   3076              case ZCL_DATATYPE_UNKNOWN:
   3077                // Fall through
   3078          
   3079              default:
   3080                break;
   3081            }
   3082          
   3083            return ( buf );
   \                     ??zclSerializeData_0:
   \   00017E                REQUIRE ?Subroutine9
   \   00017E                ; // Fall through to label ?Subroutine9
   3084          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EC           MOV       A,R4
   \   000006   2402         ADD       A,#0x2
   \   000008   22           RET
   3085          
   3086          #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
   3087          /*********************************************************************
   3088           * @fn      zclAnalogDataType
   3089           *
   3090           * @brief   Checks to see if Data Type is Analog
   3091           *
   3092           * @param   dataType - data type
   3093           *
   3094           * @return  TRUE if data type is analog
   3095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3096          uint8 zclAnalogDataType( uint8 dataType )
   \                     zclAnalogDataType:
   3097          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3098            uint8 analog;
   3099          
   3100            switch ( dataType )
   \   000005   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclAnalogDataType>_0`:
   \   000008   03           DB        3
   \   000009   20           DB        32
   \   00000A   2F           DB        47
   \   00000B   ....         DW        ??zclAnalogDataType_0
   \   00000D   38           DB        56
   \   00000E   3A           DB        58
   \   00000F   ....         DW        ??zclAnalogDataType_0
   \   000011   E0           DB        224
   \   000012   E2           DB        226
   \   000013   ....         DW        ??zclAnalogDataType_0
   \   000015   00           DB        0
   \   000016   ....         DW        ??zclAnalogDataType_1
   3101            {
   3102              case ZCL_DATATYPE_UINT8:
   3103              case ZCL_DATATYPE_UINT16:
   3104              case ZCL_DATATYPE_UINT24:
   3105              case ZCL_DATATYPE_UINT32:
   3106              case ZCL_DATATYPE_UINT40:
   3107              case ZCL_DATATYPE_UINT48:
   3108              case ZCL_DATATYPE_UINT56:
   3109              case ZCL_DATATYPE_UINT64:
   3110              case ZCL_DATATYPE_INT8:
   3111              case ZCL_DATATYPE_INT16:
   3112              case ZCL_DATATYPE_INT24:
   3113              case ZCL_DATATYPE_INT32:
   3114              case ZCL_DATATYPE_INT40:
   3115              case ZCL_DATATYPE_INT48:
   3116              case ZCL_DATATYPE_INT56:
   3117              case ZCL_DATATYPE_INT64:
   3118              case ZCL_DATATYPE_SEMI_PREC:
   3119              case ZCL_DATATYPE_SINGLE_PREC:
   3120              case ZCL_DATATYPE_DOUBLE_PREC:
   3121              case ZCL_DATATYPE_TOD:
   3122              case ZCL_DATATYPE_DATE:
   3123              case ZCL_DATATYPE_UTC:
   3124                analog = TRUE;
   \                     ??zclAnalogDataType_0:
   \   000018   7901         MOV       R1,#0x1
   3125                break;
   \   00001A   8002         SJMP      ??zclAnalogDataType_2
   3126          
   3127              default:
   3128                analog = FALSE;
   \                     ??zclAnalogDataType_1:
   \   00001C   7900         MOV       R1,#0x0
   3129                break;
   3130            }
   3131          
   3132            return ( analog );
   \                     ??zclAnalogDataType_2:
   \   00001E   02....       LJMP      ?Subroutine0 & 0xFFFF
   3133          }
   3134          
   3135          /*********************************************************************
   3136           * @fn      zclIsLittleEndianMachine
   3137           *
   3138           * @brief   Verifies endianness in system.
   3139           *
   3140           * @param   none
   3141           *
   3142           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3143           */
   3144          static int zclIsLittleEndianMachine(void)
   3145          {
   3146            uint16 test = 0x0001;
   3147          
   3148            return (*((uint8 *)(&test)));
   3149          }
   3150          
   3151          /*********************************************************************
   3152           * @fn      zcl_BuildAnalogData
   3153           *
   3154           * @brief   Build an analog arribute out of sequential bytes.
   3155           *
   3156           * @param   dataType - type of data
   3157           * @param   pData - pointer to data
   3158           * @param   pBuf - where to put the data
   3159           *
   3160           * @return  none
   3161           */
   3162          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   3163          {
   3164            int current_byte_index;
   3165            int remaining_bytes;
   3166            int step;
   3167          
   3168            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   3169          
   3170            // decide if move forward or backwards to copy data
   3171            if ( zclIsLittleEndianMachine() )
   3172            {
   3173              step = 1;
   3174              current_byte_index = 0;
   3175            }
   3176            else
   3177            {
   3178              step = -1;
   3179              current_byte_index = remaining_bytes - 1;
   3180            }
   3181          
   3182            while ( remaining_bytes-- )
   3183            {
   3184              pData[current_byte_index] = *(pBuf++);
   3185              current_byte_index += step;
   3186            }
   3187          }
   3188          #endif
   3189          
   3190          /*********************************************************************
   3191           * @fn      zclGetDataTypeLength
   3192           *
   3193           * @brief   Return the length of the datatype in octet.
   3194           *
   3195           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3196           *                ZCL_DATATYPE_CHAR_STR data types.
   3197           *
   3198           * @param   dataType - data type
   3199           *
   3200           * @return  length of data
   3201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3202          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3203          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3204            uint8 len;
   3205          
   3206            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3207            {
   3208              case ZCL_DATATYPE_DATA8:
   3209              case ZCL_DATATYPE_BOOLEAN:
   3210              case ZCL_DATATYPE_BITMAP8:
   3211              case ZCL_DATATYPE_INT8:
   3212              case ZCL_DATATYPE_UINT8:
   3213              case ZCL_DATATYPE_ENUM8:
   3214                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3215                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3216          
   3217              case ZCL_DATATYPE_DATA16:
   3218              case ZCL_DATATYPE_BITMAP16:
   3219              case ZCL_DATATYPE_UINT16:
   3220              case ZCL_DATATYPE_INT16:
   3221              case ZCL_DATATYPE_ENUM16:
   3222              case ZCL_DATATYPE_SEMI_PREC:
   3223              case ZCL_DATATYPE_CLUSTER_ID:
   3224              case ZCL_DATATYPE_ATTR_ID:
   3225                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3226                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3227          
   3228              case ZCL_DATATYPE_DATA24:
   3229              case ZCL_DATATYPE_BITMAP24:
   3230              case ZCL_DATATYPE_UINT24:
   3231              case ZCL_DATATYPE_INT24:
   3232                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3233                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3234          
   3235              case ZCL_DATATYPE_DATA32:
   3236              case ZCL_DATATYPE_BITMAP32:
   3237              case ZCL_DATATYPE_UINT32:
   3238              case ZCL_DATATYPE_INT32:
   3239              case ZCL_DATATYPE_SINGLE_PREC:
   3240              case ZCL_DATATYPE_TOD:
   3241              case ZCL_DATATYPE_DATE:
   3242              case ZCL_DATATYPE_UTC:
   3243              case ZCL_DATATYPE_BAC_OID:
   3244                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3245                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3246          
   3247             case ZCL_DATATYPE_UINT40:
   3248             case ZCL_DATATYPE_INT40:
   3249                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3250                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3251          
   3252             case ZCL_DATATYPE_UINT48:
   3253             case ZCL_DATATYPE_INT48:
   3254                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3255                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3256          
   3257             case ZCL_DATATYPE_UINT56:
   3258             case ZCL_DATATYPE_INT56:
   3259                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3260                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3261          
   3262             case ZCL_DATATYPE_DOUBLE_PREC:
   3263             case ZCL_DATATYPE_IEEE_ADDR:
   3264             case ZCL_DATATYPE_UINT64:
   3265             case ZCL_DATATYPE_INT64:
   3266               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3267               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3268          
   3269              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3270               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3271               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3272          
   3273              case ZCL_DATATYPE_NO_DATA:
   3274              case ZCL_DATATYPE_UNKNOWN:
   3275                // Fall through
   3276          
   3277              default:
   3278                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3279                break;
   3280            }
   3281          
   3282            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3283          }
   3284          
   3285          /*********************************************************************
   3286           * @fn      zclGetAttrDataLength
   3287           *
   3288           * @brief   Return the length of the attribute.
   3289           *
   3290           * @param   dataType - data type
   3291           * @param   pData - pointer to data
   3292           *
   3293           * @return  returns atrribute length
   3294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3295          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3296          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3297            uint16 dataLen = 0;
   3298          
   3299            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   700C         JNZ       ??zclGetAttrDataLength_1
   3300            {
   3301              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ?Subroutine127 & 0xFFFF
   3302            }
   \                     ??CrossCallReturnLabel_221:
   \   000018   FA           MOV       R2,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   8015         SJMP      ??zclGetAttrDataLength_2
   3303            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV       A,#0x42
   \   00001F   6E           XRL       A,R6
   \   000020   6005         JZ        ??zclGetAttrDataLength_3
   \   000022   7441         MOV       A,#0x41
   \   000024   6E           XRL       A,R6
   \   000025   700E         JNZ       ??zclGetAttrDataLength_4
   3304            {
   3305              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV       R3,A
   \   000033   8007         SJMP      ??zclGetAttrDataLength_5
   3306            }
   3307            else
   3308            {
   3309              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV       A,R1
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   3310            }
   3311          
   3312            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   02....       LJMP      ??Subroutine229_0 & 0xFFFF
   3313          }
   3314          
   3315          #ifdef ZCL_READ
   3316          /*********************************************************************
   3317           * @fn      zclReadAttrData
   3318           *
   3319           * @brief   Read the attribute's current value into pAttrData.
   3320           *          NOTE - Not compatible with application's attributes callbacks.
   3321           *
   3322           * @param   pAttrData - where to put attribute data
   3323           * @param   pAttr - pointer to attribute
   3324           * @param   pDataLen - where to put attribute data length
   3325           *
   3326           * @return Success
   3327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine215_0
   \   000001                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3328          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   3329          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3330            uint16 dataLen;
   3331          
   3332            if ( pAttr->attr.dataPtr == NULL )
   \   000009   EC           MOV       A,R4
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   88..         MOV       ?V0,R0
   \   000011   F5..         MOV       ?V1,A
   \   000013   8882         MOV       DPL,R0
   \   000015   F583         MOV       DPH,A
   \   000017   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   00001A   7004         JNZ       ??zclReadAttrData_0
   3333            {
   3334              return ( ZCL_STATUS_FAILURE );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   8042         SJMP      ??zclReadAttrData_1
   3335            }
   3336          
   3337            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \                     ??zclReadAttrData_0:
   \   000020                ; Setup parameters for call to function zclGetAttrDataLength
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000027   8A..         MOV       ?V2,R2
   \   000029   8B..         MOV       ?V3,R3
   3338            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   00002B                ; Setup parameters for call to function osal_memcpy
   \   00002B   85..82       MOV       DPL,?V0
   \   00002E   85..83       MOV       DPH,?V1
   \   000031   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000034   85....       MOV       ?V4,?V0
   \   000037   F5..         MOV       ?V5,A
   \   000039   75..00       MOV       ?V6,#0x0
   \   00003C   78..         MOV       R0,#?V4
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000041   AC..         MOV       R4,?V2
   \   000043   AD..         MOV       R5,?V3
   \   000045   EE           MOV       A,R6
   \   000046   FA           MOV       R2,A
   \   000047   EF           MOV       A,R7
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004F   740F         MOV       A,#0xf
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   3339          
   3340            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_399:
   \   000057   6007         JZ        ??zclReadAttrData_2
   3341            {
   3342              *pDataLen = dataLen;
   \   000059   E5..         MOV       A,?V2
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E5..         MOV       A,?V3
   \   00005F   F0           MOVX      @DPTR,A
   3343            }
   3344          
   3345            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclReadAttrData_2:
   \   000060   7900         MOV       R1,#0x0
   \                     ??zclReadAttrData_1:
   \   000062   02....       LJMP      ?Subroutine9 & 0xFFFF
   3346          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   3347          
   3348          /*********************************************************************
   3349           * @fn      zcl_ReadAttrData
   3350           *
   3351           * @brief   Read the attribute's current value into pAttrData.
   3352           *          Use application's callback function if assigned to this attribute.
   3353           *
   3354           * @param   endpoint - application's endpoint
   3355           * @param   clusterId - cluster that attribute belongs to
   3356           * @param   attrId - attribute id
   3357           * @param   pAttrData - where to put attribute data
   3358           * @param   pDataLen - where to put attribute data length
   3359           *
   3360           * @return  Successful if data was read
   3361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3362          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zcl_ReadAttrData:
   3363                                                   uint8 *pAttrData, uint16 *pDataLen )
   3364          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   3365            zclAttrRec_t attrRec;
   3366          
   3367            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   \   000014                ; Setup parameters for call to function zclFindAttrRec
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V4,R0
   \   00001A   89..         MOV       ?V5,R1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   A9..         MOV       R1,?V2
   \   000023   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
   \   00002A   7004         JNZ       ??zcl_ReadAttrData_0
   3368            {
   3369              return ( ZCL_STATUS_FAILURE );
   \   00002C   7901         MOV       R1,#0x1
   \   00002E   804C         SJMP      ??zcl_ReadAttrData_1
   3370            }
   \                     ??zcl_ReadAttrData_0:
   \   000030   7418         MOV       A,#0x18
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000038   741A         MOV       A,#0x1a
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine110 & 0xFFFF
   3371          
   3372            if ( attrRec.attr.dataPtr != NULL )
   \                     ??CrossCallReturnLabel_185:
   \   000040   7406         MOV       A,#0x6
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000048   78..         MOV       R0,#?V4
   \   00004A   6016         JZ        ??zcl_ReadAttrData_2
   3373            {
   3374              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   \   00004C                ; Setup parameters for call to function zclReadAttrData
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7402         MOV       A,#0x2
   \   000051   12....       LCALL     ?XSTACK_DISP102_8
   \   000054   AA..         MOV       R2,?V6
   \   000056   AB..         MOV       R3,?V7
   \   000058   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   801A         SJMP      ??zcl_ReadAttrData_1
   3375            }
   3376            else
   3377            {
   3378              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   \                     ??zcl_ReadAttrData_2:
   \   000062                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   EE           MOV       A,R6
   \   00006B   FC           MOV       R4,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FD           MOV       R5,A
   \   00006E   AA..         MOV       R2,?V0
   \   000070   AB..         MOV       R3,?V1
   \   000072   A9..         MOV       R1,?V2
   \   000074   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zcl_ReadAttrData_1:
   \   00007C   7408         MOV       A,#0x8
   3379            }
   \   00007E   02....       LJMP      ?Subroutine8 & 0xFFFF
   3380          }
   3381          
   3382          /*********************************************************************
   3383           * @fn      zclGetAttrDataLengthUsingCB
   3384           *
   3385           * @brief   Use application's callback to get the length of the attribute's
   3386           *          current value stored in the database.
   3387           *
   3388           * @param   endpoint - application's endpoint
   3389           * @param   clusterId - cluster that attribute belongs to
   3390           * @param   attrId - attribute id
   3391           *
   3392           * @return  returns attribute length
   3393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3394          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   3395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3396            uint16 dataLen = 0;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   3397            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   3398          
   3399            if ( pfnReadWriteCB != NULL )
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   602F         JZ        ??zclGetAttrDataLengthUsingCB_0
   3400            {
   3401              // Only get the attribute length
   3402              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000027                ; Setup parameters for indirect call
   \   000027   A8..         MOV       R0,?XSP + 0
   \   000029   A9..         MOV       R1,?XSP + 1
   \   00002B   88..         MOV       ?V6,R0
   \   00002D   89..         MOV       ?V7,R1
   \   00002F   78..         MOV       R0,#?V6
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   E4           CLR       A
   \   000035   F5..         MOV       ?V6,A
   \   000037   F5..         MOV       ?V7,A
   \   000039   78..         MOV       R0,#?V6
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7900         MOV       R1,#0x0
   \   000040   EE           MOV       A,R6
   \   000041   FC           MOV       R4,A
   \   000042   EF           MOV       A,R7
   \   000043   FD           MOV       R5,A
   \   000044   AA..         MOV       R2,?V4
   \   000046   AB..         MOV       R3,?V5
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   12....       LCALL     ?CALL_IND
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   3403            }
   3404          
   3405            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   000056   85..82       MOV       DPL,?XSP + 0
   \   000059   85..83       MOV       DPH,?XSP + 1
   \   00005C   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   00005F   7402         MOV       A,#0x2
   \   000061   02....       LJMP      ?Subroutine8 & 0xFFFF
   3406          }
   3407          
   3408          /*********************************************************************
   3409           * @fn      zclReadAttrDataUsingCB
   3410           *
   3411           * @brief   Use application's callback to read the attribute's current
   3412           *          value stored in the database.
   3413           *
   3414           * @param   endpoint - application's endpoint
   3415           * @param   clusterId - cluster that attribute belongs to
   3416           * @param   attrId - attribute id
   3417           * @param   pAttrData - where to put attribute data
   3418           * @param   pDataLen - where to put attribute data length
   3419           *
   3420           * @return  Successful if data was read
   3421           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3422          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   3423                                                   uint8 *pAttrData, uint16 *pDataLen )
   3424          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3425            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00000D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00000D   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   3426          
   3427            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_439:
   \   00001C   E5..         MOV       A,?V6
   \   00001E   45..         ORL       A,?V7
   \   000020   600A         JZ        ??zclReadAttrDataUsingCB_0
   3428            {
   3429              *pDataLen = 0; // Always initialize it to 0
   \   000022   85..82       MOV       DPL,?V6
   \   000025   85..83       MOV       DPH,?V7
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
   3430            }
   3431          
   3432            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   6027         JZ        ??zclReadAttrDataUsingCB_1
   3433            {
   3434              // Read the attribute value and its length
   3435              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000030                ; Setup parameters for indirect call
   \   000030   78..         MOV       R0,#?V6
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7412         MOV       A,#0x12
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003D   7901         MOV       R1,#0x1
   \   00003F   EE           MOV       A,R6
   \   000040   FC           MOV       R4,A
   \   000041   EF           MOV       A,R7
   \   000042   FD           MOV       R5,A
   \   000043   AA..         MOV       R2,?V0
   \   000045   AB..         MOV       R3,?V1
   \   000047   85..82       MOV       DPL,?V2
   \   00004A   85..83       MOV       DPH,?V3
   \   00004D   12....       LCALL     ?CALL_IND
   \   000050   7404         MOV       A,#0x4
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   8002         SJMP      ??zclReadAttrDataUsingCB_2
   3436            }
   3437          
   3438            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   000057   79C1         MOV       R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   000059   02....       LJMP      ??Subroutine230_0 & 0xFFFF
   3439          }
   3440          
   3441          /*********************************************************************
   3442           * @fn      zclAuthorizeRead
   3443           *
   3444           * @brief   Use application's callback to authorize a Read operation
   3445           *          on a given attribute.
   3446           *
   3447           * @param   endpoint - application's endpoint
   3448           * @param   srcAddr - source Address
   3449           * @param   pAttr - pointer to attribute
   3450           *
   3451           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3452           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3453           */
   3454          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3455          {
   3456            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   3457            {
   3458              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3459          
   3460              if ( pfnAuthorizeCB != NULL )
   3461              {
   3462                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   3463              }
   3464            }
   3465          
   3466            return ( ZCL_STATUS_SUCCESS );
   3467          }
   3468          #endif // ZCL_READ
   3469          
   3470          #ifdef ZCL_WRITE
   3471          /*********************************************************************
   3472           * @fn      zclWriteAttrData
   3473           *
   3474           * @brief   Write the received data.
   3475           *
   3476           * @param   endpoint - application's endpoint
   3477           * @param   pAttr - where to write data to
   3478           * @param   pWriteRec - data to be written
   3479           *
   3480           * @return  Successful if data was written
   3481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3482          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   3483                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3484          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   3485            uint8 status;
   3486          
   3487            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000009   8C82         MOV       DPL,R4
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5070         JNC       ??zclWriteAttrData_0
   3488            {
   3489              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000017                ; Setup parameters for call to function zclAuthorizeWrite
   \   000017   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001A   E9           MOV       A,R1
   \   00001B   F5..         MOV       ?V2,A
   3490              if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   706B         JNZ       ??zclWriteAttrData_1
   \   00001F   740F         MOV       A,#0xf
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000027   F5..         MOV       ?V1,A
   3491              {
   3492                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   000029   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   00002C   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00002F   6013         JZ        ??zclWriteAttrData_2
   \   000031                ; Setup parameters for indirect call
   \   000031   AC..         MOV       R4,?V0
   \   000033   AD..         MOV       R5,?V1
   \   000035   EE           MOV       A,R6
   \   000036   FA           MOV       R2,A
   \   000037   EF           MOV       A,R7
   \   000038   FB           MOV       R3,A
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F583         MOV       DPH,A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   12....       LCALL     ?CALL_IND
   \   000041   E9           MOV       A,R1
   \   000042   603E         JZ        ??zclWriteAttrData_3
   3493                {
   3494                  // Write the attribute value
   3495                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000044   E5..         MOV       A,?V0
   \   000046   2403         ADD       A,#0x3
   \   000048   F8           MOV       R0,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V1
   \   00004C   88..         MOV       ?V0,R0
   \   00004E   F5..         MOV       ?V1,A
   \   000050                ; Setup parameters for call to function zclGetAttrDataLength
   \   000050   8882         MOV       DPL,R0
   \   000052   F583         MOV       DPH,A
   \   000054   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   00005E   8A..         MOV       ?V4,R2
   \   000060   8B..         MOV       ?V5,R3
   \   000062   AC..         MOV       R4,?V4
   \   000064   AD..         MOV       R5,?V5
   3496                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \   000066                ; Setup parameters for call to function osal_memcpy
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000072   8E82         MOV       DPL,R6
   \   000074   8F83         MOV       DPH,R7
   \   000076   A3           INC       DPTR
   \   000077   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   00007A   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   3497          
   3498                  status = ZCL_STATUS_SUCCESS;
   \   000080   8008         SJMP      ??zclWriteAttrData_1
   3499                }
   3500                else
   3501                {
   3502                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   000082   75..87       MOV       ?V2,#-0x79
   \   000085   8003         SJMP      ??zclWriteAttrData_1
   3503                }
   3504              }
   3505            }
   3506            else
   3507            {
   3508              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   000087   75..88       MOV       ?V2,#-0x78
   3509            }
   3510          
   3511            return ( status );
   \                     ??zclWriteAttrData_1:
   \   00008A   A9..         MOV       R1,?V2
   \   00008C   02....       LJMP      ?Subroutine9 & 0xFFFF
   3512          }
   3513          
   3514          /*********************************************************************
   3515           * @fn      zclWriteAttrDataUsingCB
   3516           *
   3517           * @brief   Use application's callback to write the attribute's current
   3518           *          value stored in the database.
   3519           *
   3520           * @param   endpoint - application's endpoint
   3521           * @param   pAttr - where to write data to
   3522           * @param   pAttrData - data to be written
   3523           *
   3524           * @return  Successful if data was written
   3525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3526          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   3527                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3528          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   3529            uint8 status;
   3530          
   3531            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   504C         JNC       ??zclWriteAttrDataUsingCB_0
   3532            {
   3533              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000019                ; Setup parameters for call to function zclAuthorizeWrite
   \   000019   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001C   E9           MOV       A,R1
   \   00001D   F9           MOV       R1,A
   3534              if ( status == ZCL_STATUS_SUCCESS )
   \   00001E   7047         JNZ       ??zclWriteAttrDataUsingCB_1
   3535              {
   3536                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000020                ; Setup parameters for call to function zclGetReadWriteCB
   \   000020   A9..         MOV       R1,?V0
   \   000022   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   3537                if ( pfnReadWriteCB != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   4B           ORL       A,R3
   \   00002B   6034         JZ        ??zclWriteAttrDataUsingCB_2
   3538                {
   3539                  // Write the attribute value
   3540                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3541                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   E4           CLR       A
   \   00002E   F5..         MOV       ?V4,A
   \   000030   F5..         MOV       ?V5,A
   \   000032   78..         MOV       R0,#?V4
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7410         MOV       A,#0x10
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7902         MOV       R1,#0x2
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   3542                }
   \                     ??CrossCallReturnLabel_550:
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   00004F   85..82       MOV       DPL,?V2
   \   000052   85..83       MOV       DPH,?V3
   \   000055   12....       LCALL     ?CALL_IND
   \   000058   7404         MOV       A,#0x4
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   E9           MOV       A,R1
   \   00005E   F9           MOV       R1,A
   \   00005F   8006         SJMP      ??zclWriteAttrDataUsingCB_1
   3543                else
   3544                {
   3545                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   000061   79C1         MOV       R1,#-0x3f
   \   000063   8002         SJMP      ??zclWriteAttrDataUsingCB_1
   3546                }
   3547              }
   3548            }
   3549            else
   3550            {
   3551              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   000065   7988         MOV       R1,#-0x78
   3552            }
   3553          
   3554            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   000067                REQUIRE ?Subroutine4
   \   000067                ; // Fall through to label ?Subroutine4
   3555          }
   3556          
   3557          /*********************************************************************
   3558           * @fn      zclAuthorizeWrite
   3559           *
   3560           * @brief   Use application's callback to authorize a Write operation
   3561           *          on a given attribute.
   3562           *
   3563           * @param   endpoint - application's endpoint
   3564           * @param   srcAddr - source Address
   3565           * @param   pAttr - pointer to attribute
   3566           *
   3567           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3568           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3570          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   3571          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3572            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   8D83         MOV       DPH,R5
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E5         MOV       C,0xE0 /* A   */.5
   \   000019   5014         JNC       ??zclAuthorizeWrite_0
   3573            {
   3574              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     ?Subroutine158 & 0xFFFF
   3575          
   3576              if ( pfnAuthorizeCB != NULL )
   \                     ??CrossCallReturnLabel_266:
   \   00001E   600F         JZ        ??zclAuthorizeWrite_0
   3577              {
   3578                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000020                ; Setup parameters for indirect call
   \   000020   7902         MOV       R1,#0x2
   \   000022   AC..         MOV       R4,?V0
   \   000024   AD..         MOV       R5,?V1
   \   000026   EE           MOV       A,R6
   \   000027   FA           MOV       R2,A
   \   000028   EF           MOV       A,R7
   \   000029   FB           MOV       R3,A
   \   00002A   12....       LCALL     ?CALL_IND
   \   00002D   8002         SJMP      ??zclAuthorizeWrite_1
   3579              }
   3580            }
   3581          
   3582            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   00002F   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000031   80..         SJMP      ?Subroutine4
   3583          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
   3584          #endif // ZCL_WRITE
   3585          
   3586          #ifdef ZCL_READ
   3587          /*********************************************************************
   3588           * @fn      zclParseInReadCmd
   3589           *
   3590           * @brief   Parse the "Profile" Read Commands
   3591           *
   3592           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3593           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3594           *
   3595           * @param   pCmd - pointer to incoming data to parse
   3596           *
   3597           * @return  pointer to the parsed command structure
   3598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3599          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   3600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3601            zclReadCmd_t *readCmd;
   3602            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine99 & 0xFFFF
   3603          
   3604            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_171:
   \   000008   12....       LCALL     ?Subroutine84 & 0xFFFF
   3605            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_142:
   \   00000B   6049         JZ        ??zclParseInReadCmd_0
   3606            {
   3607              uint8 i;
   3608              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000016   C3           CLR       C
   \   000017   13           RRC       A
   \   000018   E8           MOV       A,R0
   \   000019   13           RRC       A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   F0           MOVX      @DPTR,A
   3609              for ( i = 0; i < readCmd->numAttr; i++ )
   \   00001F   7C00         MOV       R4,#0x0
   \   000021   802E         SJMP      ??zclParseInReadCmd_1
   3610              {
   3611                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   12....       LCALL     ?Subroutine116 & 0xFFFF
   3612                pBuf += 2;
   3613              }
   \                     ??CrossCallReturnLabel_196:
   \   00002A   F8           MOV       R0,A
   \   00002B   E4           CLR       A
   \   00002C   C8           XCH       A,R0
   \   00002D   F9           MOV       R1,A
   \   00002E   E5..         MOV       A,?V0
   \   000030   28           ADD       A,R0
   \   000031   E4           CLR       A
   \   000032   39           ADDC      A,R1
   \   000033   F5..         MOV       ?V1,A
   \   000035   EC           MOV       A,R4
   \   000036   25E0         ADD       A,0xE0 /* A   */
   \   000038   F8           MOV       R0,A
   \   000039   E4           CLR       A
   \   00003A   33           RLC       A
   \   00003B   F9           MOV       R1,A
   \   00003C   EA           MOV       A,R2
   \   00003D   28           ADD       A,R0
   \   00003E   F582         MOV       DPL,A
   \   000040   EB           MOV       A,R3
   \   000041   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000044   E5..         MOV       A,?V0
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   E5..         MOV       A,?V1
   \   00004A   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00004D   5001         JNC       ??zclParseInReadCmd_3
   \   00004F   0F           INC       R7
   \                     ??zclParseInReadCmd_3:
   \   000050   0C           INC       R4
   \                     ??zclParseInReadCmd_1:
   \   000051   12....       LCALL     ?Subroutine102 & 0xFFFF
   3614            }
   \                     ??CrossCallReturnLabel_465:
   \   000054   40CD         JC        ??zclParseInReadCmd_2
   3615          
   3616            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   000056   02....       LJMP      ??Subroutine212_0 & 0xFFFF
   3617          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine237_0
   \   000004                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   8582..       MOV       ?V0,DPL
   \   000008   8583..       MOV       ?V1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   2401         ADD       A,#0x1
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   3400         ADDC      A,#0x0
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   00000A   E8           MOV       A,R0
   \   00000B   FE           MOV       R6,A
   \   00000C   E9           MOV       A,R1
   \   00000D   FF           MOV       R7,A
   \   00000E   22           RET
   3618          
   3619          /*********************************************************************
   3620           * @fn      zclParseInReadRspCmd
   3621           *
   3622           * @brief   Parse the "Profile" Read Response Commands
   3623           *
   3624           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3625           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3626           *
   3627           * @param   pCmd - pointer to incoming data to parse
   3628           *
   3629           * @return  pointer to the parsed command structure
   3630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3631          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   3632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   3633            zclReadRspCmd_t *readRspCmd;
   3634            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V4,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V5,A
   \   000013   85..82       MOV       DPL,?V4
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   3635            uint8 *dataPtr;
   3636            uint8 numAttr = 0;
   \                     ??CrossCallReturnLabel_554:
   \   00001B   75..00       MOV       ?V2,#0x0
   3637            uint8 hdrLen;
   3638            uint16 dataLen = 0;
   \   00001E   75..00       MOV       ?V6,#0x0
   \   000021   75..00       MOV       ?V7,#0x0
   \   000024   8049         SJMP      ??zclParseInReadRspCmd_0
   3639            uint16 attrDataLen;
   3640          
   3641            // find out the number of attributes and the length of attribute data
   3642            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3643            {
   3644              uint8 status;
   3645          
   3646              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   000026   05..         INC       ?V2
   3647              pBuf += 2; // move pass attribute id
   3648          
   3649              status = *pBuf++;
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   EE           MOV       A,R6
   \   000031   2403         ADD       A,#0x3
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??zclParseInReadRspCmd_2
   \   000036   0F           INC       R7
   3650              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_2:
   \   000037   E8           MOV       A,R0
   \   000038   7035         JNZ       ??zclParseInReadRspCmd_0
   3651              {
   3652                uint8 dataType = *pBuf++;
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   A3           INC       DPTR
   \   000041   AE82         MOV       R6,DPL
   \   000043   AF83         MOV       R7,DPH
   3653          
   3654                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \   000045                ; Setup parameters for call to function zclGetAttrDataLength
   \   000045   EE           MOV       A,R6
   \   000046   FA           MOV       R2,A
   \   000047   EF           MOV       A,R7
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   3655                pBuf += attrDataLen; // move pass attribute data
   \   000050   EE           MOV       A,R6
   \   000051   2A           ADD       A,R2
   \   000052   FE           MOV       R6,A
   \   000053   EF           MOV       A,R7
   \   000054   35..         ADDC      A,?V1
   \   000056   FF           MOV       R7,A
   3656          
   3657                // add padding if needed
   3658                if ( PADDING_NEEDED( attrDataLen ) )
   \   000057   EA           MOV       A,R2
   \   000058   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005A   5007         JNC       ??zclParseInReadRspCmd_3
   3659                {
   3660                  attrDataLen++;
   \   00005C   05..         INC       ?V0
   \   00005E   04           INC       A
   \   00005F   7002         JNZ       ??zclParseInReadRspCmd_3
   \   000061   05..         INC       ?V1
   3661                }
   3662          
   3663                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_3:
   \   000063   E5..         MOV       A,?V6
   \   000065   25..         ADD       A,?V0
   \   000067   F5..         MOV       ?V6,A
   \   000069   E5..         MOV       A,?V7
   \   00006B   35..         ADDC      A,?V1
   \   00006D   F5..         MOV       ?V7,A
   3664              }
   3665            }
   \                     ??zclParseInReadRspCmd_0:
   \   00006F   85..82       MOV       DPL,?V8
   \   000072   85..83       MOV       DPH,?V9
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000079   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00007C   EE           MOV       A,R6
   \   00007D   98           SUBB      A,R0
   \   00007E   EF           MOV       A,R7
   \   00007F   99           SUBB      A,R1
   \   000080   40A4         JC        ??zclParseInReadRspCmd_1
   3666          
   3667            // calculate the length of the response header
   3668            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   000082   75F006       MOV       B,#0x6
   \   000085   E5..         MOV       A,?V2
   \   000087   A4           MUL       AB
   \   000088   04           INC       A
   \   000089   F5..         MOV       ?V0,A
   3669          
   3670            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   25..         ADD       A,?V6
   \   00008D   FA           MOV       R2,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V7
   \   000091   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   3671            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_491:
   \   000094   7003         JNZ       $+5
   \   000096   02....       LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
   3672            {
   3673              uint8 i;
   3674              pBuf = pCmd->pData;
   \   000099   85..82       MOV       DPL,?V4
   \   00009C   85..83       MOV       DPH,?V5
   \   00009F   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   3675              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_555:
   \   0000A2   A8..         MOV       R0,?V0
   \   0000A4   EA           MOV       A,R2
   \   0000A5   28           ADD       A,R0
   \   0000A6   F5..         MOV       ?V8,A
   \   0000A8   E4           CLR       A
   \   0000A9   3B           ADDC      A,R3
   \   0000AA   F5..         MOV       ?V9,A
   3676          
   3677              readRspCmd->numAttr = numAttr;
   \   0000AC   8A82         MOV       DPL,R2
   \   0000AE   8B83         MOV       DPH,R3
   \   0000B0   E5..         MOV       A,?V2
   \   0000B2   F0           MOVX      @DPTR,A
   3678              for ( i = 0; i < numAttr; i++ )
   \   0000B3   75..00       MOV       ?V3,#0x0
   \   0000B6   02....       LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
   3679              {
   3680                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   0000B9   E5..         MOV       A,?V3
   \   0000BB   75F006       MOV       B,#0x6
   \   0000BE   12....       LCALL     ?Subroutine195 & 0xFFFF
   3681          
   3682                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_324:
   \   0000C1   8E82         MOV       DPL,R6
   \   0000C3   8F83         MOV       DPH,R7
   \   0000C5   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0000C8   12....       LCALL     ?Subroutine33 & 0xFFFF
   3683                pBuf += 2;
   3684          
   3685                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_37:
   \   0000CB   F8           MOV       R0,A
   \   0000CC   85..82       MOV       DPL,?V12
   \   0000CF   85..83       MOV       DPH,?V13
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   EE           MOV       A,R6
   \   0000D6   2403         ADD       A,#0x3
   \   0000D8   FE           MOV       R6,A
   \   0000D9   5001         JNC       ??zclParseInReadRspCmd_7
   \   0000DB   0F           INC       R7
   3686                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_7:
   \   0000DC   E8           MOV       A,R0
   \   0000DD   7061         JNZ       ??zclParseInReadRspCmd_8
   3687                {
   3688                  statusRec->dataType = *pBuf++;
   \   0000DF   8E82         MOV       DPL,R6
   \   0000E1   8F83         MOV       DPH,R7
   \   0000E3   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   0000E6   12....       LCALL     ?Subroutine17 & 0xFFFF
   3689          
   3690                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_478:
   \   0000E9                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000E9   EE           MOV       A,R6
   \   0000EA   FA           MOV       R2,A
   \   0000EB   EF           MOV       A,R7
   \   0000EC   FB           MOV       R3,A
   \   0000ED   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000F0   8A..         MOV       ?V0,R2
   \   0000F2   8B..         MOV       ?V1,R3
   3691                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   8E..         MOV       ?V4,R6
   \   0000F6   8F..         MOV       ?V5,R7
   \   0000F8   75..00       MOV       ?V6,#0x0
   \   0000FB   78..         MOV       R0,#?V4
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000100   AC..         MOV       R4,?V0
   \   000102   AD..         MOV       R5,?V1
   \   000104   AA..         MOV       R2,?V8
   \   000106   AB..         MOV       R3,?V9
   \   000108   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   00010B   12....       LCALL     ?DEALLOC_XSTACK8
   3692                  statusRec->data = dataPtr;
   \   00010E   85..82       MOV       DPL,?V12
   \   000111   85..83       MOV       DPH,?V13
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   E5..         MOV       A,?V8
   \   00011A   F0           MOVX      @DPTR,A
   \   00011B   A3           INC       DPTR
   \   00011C   E5..         MOV       A,?V9
   \   00011E   F0           MOVX      @DPTR,A
   3693          
   3694                  pBuf += attrDataLen; // move pass attribute data
   \   00011F   EE           MOV       A,R6
   \   000120   25..         ADD       A,?V0
   \   000122   FE           MOV       R6,A
   \   000123   EF           MOV       A,R7
   \   000124   35..         ADDC      A,?V1
   \   000126   FF           MOV       R7,A
   3695          
   3696                  // advance attribute data pointer
   3697                  if ( PADDING_NEEDED( attrDataLen ) )
   \   000127   E5..         MOV       A,?V0
   \   000129   A2E0         MOV       C,0xE0 /* A   */.0
   \   00012B   5007         JNC       ??zclParseInReadRspCmd_9
   3698                  {
   3699                    attrDataLen++;
   \   00012D   05..         INC       ?V0
   \   00012F   04           INC       A
   \   000130   7002         JNZ       ??zclParseInReadRspCmd_9
   \   000132   05..         INC       ?V1
   3700                  }
   3701          
   3702                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_9:
   \   000134   E5..         MOV       A,?V8
   \   000136   25..         ADD       A,?V0
   \   000138   F5..         MOV       ?V8,A
   \   00013A   E5..         MOV       A,?V9
   \   00013C   35..         ADDC      A,?V1
   \   00013E   F5..         MOV       ?V9,A
   3703                }
   3704              }
   \                     ??zclParseInReadRspCmd_8:
   \   000140   05..         INC       ?V3
   \                     ??zclParseInReadRspCmd_5:
   \   000142   E5..         MOV       A,?V3
   \   000144   C3           CLR       C
   \   000145   95..         SUBB      A,?V2
   \   000147   5003         JNC       $+5
   \   000149   02....       LJMP      ??zclParseInReadRspCmd_6 & 0xFFFF
   3705            }
   3706          
   3707            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   00014C                REQUIRE ?Subroutine11
   \   00014C                ; // Fall through to label ?Subroutine11
   3708          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AA..         MOV       R2,?V10
   \   000002   AB..         MOV       R3,?V11
   \   000004   02....       LJMP      ??Subroutine222_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine239_0
   \   000001                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000004   8A..         MOV       ?V10,R2
   \   000006   8B..         MOV       ?V11,R3
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine208:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   F9           MOV       R1,A
   \   000007   C3           CLR       C
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   A4           MUL       AB
   \   000001   F8           MOV       R0,A
   \   000002   A9F0         MOV       R1,B
   \   000004   E5..         MOV       A,?V10
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   E5..         MOV       A,?V11
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   A3           INC       DPTR
   \   00000F   8582..       MOV       ?V12,DPL
   \   000012   8583..       MOV       ?V13,DPH
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   85..82       MOV       DPL,?V12
   \   000005   85..83       MOV       DPH,?V13
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   85..82       MOV       DPL,?V12
   \   000009   85..83       MOV       DPH,?V13
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
   3709          #endif // ZCL_READ
   3710          
   3711          #ifdef ZCL_WRITE
   3712          /*********************************************************************
   3713           * @fn      zclParseInWriteCmd
   3714           *
   3715           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3716           *          Response Commands
   3717           *
   3718           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3719           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3720           *
   3721           * @param   pCmd - pointer to incoming data to parse
   3722           *
   3723           * @return  pointer to the parsed command structure
   3724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   AA..         MOV       R2,?V2
   \   000006   AB..         MOV       R3,?V3
   \   000008                REQUIRE ??Subroutine238_0
   \   000008                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3725          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   3726          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine78 & 0xFFFF
   3727            zclWriteCmd_t *writeCmd;
   3728            uint8 *pBuf = pCmd->pData;
   3729            uint16 attrDataLen;
   3730            uint8 *dataPtr;
   3731            uint8 numAttr = 0;
   3732            uint8 hdrLen;
   3733            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_133:
   \   000008   8014         SJMP      ??CrossCallReturnLabel_274
   3734          
   3735            // find out the number of attributes and the length of attribute data
   3736            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3737            {
   3738              uint8 dataType;
   3739          
   3740              numAttr++;
   \                     ??zclParseInWriteCmd_0:
   \   00000A   12....       LCALL     ?Subroutine124 & 0xFFFF
   3741              pBuf += 2; // move pass attribute id
   3742          
   3743              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_213:
   \   00000D   5002         JNC       ??zclParseInWriteCmd_1
   \   00000F   05..         INC       ?V1
   3744          
   3745              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInWriteCmd_1:
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011   12....       LCALL     ?Subroutine152 & 0xFFFF
   3746              pBuf += attrDataLen; // move pass attribute data
   3747          
   3748              // add padding if needed
   3749              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_256:
   \   000014   5005         JNC       ??zclParseInWriteCmd_2
   3750              {
   3751                attrDataLen++;
   \   000016   0E           INC       R6
   \   000017   04           INC       A
   \   000018   7001         JNZ       ??zclParseInWriteCmd_2
   \   00001A   0F           INC       R7
   3752              }
   3753          
   3754              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   00001B   12....       LCALL     ?Subroutine162 & 0xFFFF
   3755            }
   \                     ??CrossCallReturnLabel_274:
   \   00001E   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000021   40E7         JC        ??zclParseInWriteCmd_0
   3756          
   3757            // calculate the length of the response header
   3758            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   000023   12....       LCALL     ?Subroutine133 & 0xFFFF
   3759          
   3760            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3761            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_489:
   \   000026   602C         JZ        ??zclParseInWriteCmd_3
   3762            {
   3763              uint8 i;
   3764              pBuf = pCmd->pData;
   \   000028   12....       LCALL     ?Subroutine59 & 0xFFFF
   3765              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   3766          
   3767              writeCmd->numAttr = numAttr;
   3768              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_86:
   \   00002B   8020         SJMP      ??CrossCallReturnLabel_272
   3769              {
   3770                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_4:
   \   00002D   12....       LCALL     ?Subroutine15 & 0xFFFF
   3771          
   3772                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3773                pBuf += 2;
   3774                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_4:
   \   000030   5002         JNC       ??zclParseInWriteCmd_5
   \   000032   05..         INC       ?V1
   3775          
   3776                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??zclParseInWriteCmd_5:
   \   000034                ; Setup parameters for call to function zclGetAttrDataLength
   \   000034   12....       LCALL     ?Subroutine154 & 0xFFFF
   3777                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_260:
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003A   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   3778                statusRec->attrData = dataPtr;
   \   000040   12....       LCALL     ?Subroutine21 & 0xFFFF
   3779          
   3780                pBuf += attrDataLen; // move pass attribute data
   3781          
   3782                // advance attribute data pointer
   3783                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_15:
   \   000043   5005         JNC       ??zclParseInWriteCmd_6
   3784                {
   3785                  attrDataLen++;
   \   000045   0E           INC       R6
   \   000046   04           INC       A
   \   000047   7001         JNZ       ??zclParseInWriteCmd_6
   \   000049   0F           INC       R7
   3786                }
   3787          
   3788                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_6:
   \   00004A   12....       LCALL     ?Subroutine161 & 0xFFFF
   3789              }
   \                     ??CrossCallReturnLabel_272:
   \   00004D   E5..         MOV       A,?V8
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V7
   \   000052   40D9         JC        ??zclParseInWriteCmd_4
   3790            }
   3791          
   3792            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_3:
   \   000054   80..         SJMP      ?Subroutine11
   3793          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   75F005       MOV       B,#0x5
   \   000003   E5..         MOV       A,?V7
   \   000005   A4           MUL       AB
   \   000006   04           INC       A
   \   000007   FE           MOV       R6,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   25..         ADD       A,?V4
   \   00000A   FA           MOV       R2,A
   \   00000B   E4           CLR       A
   \   00000C   35..         ADDC      A,?V5
   \   00000E                REQUIRE ??Subroutine240_0
   \   00000E                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine242_0
   \   000001                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   E5..         MOV       A,?V4
   \   000002   2E           ADD       A,R6
   \   000003   F5..         MOV       ?V4,A
   \   000005   E5..         MOV       A,?V5
   \   000007   3F           ADDC      A,R7
   \   000008   F5..         MOV       ?V5,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E5..         MOV       A,?V2
   \   000002   2E           ADD       A,R6
   \   000003   F5..         MOV       ?V2,A
   \   000005   E5..         MOV       A,?V3
   \   000007   3F           ADDC      A,R7
   \   000008   F5..         MOV       ?V3,A
   \   00000A   05..         INC       ?V8
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   FA           MOV       R2,A
   \   000001   AB..         MOV       R3,?V1
   \   000003   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000006   8A..         MOV       ?V4,R2
   \   000008   8B..         MOV       ?V5,R3
   \   00000A   AE..         MOV       R6,?V4
   \   00000C   AF..         MOV       R7,?V5
   \   00000E                ; Setup parameters for call to function osal_memcpy
   \   00000E                ; Setup parameters for call to function osal_memcpy
   \   00000E   85....       MOV       ?V4,?V0
   \   000011   85....       MOV       ?V5,?V1
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   78..         MOV       R0,#?V4
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   FA           MOV       R2,A
   \   000001   AB..         MOV       R3,?V1
   \   000003   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000006   8A..         MOV       ?V10,R2
   \   000008   8B..         MOV       ?V11,R3
   \   00000A   AE..         MOV       R6,?V10
   \   00000C   AF..         MOV       R7,?V11
   \   00000E   E5..         MOV       A,?V0
   \   000010   2A           ADD       A,R2
   \   000011   F5..         MOV       ?V0,A
   \   000013   E5..         MOV       A,?V1
   \   000015   3F           ADDC      A,R7
   \   000016   F5..         MOV       ?V1,A
   \   000018   EA           MOV       A,R2
   \   000019   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   05..         INC       ?V7
   \   000002   85..82       MOV       DPL,?V0
   \   000005   85..83       MOV       DPH,?V1
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E5..         MOV       A,?V0
   \   00000E   2403         ADD       A,#0x3
   \   000010   F5..         MOV       ?V0,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   8A..         MOV       ?V8,R2
   \   000002   8B..         MOV       ?V9,R3
   \   000004   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000007   35..         ADDC      A,?V9
   \   000009   F5..         MOV       ?V3,A
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   F583         MOV       DPH,A
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V1,A
   \   000017   75..00       MOV       ?V7,#0x0
   \   00001A   75..00       MOV       ?V4,#0x0
   \   00001D   75..00       MOV       ?V5,#0x0
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V1,A
   \   00000D   EA           MOV       A,R2
   \   00000E   2E           ADD       A,R6
   \   00000F   F5..         MOV       ?V2,A
   \   000011   E4           CLR       A
   \   000012   3B           ADDC      A,R3
   \   000013   F5..         MOV       ?V3,A
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   E5..         MOV       A,?V7
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   75..00       MOV       ?V8,#0x0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00000A   E5..         MOV       A,?V0
   \   00000C   98           SUBB      A,R0
   \   00000D   E5..         MOV       A,?V1
   \   00000F   99           SUBB      A,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV       DPL,?V12
   \   000003   85..83       MOV       DPH,?V13
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   E5..         MOV       A,?V2
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   E5..         MOV       A,?V3
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   E5..         MOV       A,?V0
   \   000012   2E           ADD       A,R6
   \   000013   F5..         MOV       ?V0,A
   \   000015   E5..         MOV       A,?V1
   \   000017   3F           ADDC      A,R7
   \   000018   F5..         MOV       ?V1,A
   \   00001A   EE           MOV       A,R6
   \   00001B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E5..         MOV       A,?V8
   \   000002   75F005       MOV       B,#0x5
   \   000005   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000008   85..82       MOV       DPL,?V0
   \   00000B   85..83       MOV       DPH,?V1
   \   00000E   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E9           MOV       A,R1
   \   000014   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   E5..         MOV       A,?V0
   \   00001F   2403         ADD       A,#0x3
   \   000021   F5..         MOV       ?V0,A
   \   000023   22           RET
   3794          
   3795          /*********************************************************************
   3796           * @fn      zclParseInWriteRspCmd
   3797           *
   3798           * @brief   Parse the "Profile" Write Response Commands
   3799           *
   3800           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3801           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3802           *
   3803           * @param   pCmd - pointer to incoming data to parse
   3804           *
   3805           * @return  pointer to the parsed command structure
   3806           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3807          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   3808          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3809            zclWriteRspCmd_t *writeRspCmd;
   3810            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000008   3B           ADDC      A,R3
   \   000009   F5..         MOV       ?V3,A
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   3811            uint8 i = 0;
   \                     ??CrossCallReturnLabel_556:
   \   000013   75..00       MOV       ?V4,#0x0
   3812          
   3813            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000016   12....       LCALL     ?Subroutine84 & 0xFFFF
   3814            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_143:
   \   000019   605D         JZ        ??zclParseInWriteRspCmd_0
   3815            {
   3816              if ( pCmd->dataLen == 1 )
   \   00001B   85..82       MOV       DPL,?V0
   \   00001E   85..83       MOV       DPH,?V1
   \   000021   E0           MOVX      A,@DPTR
   \   000022   6401         XRL       A,#0x1
   \   000024   7002         JNZ       ??zclParseInWriteRspCmd_1
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   000028   703C         JNZ       ??zclParseInWriteRspCmd_2
   3817              {
   3818                // special case when all writes were successfull
   3819                writeRspCmd->attrList[i++].status = *pBuf;
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   12....       LCALL     ?Subroutine118 & 0xFFFF
   3820              }
   \                     ??CrossCallReturnLabel_202:
   \   000031   F0           MOVX      @DPTR,A
   \   000032   75..01       MOV       ?V4,#0x1
   \   000035   803A         SJMP      ??zclParseInWriteRspCmd_3
   3821              else
   3822              {
   3823                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3824                {
   3825                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000037   E5..         MOV       A,?V4
   \   000039   75F003       MOV       B,#0x3
   \   00003C   A4           MUL       AB
   \   00003D   F8           MOV       R0,A
   \   00003E   A9F0         MOV       R1,B
   \   000040   EA           MOV       A,R2
   \   000041   28           ADD       A,R0
   \   000042   F8           MOV       R0,A
   \   000043   EB           MOV       A,R3
   \   000044   39           ADDC      A,R1
   \   000045   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   000048   12....       LCALL     ?Subroutine17 & 0xFFFF
   3826                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_479:
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F5..         MOV       ?V6,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FD           MOV       R5,A
   \   000051   E5..         MOV       A,?V6
   \   000053   8882         MOV       DPL,R0
   \   000055   8983         MOV       DPH,R1
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   ED           MOV       A,R5
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   05..         INC       ?V4
   3827                  pBuf += 2;
   \   00005F   EE           MOV       A,R6
   \   000060   2402         ADD       A,#0x2
   \   000062   FE           MOV       R6,A
   \   000063   5001         JNC       ??zclParseInWriteRspCmd_2
   \   000065   0F           INC       R7
   3828                }
   \                     ??zclParseInWriteRspCmd_2:
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   12....       LCALL     ?Subroutine62 & 0xFFFF
   3829              }
   \                     ??CrossCallReturnLabel_91:
   \   00006F   40C6         JC        ??zclParseInWriteRspCmd_4
   3830          
   3831              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_3:
   \   000071   8A82         MOV       DPL,R2
   \   000073   8B83         MOV       DPH,R3
   \   000075   E5..         MOV       A,?V4
   \   000077   F0           MOVX      @DPTR,A
   3832            }
   3833          
   3834            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   000078   02....       LJMP      ??Subroutine230_0 & 0xFFFF
   3835          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   EE           MOV       A,R6
   \   000004   98           SUBB      A,R0
   \   000005   EF           MOV       A,R7
   \   000006   99           SUBB      A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   F9           MOV       R1,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005                REQUIRE ??Subroutine268_0
   \   000005                ; // Fall through to label ??Subroutine268_0
   3836          #endif // ZCL_WRITE
   3837          
   3838          #ifdef ZCL_REPORTING_DEVICE
   3839          /*********************************************************************
   3840           * @fn      zclParseInConfigReportCmd
   3841           *
   3842           * @brief   Parse the "Profile" Configure Reporting Command
   3843           *
   3844           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3845           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3846           *
   3847           * @param   pCmd - pointer to incoming data to parse
   3848           *
   3849           * @return  pointer to the parsed command structure
   3850           */
   3851          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   3852          {
   3853            zclCfgReportCmd_t *cfgReportCmd;
   3854            uint8 *pBuf = pCmd->pData;
   3855            uint8 *dataPtr;
   3856            uint8 numAttr = 0;
   3857            uint8 dataType;
   3858            uint8 hdrLen;
   3859            uint16 dataLen = 0;
   3860            uint8 reportChangeLen; // length of Reportable Change field
   3861          
   3862            // Calculate the length of the Request command
   3863            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3864            {
   3865              uint8 direction;
   3866          
   3867              numAttr++;
   3868              direction = *pBuf++;
   3869              pBuf += 2; // move pass the attribute ID
   3870          
   3871              // Is there a Reportable Change field?
   3872              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3873              {
   3874                dataType = *pBuf++;
   3875                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3876          
   3877                // For attributes of 'discrete' data types this field is omitted
   3878                if ( zclAnalogDataType( dataType ) )
   3879                {
   3880                  reportChangeLen = zclGetDataTypeLength( dataType );
   3881                  pBuf += reportChangeLen;
   3882          
   3883                  // add padding if needed
   3884                  if ( PADDING_NEEDED( reportChangeLen ) )
   3885                  {
   3886                    reportChangeLen++;
   3887                  }
   3888          
   3889                  dataLen += reportChangeLen;
   3890                }
   3891                else
   3892                {
   3893                  pBuf++; // move past reportable change field
   3894                }
   3895              }
   3896              else
   3897              {
   3898                pBuf += 2; // move pass the Timeout Period
   3899              }
   3900            } // while loop
   3901          
   3902            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   3903          
   3904            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3905            if ( cfgReportCmd != NULL )
   3906            {
   3907              uint8 i;
   3908              pBuf = pCmd->pData;
   3909              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   3910          
   3911              cfgReportCmd->numAttr = numAttr;
   3912              for ( i = 0; i < numAttr; i++ )
   3913              {
   3914                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3915          
   3916                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3917          
   3918                reportRec->direction = *pBuf++;
   3919                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3920                pBuf += 2;
   3921                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3922                {
   3923                  // Attribute to be reported
   3924                  reportRec->dataType = *pBuf++;
   3925                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3926                  pBuf += 2;
   3927                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3928                  pBuf += 2;
   3929          
   3930                  // For attributes of 'discrete' data types this field is omitted
   3931                  if ( zclAnalogDataType( reportRec->dataType ) )
   3932                  {
   3933                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3934                    reportRec->reportableChange = dataPtr;
   3935          
   3936                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3937                    pBuf += reportChangeLen;
   3938          
   3939                    // advance attribute data pointer
   3940                    if ( PADDING_NEEDED( reportChangeLen ) )
   3941                    {
   3942                      reportChangeLen++;
   3943                    }
   3944          
   3945                    dataPtr += reportChangeLen;
   3946                  }
   3947                }
   3948                else
   3949                {
   3950                  // Attribute reports to be received
   3951                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   3952                  pBuf += 2;
   3953                }
   3954              } // while loop
   3955            }
   3956          
   3957            return ( (void *)cfgReportCmd );
   3958          }
   3959          #endif
   3960          
   3961          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3962          /*********************************************************************
   3963           * @fn      zclParseInConfigReportRspCmd
   3964           *
   3965           * @brief   Parse the "Profile" Configure Reporting Response Command
   3966           *
   3967           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3968           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3969           *
   3970           * @param   pCmd - pointer to incoming data to parse
   3971           *
   3972           * @return  pointer to the parsed command structure
   3973           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3974          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInConfigReportRspCmd:
   3975          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3976            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3977            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine90 & 0xFFFF
   3978            uint8 numAttr;
   3979          
   3980            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   \                     ??CrossCallReturnLabel_154:
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V1,A
   \   00000E   7402         MOV       A,#0x2
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?US_SHR
   \   000015   E5..         MOV       A,?V0
   \   000017   F5..         MOV       ?V0,A
   3981          
   3982            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3983                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   F5..         MOV       ?V2,A
   \   00001B   75..00       MOV       ?V3,#0x0
   \   00001E   7402         MOV       A,#0x2
   \   000020   78..         MOV       R0,#?V2
   \   000022   12....       LCALL     ?S_SHL
   \   000025   E5..         MOV       A,?V2
   \   000027   2401         ADD       A,#0x1
   \   000029   12....       LCALL     ?Subroutine134 & 0xFFFF
   3984            if ( cfgReportRspCmd != NULL )
   \                     ??CrossCallReturnLabel_510:
   \   00002C   6055         JZ        ??zclParseInConfigReportRspCmd_0
   3985            {
   3986              uint8 i;
   3987              cfgReportRspCmd->numAttr = numAttr;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   E5..         MOV       A,?V0
   \   000034   F0           MOVX      @DPTR,A
   3988              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   \   000035   7C00         MOV       R4,#0x0
   \   000037   8045         SJMP      ??zclParseInConfigReportRspCmd_1
   3989              {
   3990                cfgReportRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInConfigReportRspCmd_2:
   \   000039   EC           MOV       A,R4
   \   00003A   F5..         MOV       ?V0,A
   \   00003C   75..00       MOV       ?V1,#0x0
   \   00003F   7402         MOV       A,#0x2
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?S_SHL
   \   000046   EA           MOV       A,R2
   \   000047   25..         ADD       A,?V0
   \   000049   F8           MOV       R0,A
   \   00004A   EB           MOV       A,R3
   \   00004B   35..         ADDC      A,?V1
   \   00004D   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000050   12....       LCALL     ?Subroutine28 & 0xFFFF
   3991                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   \                     ??CrossCallReturnLabel_409:
   \   000053   8882         MOV       DPL,R0
   \   000055   8983         MOV       DPH,R1
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00005C   5001         JNC       ??zclParseInConfigReportRspCmd_3
   \   00005E   0F           INC       R7
   3992                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInConfigReportRspCmd_3:
   \   00005F   F582         MOV       DPL,A
   \   000061   8F83         MOV       DPH,R7
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F5..         MOV       ?V2,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F5..         MOV       ?V1,A
   \   00006A   E5..         MOV       A,?V2
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   E5..         MOV       A,?V1
   \   000077   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   3993                pBuf += 2;
   3994              }
   \                     ??CrossCallReturnLabel_507:
   \   00007A   5001         JNC       ??zclParseInConfigReportRspCmd_4
   \   00007C   0F           INC       R7
   \                     ??zclParseInConfigReportRspCmd_4:
   \   00007D   0C           INC       R4
   \                     ??zclParseInConfigReportRspCmd_1:
   \   00007E   12....       LCALL     ?Subroutine102 & 0xFFFF
   3995            }
   \                     ??CrossCallReturnLabel_466:
   \   000081   40B6         JC        ??zclParseInConfigReportRspCmd_2
   3996          
   3997            return ( (void *)cfgReportRspCmd );
   \                     ??zclParseInConfigReportRspCmd_0:
   \   000083   02....       LJMP      ??Subroutine212_0 & 0xFFFF
   3998          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V3
   \   000004                REQUIRE ??Subroutine244_0
   \   000004                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine245_0
   \   000001                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET
   3999          #endif
   4000          
   4001          #ifdef ZCL_REPORTING_DEVICE
   4002          /*********************************************************************
   4003           * @fn      zclParseInReadReportCfgCmd
   4004           *
   4005           * @brief   Parse the "Profile" Read Reporting Configuration Command
   4006           *
   4007           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4008           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4009           *
   4010           * @param   pCmd - pointer to incoming data to parse
   4011           *
   4012           * @return  pointer to the parsed command structure
   4013           */
   4014          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   4015          {
   4016            zclReadReportCfgCmd_t *readReportCfgCmd;
   4017            uint8 *pBuf = pCmd->pData;
   4018            uint8 numAttr;
   4019          
   4020            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   4021          
   4022            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   4023                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   4024            if ( readReportCfgCmd != NULL )
   4025            {
   4026              uint8 i;
   4027              readReportCfgCmd->numAttr = numAttr;
   4028              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   4029              {
   4030                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   4031                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4032                pBuf += 2;
   4033              }
   4034            }
   4035          
   4036            return ( (void *)readReportCfgCmd );
   4037          }
   4038          #endif
   4039          
   4040          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   4041          /*********************************************************************
   4042           * @fn      zclParseInReadReportCfgRspCmd
   4043           *
   4044           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   4045           *
   4046           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4047           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4048           *
   4049           * @param   pCmd - pointer to incoming data to parse
   4050           *
   4051           * @return  pointer to the parsed command structure
   4052           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4053          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadReportCfgRspCmd:
   4054          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   4055            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   4056            uint8 reportChangeLen;
   4057            uint8 *pBuf = pCmd->pData;
   \   00000E   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000011   35..         ADDC      A,?V1
   \   000013   F5..         MOV       ?V3,A
   \   000015   85..82       MOV       DPL,?V2
   \   000018   F583         MOV       DPH,A
   \   00001A   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   4058            uint8 *dataPtr;
   4059            uint8 numAttr = 0;
   \                     ??CrossCallReturnLabel_557:
   \   00001D   75..00       MOV       ?V8,#0x0
   4060            uint8 hdrLen;
   4061            uint16 dataLen = 0;
   \   000020   75..00       MOV       ?V4,#0x0
   \   000023   75..00       MOV       ?V5,#0x0
   \   000026   8007         SJMP      ??zclParseInReadReportCfgRspCmd_0
   4062          
   4063            // Calculate the length of the response command
   4064            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4065            {
   4066              uint8 status;
   4067              uint8 direction;
   4068          
   4069              numAttr++;
   4070              status = *pBuf++;
   4071              direction = *pBuf++;
   4072              pBuf += 2; // move pass the attribute ID
   4073          
   4074              if ( status == ZCL_STATUS_SUCCESS )
   4075              {
   4076                if ( direction == ZCL_SEND_ATTR_REPORTS )
   4077                {
   4078                  uint8 dataType = *pBuf++;
   4079                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   4080          
   4081                  // For attributes of 'discrete' data types this field is omitted
   4082                  if ( zclAnalogDataType( dataType ) )
   4083                  {
   4084                    reportChangeLen = zclGetDataTypeLength( dataType );
   4085                    pBuf += reportChangeLen;
   4086          
   4087                    // add padding if needed
   4088                    if ( PADDING_NEEDED( reportChangeLen ) )
   4089                    {
   4090                      reportChangeLen++;
   4091                    }
   4092          
   4093                    dataLen += reportChangeLen;
   4094                  }
   4095                }
   4096                else
   4097                {
   4098                  pBuf += 2; // move pass the Timeout field
   \                     ??zclParseInReadReportCfgRspCmd_1:
   \   000028   EE           MOV       A,R6
   \   000029   2402         ADD       A,#0x2
   \   00002B   FE           MOV       R6,A
   \   00002C   5001         JNC       ??zclParseInReadReportCfgRspCmd_0
   \   00002E   0F           INC       R7
   4099                }
   \                     ??zclParseInReadReportCfgRspCmd_0:
   \   00002F   85..82       MOV       DPL,?V0
   \   000032   85..83       MOV       DPH,?V1
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000039   5042         JNC       ??zclParseInReadReportCfgRspCmd_2
   \   00003B   05..         INC       ?V8
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   EE           MOV       A,R6
   \   000047   2404         ADD       A,#0x4
   \   000049   FE           MOV       R6,A
   \   00004A   5001         JNC       ??zclParseInReadReportCfgRspCmd_3
   \   00004C   0F           INC       R7
   \                     ??zclParseInReadReportCfgRspCmd_3:
   \   00004D   E9           MOV       A,R1
   \   00004E   70DF         JNZ       ??zclParseInReadReportCfgRspCmd_0
   \   000050   E8           MOV       A,R0
   \   000051   70D5         JNZ       ??zclParseInReadReportCfgRspCmd_1
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V6,A
   \   00005A   EE           MOV       A,R6
   \   00005B   2405         ADD       A,#0x5
   \   00005D   FE           MOV       R6,A
   \   00005E   5001         JNC       ??zclParseInReadReportCfgRspCmd_4
   \   000060   0F           INC       R7
   \                     ??zclParseInReadReportCfgRspCmd_4:
   \   000061                ; Setup parameters for call to function zclAnalogDataType
   \   000061   A9..         MOV       R1,?V6
   \   000063   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000066   E9           MOV       A,R1
   \   000067   60C6         JZ        ??zclParseInReadReportCfgRspCmd_0
   \   000069                ; Setup parameters for call to function zclGetDataTypeLength
   \   000069   A9..         MOV       R1,?V6
   \   00006B   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00006E   5001         JNC       ??zclParseInReadReportCfgRspCmd_5
   \   000070   08           INC       R0
   \                     ??zclParseInReadReportCfgRspCmd_5:
   \   000071   E5..         MOV       A,?V4
   \   000073   28           ADD       A,R0
   \   000074   F5..         MOV       ?V4,A
   \   000076   E4           CLR       A
   \   000077   35..         ADDC      A,?V5
   \   000079   F5..         MOV       ?V5,A
   \   00007B   80B2         SJMP      ??zclParseInReadReportCfgRspCmd_0
   4100              }
   4101            } // while loop
   4102          
   4103            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   \                     ??zclParseInReadReportCfgRspCmd_2:
   \   00007D   75F00D       MOV       B,#0xd
   \   000080   E5..         MOV       A,?V8
   \   000082   A4           MUL       AB
   \   000083   04           INC       A
   \   000084   F5..         MOV       ?V6,A
   4104          
   4105            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   25..         ADD       A,?V4
   \   000088   FA           MOV       R2,A
   \   000089   E4           CLR       A
   \   00008A   35..         ADDC      A,?V5
   \   00008C   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   4106            if ( readReportCfgRspCmd != NULL )
   \                     ??CrossCallReturnLabel_633:
   \   00008F   7003         JNZ       $+5
   \   000091   02....       LJMP      ??zclParseInReadReportCfgRspCmd_6 & 0xFFFF
   4107            {
   4108              uint8 i;
   4109              pBuf = pCmd->pData;
   \   000094   12....       LCALL     ?Subroutine91 & 0xFFFF
   4110              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_560:
   \   000097   A8..         MOV       R0,?V6
   \   000099   EA           MOV       A,R2
   \   00009A   28           ADD       A,R0
   \   00009B   F5..         MOV       ?V2,A
   \   00009D   E4           CLR       A
   \   00009E   3B           ADDC      A,R3
   \   00009F   F5..         MOV       ?V3,A
   4111          
   4112              readReportCfgRspCmd->numAttr = numAttr;
   \   0000A1   8A82         MOV       DPL,R2
   \   0000A3   8B83         MOV       DPH,R3
   \   0000A5   E5..         MOV       A,?V8
   \   0000A7   F0           MOVX      @DPTR,A
   4113              for ( i = 0; i < numAttr; i++ )
   \   0000A8   75..00       MOV       ?V9,#0x0
   \   0000AB   801F         SJMP      ??zclParseInReadReportCfgRspCmd_7
   4114              {
   4115                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   4116          
   4117                reportRspRec->status = *pBuf++;
   4118                reportRspRec->direction = *pBuf++;
   4119                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4120                pBuf += 2;
   4121          
   4122                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   4123                {
   4124                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   4125                  {
   4126                    reportRspRec->dataType = *pBuf++;
   4127                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4128                    pBuf += 2;
   4129                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4130                    pBuf += 2;
   4131          
   4132                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   4133                    {
   4134                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   4135                      reportRspRec->reportableChange = dataPtr;
   4136          
   4137                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   4138                      pBuf += reportChangeLen;
   4139          
   4140                      // advance attribute data pointer
   4141                      if ( PADDING_NEEDED( reportChangeLen ) )
   4142                      {
   4143                        reportChangeLen++;
   4144                      }
   4145          
   4146                      dataPtr += reportChangeLen;
   4147                    }
   4148                  }
   4149                  else
   4150                  {
   4151                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadReportCfgRspCmd_8:
   \   0000AD   8882         MOV       DPL,R0
   \   0000AF   8983         MOV       DPH,R1
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F9           MOV       R1,A
   \   0000B3   EA           MOV       A,R2
   \   0000B4   85..82       MOV       DPL,?V4
   \   0000B7   85..83       MOV       DPH,?V5
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   4152                    pBuf += 2;
   \                     ??CrossCallReturnLabel_526:
   \   0000C6   0E           INC       R6
   \   0000C7   0E           INC       R6
   \   0000C8   ED           MOV       A,R5
   \   0000C9   FF           MOV       R7,A
   4153                  }
   \                     ??zclParseInReadReportCfgRspCmd_9:
   \   0000CA   05..         INC       ?V9
   \                     ??zclParseInReadReportCfgRspCmd_7:
   \   0000CC   E5..         MOV       A,?V9
   \   0000CE   C3           CLR       C
   \   0000CF   95..         SUBB      A,?V8
   \   0000D1   4003         JC        $+5
   \   0000D3   02....       LJMP      ??zclParseInReadReportCfgRspCmd_6 & 0xFFFF
   \   0000D6   E5..         MOV       A,?V9
   \   0000D8   75F00D       MOV       B,#0xd
   \   0000DB   A4           MUL       AB
   \   0000DC   F8           MOV       R0,A
   \   0000DD   A9F0         MOV       R1,B
   \   0000DF   E5..         MOV       A,?V0
   \   0000E1   28           ADD       A,R0
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   E5..         MOV       A,?V1
   \   0000E6   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   FA           MOV       R2,A
   \   0000EF   85..82       MOV       DPL,?V4
   \   0000F2   85..83       MOV       DPH,?V5
   \   0000F5   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   0000F8   FB           MOV       R3,A
   \   0000F9   85..82       MOV       DPL,?V4
   \   0000FC   85..83       MOV       DPH,?V5
   \   0000FF   A3           INC       DPTR
   \   000100   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000103   5001         JNC       ??zclParseInReadReportCfgRspCmd_10
   \   000105   0F           INC       R7
   \                     ??zclParseInReadReportCfgRspCmd_10:
   \   000106   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000109   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00010C   5001         JNC       ??zclParseInReadReportCfgRspCmd_11
   \   00010E   0F           INC       R7
   \                     ??zclParseInReadReportCfgRspCmd_11:
   \   00010F   EA           MOV       A,R2
   \   000110   70B8         JNZ       ??zclParseInReadReportCfgRspCmd_9
   \   000112   EE           MOV       A,R6
   \   000113   2402         ADD       A,#0x2
   \   000115   FC           MOV       R4,A
   \   000116   E4           CLR       A
   \   000117   3F           ADDC      A,R7
   \   000118   FD           MOV       R5,A
   \   000119   8E82         MOV       DPL,R6
   \   00011B   8F83         MOV       DPH,R7
   \   00011D   A3           INC       DPTR
   \   00011E   A882         MOV       R0,DPL
   \   000120   A983         MOV       R1,DPH
   \   000122   8E82         MOV       DPL,R6
   \   000124   8F83         MOV       DPH,R7
   \   000126   E0           MOVX      A,@DPTR
   \   000127   FA           MOV       R2,A
   \   000128   EB           MOV       A,R3
   \   000129   7082         JNZ       ??zclParseInReadReportCfgRspCmd_8
   \   00012B   E5..         MOV       A,?V4
   \   00012D   2404         ADD       A,#0x4
   \   00012F   F5..         MOV       ?V12,A
   \   000131   E4           CLR       A
   \   000132   35..         ADDC      A,?V5
   \   000134   F5..         MOV       ?V13,A
   \   000136   EA           MOV       A,R2
   \   000137   85..82       MOV       DPL,?V12
   \   00013A   85..83       MOV       DPH,?V13
   \   00013D   F0           MOVX      @DPTR,A
   \   00013E   E9           MOV       A,R1
   \   00013F   FF           MOV       R7,A
   \   000140   8882         MOV       DPL,R0
   \   000142   F583         MOV       DPH,A
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F5..         MOV       ?V6,A
   \   000147   8C82         MOV       DPL,R4
   \   000149   8D83         MOV       DPH,R5
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   F9           MOV       R1,A
   \   00014D   E5..         MOV       A,?V6
   \   00014F   85..82       MOV       DPL,?V4
   \   000152   85..83       MOV       DPH,?V5
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   00015D   E8           MOV       A,R0
   \   00015E   2402         ADD       A,#0x2
   \   000160   FE           MOV       R6,A
   \   000161   5001         JNC       ??zclParseInReadReportCfgRspCmd_12
   \   000163   0F           INC       R7
   \                     ??zclParseInReadReportCfgRspCmd_12:
   \   000164   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   00016F   5001         JNC       ??zclParseInReadReportCfgRspCmd_13
   \   000171   0F           INC       R7
   \                     ??zclParseInReadReportCfgRspCmd_13:
   \   000172                ; Setup parameters for call to function zclAnalogDataType
   \   000172   EA           MOV       A,R2
   \   000173   F9           MOV       R1,A
   \   000174   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000177   E9           MOV       A,R1
   \   000178   7003         JNZ       $+5
   \   00017A   02....       LJMP      ??zclParseInReadReportCfgRspCmd_9 & 0xFFFF
   \   00017D   8E..         MOV       ?V6,R6
   \   00017F   8F..         MOV       ?V7,R7
   \   000181                ; Setup parameters for call to function zclGetAttrDataLength
   \   000181   AA..         MOV       R2,?V2
   \   000183   AB..         MOV       R3,?V3
   \   000185   85..82       MOV       DPL,?V12
   \   000188   85..83       MOV       DPH,?V13
   \   00018B   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00018E   8A..         MOV       ?V10,R2
   \   000190   8B..         MOV       ?V11,R3
   \   000192   A8..         MOV       R0,?V10
   \   000194   A9..         MOV       R1,?V11
   \   000196   85..82       MOV       DPL,?XSP + 0
   \   000199   85..83       MOV       DPH,?XSP + 1
   \   00019C   7401         MOV       A,#0x1
   \   00019E   F0           MOVX      @DPTR,A
   \   00019F   A3           INC       DPTR
   \   0001A0   E4           CLR       A
   \   0001A1   F0           MOVX      @DPTR,A
   \   0001A2   85..82       MOV       DPL,?XSP + 0
   \   0001A5   85..83       MOV       DPH,?XSP + 1
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   600C         JZ        ??zclParseInReadReportCfgRspCmd_14
   \   0001AB   75..01       MOV       ?V10,#0x1
   \   0001AE   75..00       MOV       ?V11,#0x0
   \   0001B1   7A00         MOV       R2,#0x0
   \   0001B3   7B00         MOV       R3,#0x0
   \   0001B5   803A         SJMP      ??zclParseInReadReportCfgRspCmd_15
   \                     ??zclParseInReadReportCfgRspCmd_14:
   \   0001B7   75..FF       MOV       ?V10,#-0x1
   \   0001BA   75..FF       MOV       ?V11,#-0x1
   \   0001BD   EA           MOV       A,R2
   \   0001BE   24FF         ADD       A,#-0x1
   \   0001C0   1A           DEC       R2
   \   0001C1   EB           MOV       A,R3
   \   0001C2   34FF         ADDC      A,#-0x1
   \   0001C4   802A         SJMP      ??zclParseInReadReportCfgRspCmd_16
   \                     ??zclParseInReadReportCfgRspCmd_17:
   \   0001C6   85..82       MOV       DPL,?V6
   \   0001C9   85..83       MOV       DPH,?V7
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   C0E0         PUSH      A
   \   0001CF   E5..         MOV       A,?V2
   \   0001D1   2A           ADD       A,R2
   \   0001D2   F582         MOV       DPL,A
   \   0001D4   E5..         MOV       A,?V3
   \   0001D6   3B           ADDC      A,R3
   \   0001D7   F583         MOV       DPH,A
   \   0001D9   D0E0         POP       A
   \   0001DB   F0           MOVX      @DPTR,A
   \   0001DC   85..82       MOV       DPL,?V6
   \   0001DF   85..83       MOV       DPH,?V7
   \   0001E2   A3           INC       DPTR
   \   0001E3   8582..       MOV       ?V6,DPL
   \   0001E6   8583..       MOV       ?V7,DPH
   \   0001E9   EA           MOV       A,R2
   \   0001EA   25..         ADD       A,?V10
   \   0001EC   FA           MOV       R2,A
   \   0001ED   EB           MOV       A,R3
   \   0001EE   35..         ADDC      A,?V11
   \                     ??zclParseInReadReportCfgRspCmd_16:
   \   0001F0   FB           MOV       R3,A
   \                     ??zclParseInReadReportCfgRspCmd_15:
   \   0001F1   E8           MOV       A,R0
   \   0001F2   FC           MOV       R4,A
   \   0001F3   E9           MOV       A,R1
   \   0001F4   FD           MOV       R5,A
   \   0001F5   EC           MOV       A,R4
   \   0001F6   24FF         ADD       A,#-0x1
   \   0001F8   18           DEC       R0
   \   0001F9   ED           MOV       A,R5
   \   0001FA   34FF         ADDC      A,#-0x1
   \   0001FC   F9           MOV       R1,A
   \   0001FD   EC           MOV       A,R4
   \   0001FE   4D           ORL       A,R5
   \   0001FF   70C5         JNZ       ??zclParseInReadReportCfgRspCmd_17
   \   000201   E5..         MOV       A,?V4
   \   000203   240B         ADD       A,#0xb
   \   000205   F582         MOV       DPL,A
   \   000207   E4           CLR       A
   \   000208   35..         ADDC      A,?V5
   \   00020A   F583         MOV       DPH,A
   \   00020C   E5..         MOV       A,?V2
   \   00020E   F0           MOVX      @DPTR,A
   \   00020F   A3           INC       DPTR
   \   000210   E5..         MOV       A,?V3
   \   000212   F0           MOVX      @DPTR,A
   \   000213                ; Setup parameters for call to function zclGetDataTypeLength
   \   000213   85..82       MOV       DPL,?V12
   \   000216   85..83       MOV       DPH,?V13
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   F9           MOV       R1,A
   \   00021B   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00021E   5001         JNC       ??zclParseInReadReportCfgRspCmd_18
   \   000220   08           INC       R0
   \                     ??zclParseInReadReportCfgRspCmd_18:
   \   000221   E5..         MOV       A,?V2
   \   000223   28           ADD       A,R0
   \   000224   F5..         MOV       ?V2,A
   \   000226   E4           CLR       A
   \   000227   35..         ADDC      A,?V3
   \   000229   F5..         MOV       ?V3,A
   \   00022B   02....       LJMP      ??zclParseInReadReportCfgRspCmd_9 & 0xFFFF
   4154                }
   4155              }
   4156            }
   4157          
   4158            return ( (void *)readReportCfgRspCmd );
   \                     ??zclParseInReadReportCfgRspCmd_6:
   \   00022E   AA..         MOV       R2,?V0
   \   000230   AB..         MOV       R3,?V1
   \   000232   02....       LJMP      ?Subroutine7 & 0xFFFF
   4159          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000003   E9           MOV       A,R1
   \   000004   F8           MOV       R0,A
   \   000005   EE           MOV       A,R6
   \   000006   29           ADD       A,R1
   \   000007   FE           MOV       R6,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   FF           MOV       R7,A
   \   00000B   E9           MOV       A,R1
   \   00000C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F582         MOV       DPL,A
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FC           MOV       R4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   EC           MOV       A,R4
   \   00000A   85..82       MOV       DPL,?V4
   \   00000D   85..83       MOV       DPH,?V5
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine252_0
   \   000006                ; // Fall through to label ??Subroutine252_0
   4160          #endif
   4161          
   4162          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   4163          /*********************************************************************
   4164           * @fn      zclParseInReportCmd
   4165           *
   4166           * @brief   Parse the "Profile" Report Command
   4167           *
   4168           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4169           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4170           *
   4171           * @param   pCmd - pointer to incoming data to parse
   4172           *
   4173           * @return  pointer to the parsed command structure
   4174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4175          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReportCmd:
   4176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine78 & 0xFFFF
   4177            zclReportCmd_t *reportCmd;
   4178            uint8 *pBuf = pCmd->pData;
   4179            uint16 attrDataLen;
   4180            uint8 *dataPtr;
   4181            uint8 numAttr = 0;
   4182            uint8 hdrLen;
   4183            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_134:
   \   000008   8014         SJMP      ??CrossCallReturnLabel_275
   4184          
   4185            // find out the number of attributes and the length of attribute data
   4186            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4187            {
   4188              uint8 dataType;
   4189          
   4190              numAttr++;
   \                     ??zclParseInReportCmd_0:
   \   00000A   12....       LCALL     ?Subroutine124 & 0xFFFF
   4191              pBuf += 2; // move pass attribute id
   4192          
   4193              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_214:
   \   00000D   5002         JNC       ??zclParseInReportCmd_1
   \   00000F   05..         INC       ?V1
   4194          
   4195              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInReportCmd_1:
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011   12....       LCALL     ?Subroutine152 & 0xFFFF
   4196              pBuf += attrDataLen; // move pass attribute data
   4197          
   4198              // add padding if needed
   4199              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_257:
   \   000014   5005         JNC       ??zclParseInReportCmd_2
   4200              {
   4201                attrDataLen++;
   \   000016   0E           INC       R6
   \   000017   04           INC       A
   \   000018   7001         JNZ       ??zclParseInReportCmd_2
   \   00001A   0F           INC       R7
   4202              }
   4203          
   4204              dataLen += attrDataLen;
   \                     ??zclParseInReportCmd_2:
   \   00001B   12....       LCALL     ?Subroutine162 & 0xFFFF
   4205            }
   \                     ??CrossCallReturnLabel_275:
   \   00001E   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000021   40E7         JC        ??zclParseInReportCmd_0
   4206          
   4207            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   \   000023   12....       LCALL     ?Subroutine133 & 0xFFFF
   4208          
   4209            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4210            if (reportCmd != NULL )
   \                     ??CrossCallReturnLabel_490:
   \   000026   602C         JZ        ??zclParseInReportCmd_3
   4211            {
   4212              uint8 i;
   4213              pBuf = pCmd->pData;
   \   000028   12....       LCALL     ?Subroutine59 & 0xFFFF
   4214              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   4215          
   4216              reportCmd->numAttr = numAttr;
   4217              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_87:
   \   00002B   8020         SJMP      ??CrossCallReturnLabel_273
   4218              {
   4219                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zclParseInReportCmd_4:
   \   00002D   12....       LCALL     ?Subroutine15 & 0xFFFF
   4220          
   4221                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4222                pBuf += 2;
   4223                reportRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_5:
   \   000030   5002         JNC       ??zclParseInReportCmd_5
   \   000032   05..         INC       ?V1
   4224          
   4225                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   \                     ??zclParseInReportCmd_5:
   \   000034                ; Setup parameters for call to function zclGetAttrDataLength
   \   000034   12....       LCALL     ?Subroutine154 & 0xFFFF
   4226                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   \                     ??CrossCallReturnLabel_261:
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003A   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   4227                reportRec->attrData = dataPtr;
   \   000040   12....       LCALL     ?Subroutine21 & 0xFFFF
   4228          
   4229                pBuf += attrDataLen; // move pass attribute data
   4230          
   4231                // advance attribute data pointer
   4232                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_16:
   \   000043   5005         JNC       ??zclParseInReportCmd_6
   4233                {
   4234                  attrDataLen++;
   \   000045   0E           INC       R6
   \   000046   04           INC       A
   \   000047   7001         JNZ       ??zclParseInReportCmd_6
   \   000049   0F           INC       R7
   4235                }
   4236          
   4237                dataPtr += attrDataLen;
   \                     ??zclParseInReportCmd_6:
   \   00004A   12....       LCALL     ?Subroutine161 & 0xFFFF
   4238              }
   \                     ??CrossCallReturnLabel_273:
   \   00004D   E5..         MOV       A,?V8
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V7
   \   000052   40D9         JC        ??zclParseInReportCmd_4
   4239            }
   4240          
   4241            return ( (void *)reportCmd );
   \                     ??zclParseInReportCmd_3:
   \   000054   02....       LJMP      ?Subroutine11 & 0xFFFF
   4242          }
   4243          #endif
   4244          
   4245          /*********************************************************************
   4246           * @fn      zclParseInDefaultRspCmd
   4247           *
   4248           * @brief   Parse the "Profile" Default Response Command
   4249           *
   4250           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4251           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4252           *
   4253           * @param   pCmd - pointer to incoming data to parse
   4254           *
   4255           * @return  pointer to the parsed command structure
   4256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine241_0
   \   000004                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4257          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4258          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4259            zclDefaultRspCmd_t *defaultRspCmd;
   4260            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine72 & 0xFFFF
   4261          
   4262            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   4263            if ( defaultRspCmd != NULL )
   \                     ??CrossCallReturnLabel_117:
   \   000008   6003         JZ        ??CrossCallReturnLabel_23
   4264            {
   4265              defaultRspCmd->commandID = *pBuf++;
   \   00000A   12....       LCALL     ?Subroutine27 & 0xFFFF
   4266              defaultRspCmd->statusCode = *pBuf;
   4267            }
   4268          
   4269            return ( (void *)defaultRspCmd );
   \                     ??CrossCallReturnLabel_23:
   \   00000D   02....       LJMP      ?Subroutine3 & 0xFFFF
   4270          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   7A02         MOV       R2,#0x2
   \   000005   7B00         MOV       R3,#0x0
   \   000007   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000A   EA           MOV       A,R2
   \   00000B   4B           ORL       A,R3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000003   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000006   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET
   4271          
   4272          #ifdef ZCL_DISCOVER
   4273          /*********************************************************************
   4274           * @fn      zclParseInDiscAttrsCmd
   4275           *
   4276           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4277           *
   4278           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4279           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4280           *
   4281           * @param   pCmd - pointer to incoming data to parse
   4282           *
   4283           * @return  pointer to the parsed command structure
   4284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4285          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsCmd:
   4286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4287            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4288            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine99 & 0xFFFF
   4289          
   4290            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   \                     ??CrossCallReturnLabel_172:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A03         MOV       R2,#0x3
   \   00000A   7B00         MOV       R3,#0x0
   \   00000C   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   4291            if ( pDiscoverCmd != NULL )
   \                     ??CrossCallReturnLabel_515:
   \   00000F   6017         JZ        ??zclParseInDiscAttrsCmd_0
   4292            {
   4293              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   12....       LCALL     ?Subroutine128 & 0xFFFF
   4294              pBuf += 2;
   4295              pDiscoverCmd->maxAttrIDs = *pBuf;
   4296            }
   \                     ??CrossCallReturnLabel_227:
   \   000018   F9           MOV       R1,A
   \   000019   EC           MOV       A,R4
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   F0           MOVX      @DPTR,A
   4297          
   4298            return ( (void *)pDiscoverCmd );
   \                     ??zclParseInDiscAttrsCmd_0:
   \   000028   02....       LJMP      ?Subroutine3 & 0xFFFF
   4299          }
   4300          
   4301          /*********************************************************************
   4302           * @fn      zclParseInDiscAttrsRspCmd
   4303           *
   4304           * @brief   Parse the "Profile" Discovery Response Commands
   4305           *
   4306           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4307           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4308           *
   4309           * @param   pCmd - pointer to incoming data to parse
   4310           *
   4311           * @return  pointer to the parsed command structure
   4312           */
   4313          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4314          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsRspCmd:
   4315          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4316            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4317            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine87 & 0xFFFF
   4318            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   \                     ??CrossCallReturnLabel_148:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   34FF         ADDC      A,#-0x1
   \   00000D   F9           MOV       R1,A
   \   00000E   7A03         MOV       R2,#0x3
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ?US_DIV_MOD
   \   000015   E8           MOV       A,R0
   \   000016   F5..         MOV       ?V1,A
   4319          
   4320            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4321                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_681:
   \   00001B   39           ADDC      A,R1
   \   00001C   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   4322          
   4323            if ( pDiscoverRspCmd != NULL )
   \                     ??CrossCallReturnLabel_512:
   \   00001F   6042         JZ        ??zclParseInDiscAttrsRspCmd_0
   4324            {
   4325              uint8 i;
   4326          
   4327              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000021   12....       LCALL     ?Subroutine16 & 0xFFFF
   4328              pDiscoverRspCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_6:
   \   000024   E5..         MOV       A,?V1
   \   000026   F0           MOVX      @DPTR,A
   4329          
   4330              for ( i = 0; i < numAttr; i++ )
   \   000027   75..00       MOV       ?V0,#0x0
   \   00002A   8030         SJMP      ??zclParseInDiscAttrsRspCmd_1
   4331              {
   4332                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsRspCmd_2:
   \   00002C   E5..         MOV       A,?V0
   \   00002E   75F003       MOV       B,#0x3
   \   000031   A4           MUL       AB
   \   000032   F8           MOV       R0,A
   \   000033   A9F0         MOV       R1,B
   \   000035   EA           MOV       A,R2
   \   000036   28           ADD       A,R0
   \   000037   F8           MOV       R0,A
   \   000038   EB           MOV       A,R3
   \   000039   39           ADDC      A,R1
   \   00003A   F9           MOV       R1,A
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F5..         MOV       ?V2,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FD           MOV       R5,A
   \   000045   E5..         MOV       A,?V2
   \   000047   8882         MOV       DPL,R0
   \   000049   8983         MOV       DPH,R1
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   ED           MOV       A,R5
   \   000050   12....       LCALL     ?Subroutine22 & 0xFFFF
   4333                pBuf += 2;
   4334                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   4335              }
   \                     ??CrossCallReturnLabel_17:
   \   000053   EE           MOV       A,R6
   \   000054   2403         ADD       A,#0x3
   \   000056   FE           MOV       R6,A
   \   000057   5001         JNC       ??zclParseInDiscAttrsRspCmd_3
   \   000059   0F           INC       R7
   \                     ??zclParseInDiscAttrsRspCmd_3:
   \   00005A   05..         INC       ?V0
   \                     ??zclParseInDiscAttrsRspCmd_1:
   \   00005C   E5..         MOV       A,?V0
   \   00005E   C3           CLR       C
   \   00005F   95..         SUBB      A,?V1
   \   000061   40C9         JC        ??zclParseInDiscAttrsRspCmd_2
   4336            }
   4337          
   4338            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsRspCmd_0:
   \   000063   02....       LJMP      ??Subroutine212_0 & 0xFFFF
   4339          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   24FF         ADD       A,#-0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   75F003       MOV       B,#0x3
   \   000003   A4           MUL       AB
   \   000004   A9F0         MOV       R1,B
   \   000006                REQUIRE ??Subroutine271_0
   \   000006                ; // Fall through to label ??Subroutine271_0
   4340          
   4341          /*********************************************************************
   4342           * @fn      zclParseInDiscCmdsCmd
   4343           *
   4344           * @brief   Parse the "Profile" Discovery Commands
   4345           *
   4346           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4347           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4348           *
   4349           * @param   pCmd - pointer to incoming data to parse
   4350           *
   4351           * @return  pointer to the parsed command structure
   4352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4353          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsCmd:
   4354          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4355            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4356            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine72 & 0xFFFF
   4357          
   4358            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   4359            if ( pDiscoverCmd != NULL )
   \                     ??CrossCallReturnLabel_118:
   \   000008   6003         JZ        ??CrossCallReturnLabel_24
   4360            {
   4361              pDiscoverCmd->startCmdID = *pBuf++;
   \   00000A   12....       LCALL     ?Subroutine27 & 0xFFFF
   4362              pDiscoverCmd->maxCmdID = *pBuf++;
   4363            }
   4364          
   4365            return ( (void *)pDiscoverCmd );
   \                     ??CrossCallReturnLabel_24:
   \   00000D   02....       LJMP      ?Subroutine3 & 0xFFFF
   4366          }
   4367          
   4368          /*********************************************************************
   4369           * @fn      zclParseInDiscCmdsRspCmd
   4370           *
   4371           * @brief   Parse the Discover Commands Response Command
   4372           *
   4373           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4374           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4375           *
   4376           * @param   pCmd - pointer to incoming data to parse
   4377           *
   4378           * @return  pointer to the parsed command structure
   4379           */
   4380          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4381          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsRspCmd:
   4382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4383            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4384            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine90 & 0xFFFF
   4385            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   \                     ??CrossCallReturnLabel_155:
   \   000008   14           DEC       A
   \   000009   F5..         MOV       ?V0,A
   4386          
   4387              // allocate memory for size of structure plus variable array
   4388            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4389                              ( numCmds * sizeof(uint8) ) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   2405         ADD       A,#0x5
   \   00000D   FA           MOV       R2,A
   \   00000E   E4           CLR       A
   \   00000F   3400         ADDC      A,#0x0
   \   000011   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   4390            if ( pDiscoverRspCmd != NULL )
   \                     ??CrossCallReturnLabel_513:
   \   000014   6032         JZ        ??zclParseInDiscCmdsRspCmd_0
   4391            {
   4392              uint8 i;
   4393              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000016   12....       LCALL     ?Subroutine16 & 0xFFFF
   4394              pDiscoverRspCmd->numCmd = numCmds;
   \                     ??CrossCallReturnLabel_7:
   \   000019   A3           INC       DPTR
   \   00001A   E5..         MOV       A,?V0
   \   00001C   F0           MOVX      @DPTR,A
   4395          
   4396              for ( i = 0; i < numCmds; i++ )
   \   00001D   7800         MOV       R0,#0x0
   \   00001F   8021         SJMP      ??zclParseInDiscCmdsRspCmd_1
   4397              {
   4398                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   \                     ??zclParseInDiscCmdsRspCmd_2:
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C0E0         PUSH      A
   \   000028   E8           MOV       A,R0
   \   000029   FC           MOV       R4,A
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   2C           ADD       A,R4
   \   000033   F9           MOV       R1,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   3400         ADDC      A,#0x0
   \   000038   8982         MOV       DPL,R1
   \   00003A   F583         MOV       DPH,A
   \   00003C   D0E0         POP       A
   \   00003E   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   4399              }
   \                     ??CrossCallReturnLabel_477:
   \   000041   08           INC       R0
   \                     ??zclParseInDiscCmdsRspCmd_1:
   \   000042   E8           MOV       A,R0
   \   000043   C3           CLR       C
   \   000044   95..         SUBB      A,?V0
   \   000046   40D9         JC        ??zclParseInDiscCmdsRspCmd_2
   4400            }
   4401          
   4402            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscCmdsRspCmd_0:
   \   000048   02....       LJMP      ??Subroutine212_0 & 0xFFFF
   4403          }
   4404          
   4405          /*********************************************************************
   4406           * @fn      zclParseInDiscAttrsExtRspCmd
   4407           *
   4408           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4409           *
   4410           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4411           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4412           *
   4413           * @param   pCmd - pointer to incoming data to parse
   4414           *
   4415           * @return  pointer to the parsed command structure
   4416           */
   4417          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4418          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsExtRspCmd:
   4419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4420            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4421            uint8 i;
   4422            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine87 & 0xFFFF
   4423            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   \                     ??CrossCallReturnLabel_149:
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   34FF         ADDC      A,#-0x1
   \   00000E   F5..         MOV       ?V1,A
   \   000010   7402         MOV       A,#0x2
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?US_SHR
   \   000017   E5..         MOV       A,?V0
   \   000019   F5..         MOV       ?V0,A
   4424          
   4425            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4426                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   E5..         MOV       A,?V2
   \   000029   2402         ADD       A,#0x2
   \   00002B   12....       LCALL     ?Subroutine134 & 0xFFFF
   4427          
   4428            if ( pDiscoverRspCmd != NULL )
   \                     ??CrossCallReturnLabel_511:
   \   00002E   6053         JZ        ??zclParseInDiscAttrsExtRspCmd_0
   4429            {
   4430              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000030   12....       LCALL     ?Subroutine16 & 0xFFFF
   4431              pDiscoverRspCmd->numAttr = numAttrs;
   \                     ??CrossCallReturnLabel_8:
   \   000033   E5..         MOV       A,?V0
   \   000035   F0           MOVX      @DPTR,A
   4432          
   4433              for ( i = 0; i < numAttrs; i++ )
   \   000036   7C00         MOV       R4,#0x0
   \   000038   8043         SJMP      ??zclParseInDiscAttrsExtRspCmd_1
   4434              {
   4435                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsExtRspCmd_2:
   \   00003A   EC           MOV       A,R4
   \   00003B   F5..         MOV       ?V2,A
   \   00003D   75..00       MOV       ?V3,#0x0
   \   000040   7402         MOV       A,#0x2
   \   000042   78..         MOV       R0,#?V2
   \   000044   12....       LCALL     ?S_SHL
   \   000047   EA           MOV       A,R2
   \   000048   25..         ADD       A,?V2
   \   00004A   F8           MOV       R0,A
   \   00004B   EB           MOV       A,R3
   \   00004C   35..         ADDC      A,?V3
   \   00004E   F9           MOV       R1,A
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F5..         MOV       ?V4,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V3,A
   \   00005A   E5..         MOV       A,?V4
   \   00005C   8882         MOV       DPL,R0
   \   00005E   8983         MOV       DPH,R1
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   E5..         MOV       A,?V3
   \   000066   12....       LCALL     ?Subroutine22 & 0xFFFF
   4436                pBuf += 2;
   4437                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   4438                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   \                     ??CrossCallReturnLabel_18:
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   12....       LCALL     ?Subroutine111 & 0xFFFF
   4439              }
   \                     ??CrossCallReturnLabel_187:
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   \   000075   EE           MOV       A,R6
   \   000076   2404         ADD       A,#0x4
   \   000078   FE           MOV       R6,A
   \   000079   5001         JNC       ??zclParseInDiscAttrsExtRspCmd_3
   \   00007B   0F           INC       R7
   \                     ??zclParseInDiscAttrsExtRspCmd_3:
   \   00007C   0C           INC       R4
   \                     ??zclParseInDiscAttrsExtRspCmd_1:
   \   00007D   EC           MOV       A,R4
   \   00007E   C3           CLR       C
   \   00007F   95..         SUBB      A,?V0
   \   000081   40B7         JC        ??zclParseInDiscAttrsExtRspCmd_2
   4440            }
   4441          
   4442            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsExtRspCmd_0:
   \   000083   02....       LJMP      ?Subroutine4 & 0xFFFF
   4443          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   4444          #endif // ZCL_DISCOVER
   4445          
   4446          #ifdef ZCL_READ
   4447          /*********************************************************************
   4448           * @fn      zclProcessInReadCmd
   4449           *
   4450           * @brief   Process the "Profile" Read Command
   4451           *
   4452           * @param   pInMsg - incoming message to process
   4453           *
   4454           * @return  TRUE if command processed. FALSE, otherwise.
   4455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4456          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   4457          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine141 & 0xFFFF
   4458            zclReadCmd_t *readCmd;
   4459            zclReadRspCmd_t *readRspCmd;
   4460            zclAttrRec_t attrRec;
   4461            uint16 len;
   4462            uint8 i;
   4463            uint8 attrFound;
   4464          
   4465            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_241:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V10,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V11,A
   4466          
   4467            // calculate the length of the response status record
   4468            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4469          
   4470            readRspCmd = zcl_mem_alloc( len );
   \   000014                ; Setup parameters for call to function osal_mem_alloc
   \   000014   85..82       MOV       DPL,?V10
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   75F006       MOV       B,#0x6
   \   00001D   A4           MUL       AB
   \   00001E   A9F0         MOV       R1,B
   \   000020   2401         ADD       A,#0x1
   \   000022   FA           MOV       R2,A
   \   000023   E4           CLR       A
   \   000024   39           ADDC      A,R1
   \   000025   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   4471            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_634:
   \   000028   7005         JNZ       ??zclProcessInReadCmd_0
   4472            {
   4473              return FALSE; // EMBEDDED RETURN
   \   00002A   7900         MOV       R1,#0x0
   \   00002C   02....       LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
   4474            }
   4475          
   4476            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   00002F   85..82       MOV       DPL,?V10
   \   000032   85..83       MOV       DPH,?V11
   \   000035   12....       LCALL     ?Subroutine73 & 0xFFFF
   4477            for ( i = 0; i < readCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_124:
   \   000038   75..00       MOV       ?V2,#0x0
   \   00003B   EE           MOV       A,R6
   \   00003C   2402         ADD       A,#0x2
   \   00003E   F5..         MOV       ?V14,A
   \   000040   E4           CLR       A
   \   000041   3F           ADDC      A,R7
   \   000042   F5..         MOV       ?V15,A
   \   000044   800B         SJMP      ??zclProcessInReadCmd_2
   4478            {
   4479              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4480          
   4481              statusRec->attrID = readCmd->attrID[i];
   4482              
   4483              attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
   4484              
   4485              //Validate the attribute is found and the access control
   4486              if ( ( attrFound == TRUE ) && 
   4487                   (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
   4488                      (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
   4489              {
   4490                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4491                {
   4492                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4493                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4494                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4495                  {
   4496                    statusRec->data = attrRec.attr.dataPtr;
   4497                    statusRec->dataType = attrRec.attr.dataType;
   4498                  }
   4499                }
   4500                else
   4501                {
   4502                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4503                }
   4504              }
   4505              else
   4506              {
   4507                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   000046   85..82       MOV       DPL,?V6
   \   000049   85..83       MOV       DPH,?V7
   \   00004C   7486         MOV       A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   00004E   F0           MOVX      @DPTR,A
   4508              }
   \                     ??zclProcessInReadCmd_5:
   \   00004F   05..         INC       ?V2
   \                     ??zclProcessInReadCmd_2:
   \   000051   85..82       MOV       DPL,?V10
   \   000054   85..83       MOV       DPH,?V11
   \   000057   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   00005A   4003         JC        $+5
   \   00005C   02....       LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
   \   00005F   A8..         MOV       R0,?V2
   \   000061   E8           MOV       A,R0
   \   000062   75F006       MOV       B,#0x6
   \   000065   A4           MUL       AB
   \   000066   FA           MOV       R2,A
   \   000067   ABF0         MOV       R3,B
   \   000069   E5..         MOV       A,?V0
   \   00006B   2A           ADD       A,R2
   \   00006C   F582         MOV       DPL,A
   \   00006E   E5..         MOV       A,?V1
   \   000070   3B           ADDC      A,R3
   \   000071   F583         MOV       DPH,A
   \   000073   A3           INC       DPTR
   \   000074   8582..       MOV       ?V4,DPL
   \   000077   8583..       MOV       ?V5,DPH
   \   00007A   E8           MOV       A,R0
   \   00007B   28           ADD       A,R0
   \   00007C   F8           MOV       R0,A
   \   00007D   E4           CLR       A
   \   00007E   33           RLC       A
   \   00007F   F9           MOV       R1,A
   \   000080   E5..         MOV       A,?V10
   \   000082   28           ADD       A,R0
   \   000083   F582         MOV       DPL,A
   \   000085   E5..         MOV       A,?V11
   \   000087   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00008A   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00008D   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000090   E5..         MOV       A,?V4
   \   000092   2402         ADD       A,#0x2
   \   000094   F5..         MOV       ?V6,A
   \   000096   E4           CLR       A
   \   000097   35..         ADDC      A,?V5
   \   000099   F5..         MOV       ?V7,A
   \   00009B   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   00009E                ; Setup parameters for call to function zclFindAttrRec
   \   00009E   A8..         MOV       R0,?XSP + 0
   \   0000A0   A9..         MOV       R1,?XSP + 1
   \   0000A2   88..         MOV       ?V12,R0
   \   0000A4   89..         MOV       ?V13,R1
   \   0000A6   78..         MOV       R0,#?V12
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   8A82         MOV       DPL,R2
   \   0000AD   8B83         MOV       DPH,R3
   \   0000AF   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   0000B2   85..82       MOV       DPL,?V8
   \   0000B5   85..83       MOV       DPH,?V9
   \   0000B8   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   0000BB   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000BE   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV       A,R1
   \   0000C5   6401         XRL       A,#0x1
   \   0000C7   6003         JZ        $+5
   \   0000C9   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \   0000CC   7405         MOV       A,#0x5
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000D4   401A         JC        ??zclProcessInReadCmd_7
   \   0000D6   85..82       MOV       DPL,?V14
   \   0000D9   85..83       MOV       DPH,?V15
   \   0000DC   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000DF   7405         MOV       A,#0x5
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000E7   20F001       JB        B.0,??zclProcessInReadCmd_8
   \   0000EA   B3           CPL       C
   \                     ??zclProcessInReadCmd_8:
   \   0000EB   4003         JC        $+5
   \   0000ED   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   0000F0   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000F2   5061         JNC       ??zclProcessInReadCmd_9
   \   0000F4   8E82         MOV       DPL,R6
   \   0000F6   8F83         MOV       DPH,R7
   \   0000F8   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   0000FB   E8           MOV       A,R0
   \   0000FC   2406         ADD       A,#0x6
   \   0000FE   F5..         MOV       ?V8,A
   \   000100   E4           CLR       A
   \   000101   39           ADDC      A,R1
   \   000102   F5..         MOV       ?V9,A
   \   000104   7405         MOV       A,#0x5
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   A2E4         MOV       C,0xE0 /* A   */.4
   \   00010C   5018         JNC       ??zclProcessInReadCmd_10
   \   00010E                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00010E   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000111   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000114   6010         JZ        ??zclProcessInReadCmd_10
   \   000116                ; Setup parameters for indirect call
   \   000116   7901         MOV       R1,#0x1
   \   000118   AC..         MOV       R4,?XSP + 0
   \   00011A   AD..         MOV       R5,?XSP + 1
   \   00011C   AA..         MOV       R2,?V8
   \   00011E   AB..         MOV       R3,?V9
   \   000120   12....       LCALL     ?CALL_IND
   \   000123   E9           MOV       A,R1
   \   000124   8002         SJMP      ??zclProcessInReadCmd_11
   \                     ??zclProcessInReadCmd_10:
   \   000126   7400         MOV       A,#0x0
   \                     ??zclProcessInReadCmd_11:
   \   000128   85..82       MOV       DPL,?V6
   \   00012B   85..83       MOV       DPH,?V7
   \   00012E   F0           MOVX      @DPTR,A
   \   00012F   6003         JZ        $+5
   \   000131   02....       LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
   \   000134   7406         MOV       A,#0x6
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000143   7404         MOV       A,#0x4
   \   000145   12....       LCALL     ?XSTACK_DISP0_8
   \   000148   E0           MOVX      A,@DPTR
   \   000149   85..82       MOV       DPL,?V4
   \   00014C   85..83       MOV       DPH,?V5
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_9:
   \   000155   85..82       MOV       DPL,?V6
   \   000158   85..83       MOV       DPH,?V7
   \   00015B   748F         MOV       A,#-0x71
   \   00015D   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   4509            }
   4510          
   4511            // Build and send Read Response command
   4512            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4513                             readRspCmd, !pInMsg->hdr.fc.direction,
   4514                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   000160   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000163                ; Setup parameters for call to function zcl_SendReadRsp
   \   000163   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000166   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000169   75..01       MOV       ?V2,#0x1
   \   00016C   78..         MOV       R0,#?V2
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000171   85..82       MOV       DPL,?V14
   \   000174   85..83       MOV       DPH,?V15
   \   000177   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017D   78..         MOV       R0,#?V0
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   85..82       MOV       DPL,?V8
   \   000185   85..83       MOV       DPH,?V9
   \   000188   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   00018B   E5..         MOV       A,?V8
   \   00018D   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_687:
   \   000190   35..         ADDC      A,?V9
   \   000192   FB           MOV       R3,A
   \   000193   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000196   12....       LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
   \   000199   7405         MOV       A,#0x5
   \   00019B   12....       LCALL     ?DEALLOC_XSTACK8
   4515            zcl_mem_free( readRspCmd );
   \   00019E                ; Setup parameters for call to function osal_mem_free
   \   00019E   AA..         MOV       R2,?V0
   \   0001A0   AB..         MOV       R3,?V1
   \   0001A2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4516          
   4517            return TRUE;
   \   0001A5   7901         MOV       R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   0001A7   7408         MOV       A,#0x8
   \   0001A9   02....       LJMP      ?Subroutine5 & 0xFFFF
   4518          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E5..         MOV       A,?V8
   \   000002   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   000005   35..         ADDC      A,?V9
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   000003   A2E0         MOV       C,0xE0 /* A   */.0
   \   000005   92F0         MOV       B.0,C
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine249_0
   \   000004                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine259_0
   \   000004                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine260_0
   \   000006                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EA           MOV       A,R2
   \   000005   240C         ADD       A,#0xc
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3F           ADDC      A,R7
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine273_0:
   \   000000   2406         ADD       A,#0x6
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET
   4519          #endif // ZCL_READ
   4520          
   4521          #ifdef ZCL_WRITE
   4522          /*********************************************************************
   4523           * @fn      processInWriteCmd
   4524           *
   4525           * @brief   Process the "Profile" Write and Write No Response Commands
   4526           *
   4527           * @param   pInMsg - incoming message to process
   4528           *
   4529           * @return  TRUE if command processed. FALSE, otherwise.
   4530           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine233_0
   \   000006                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4531          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   4532          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   4533            zclWriteCmd_t *writeCmd;
   4534            zclWriteRspCmd_t *writeRspCmd;
   4535            uint8 sendRsp = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   4536            uint8 j = 0;
   \   000010   7E00         MOV       R6,#0x0
   4537            uint8 i;
   4538          
   4539            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000012   EA           MOV       A,R2
   \   000013   240C         ADD       A,#0xc
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   35..         ADDC      A,?V3
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V14,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V15,A
   4540            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6402         XRL       A,#0x2
   \   000031   7018         JNZ       ??zclProcessInWriteCmd_0
   4541            {
   4542              // We need to send a response back - allocate space for it
   4543              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4544                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   85..82       MOV       DPL,?V14
   \   000036   85..83       MOV       DPH,?V15
   \   000039   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00003C   8A..         MOV       ?V4,R2
   \   00003E   8B..         MOV       ?V5,R3
   4545              if ( writeRspCmd == NULL )
   \   000040   EA           MOV       A,R2
   \   000041   4B           ORL       A,R3
   \   000042   7005         JNZ       ??zclProcessInWriteCmd_1
   4546              {
   4547                return FALSE; // EMBEDDED RETURN
   \   000044   7900         MOV       R1,#0x0
   \   000046   02....       LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
   4548              }
   4549          
   4550              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   000049   D2..         SETB      ?VB.0
   4551            }
   4552          
   4553            for ( i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   00004B   7F00         MOV       R7,#0x0
   \   00004D   8010         SJMP      ??zclProcessInWriteCmd_3
   4554            {
   4555              zclAttrRec_t attrRec;
   4556              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4557          
   4558              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4559                                   statusRec->attrID, &attrRec ) )
   4560              {
   4561                if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
   4562                {
   4563                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4564                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4565                  break;
   4566                }
   4567                if ( statusRec->dataType == attrRec.attr.dataType )
   4568                {
   4569                  uint8 status;
   4570          
   4571                  // Write the new attribute value
   4572                  if ( attrRec.attr.dataPtr != NULL )
   4573                  {
   4574                    //Handle special case for Identify
   4575                    if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
   4576                    {
   4577                      uint16 identifyTime; 
   4578                            
   4579                      osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
   4580                                  
   4581                      bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
   4582                      
   4583                      status = ZCL_STATUS_SUCCESS;
   4584                    }          
   4585                    else
   4586                    {                
   4587                      status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4588                                                 &attrRec, statusRec );
   4589                    }
   4590                  }
   4591                  else // Use CB
   4592                  {
   4593                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4594                                                      &attrRec, statusRec->attrData );
   4595                  }
   4596          
   4597                  // If successful, a write attribute status record shall NOT be generated
   4598                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4599                  {
   4600                    // Attribute is read only - move on to the next write attribute record
   4601                    writeRspCmd->attrList[j].status = status;
   4602                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4603                  }
   4604                }
   4605                else
   4606                {
   4607                  // Attribute data type is incorrect - move on to the next write attribute record
   4608                  if ( sendRsp )
   4609                  {
   4610                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4611                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4612                  }
   4613                }
   4614              }
   4615              else
   4616              {
   4617                // Attribute is not supported - move on to the next write attribute record
   4618                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   00004F   A2..         MOV       C,?VB.0
   \   000051   500B         JNC       ??CrossCallReturnLabel_9
   4619                {
   4620                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000053   85..82       MOV       DPL,?V12
   \   000056   85..83       MOV       DPH,?V13
   \   000059   7486         MOV       A,#-0x7a
   4621                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4622                }
   4623              }
   \                     ??zclProcessInWriteCmd_5:
   \   00005B   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00005E   0F           INC       R7
   \                     ??zclProcessInWriteCmd_3:
   \   00005F   85..82       MOV       DPL,?V14
   \   000062   85..83       MOV       DPH,?V15
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F8           MOV       R0,A
   \   000067   EF           MOV       A,R7
   \   000068   C3           CLR       C
   \   000069   98           SUBB      A,R0
   \   00006A   4003         JC        $+5
   \   00006C   02....       LJMP      ??CrossCallReturnLabel_10 & 0xFFFF
   \   00006F   EF           MOV       A,R7
   \   000070   75F005       MOV       B,#0x5
   \   000073   A4           MUL       AB
   \   000074   F8           MOV       R0,A
   \   000075   A9F0         MOV       R1,B
   \   000077   E5..         MOV       A,?V14
   \   000079   28           ADD       A,R0
   \   00007A   F582         MOV       DPL,A
   \   00007C   E5..         MOV       A,?V15
   \   00007E   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000081   8582..       MOV       ?V0,DPL
   \   000084   8583..       MOV       ?V1,DPH
   \   000087   EE           MOV       A,R6
   \   000088   75F003       MOV       B,#0x3
   \   00008B   A4           MUL       AB
   \   00008C   F8           MOV       R0,A
   \   00008D   A9F0         MOV       R1,B
   \   00008F   E5..         MOV       A,?V4
   \   000091   28           ADD       A,R0
   \   000092   F582         MOV       DPL,A
   \   000094   E5..         MOV       A,?V5
   \   000096   39           ADDC      A,R1
   \   000097   F583         MOV       DPH,A
   \   000099   E582         MOV       A,DPL
   \   00009B   2402         ADD       A,#0x2
   \   00009D   F5..         MOV       ?V8,A
   \   00009F   E4           CLR       A
   \   0000A0   3583         ADDC      A,DPH
   \   0000A2   F5..         MOV       ?V9,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   8582..       MOV       ?V12,DPL
   \   0000A8   8583..       MOV       ?V13,DPH
   \   0000AB   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   0000AE                ; Setup parameters for call to function zclFindAttrRec
   \   0000AE   7402         MOV       A,#0x2
   \   0000B0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B3   88..         MOV       ?V10,R0
   \   0000B5   89..         MOV       ?V11,R1
   \   0000B7   78..         MOV       R0,#?V10
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BC   85..82       MOV       DPL,?V0
   \   0000BF   85..83       MOV       DPH,?V1
   \   0000C2   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C8   E9           MOV       A,R1
   \   0000C9   6084         JZ        ??zclProcessInWriteCmd_4
   \   0000CB   85..82       MOV       DPL,?V2
   \   0000CE   85..83       MOV       DPH,?V3
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000D6   7407         MOV       A,#0x7
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000DE   20F001       JB        B.0,??zclProcessInWriteCmd_6
   \   0000E1   B3           CPL       C
   \                     ??zclProcessInWriteCmd_6:
   \   0000E2   4069         JC        ??zclProcessInWriteCmd_7
   \   0000E4   85..82       MOV       DPL,?V12
   \   0000E7   85..83       MOV       DPH,?V13
   \   0000EA   7486         MOV       A,#-0x7a
   \   0000EC   12....       LCALL     ?Subroutine18 & 0xFFFF
   4624            } // for loop
   4625          
   4626            if ( sendRsp )
   \                     ??CrossCallReturnLabel_10:
   \   0000EF   A2..         MOV       C,?VB.0
   \   0000F1   5053         JNC       ??zclProcessInWriteCmd_8
   4627            {
   4628              writeRspCmd->numAttr = j;
   \   0000F3   EE           MOV       A,R6
   \   0000F4   85..82       MOV       DPL,?V4
   \   0000F7   85..83       MOV       DPH,?V5
   \   0000FA   F0           MOVX      @DPTR,A
   4629              if ( writeRspCmd->numAttr == 0 )
   \   0000FB   700B         JNZ       ??zclProcessInWriteCmd_9
   4630              {
   4631                // Since all records were written successful, include a single status record
   4632                // in the resonse command with the status field set to SUCCESS and the
   4633                // attribute ID field omitted.
   4634                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0000FD   A3           INC       DPTR
   \   0000FE   E4           CLR       A
   \   0000FF   F0           MOVX      @DPTR,A
   4635                writeRspCmd->numAttr = 1;
   \   000100   85..82       MOV       DPL,?V4
   \   000103   85..83       MOV       DPH,?V5
   \   000106   04           INC       A
   \   000107   F0           MOVX      @DPTR,A
   4636              }
   4637          
   4638              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4639                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4640                                true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteCmd_9:
   \   000108   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   00010B                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00010B   85..82       MOV       DPL,?V2
   \   00010E   85..83       MOV       DPH,?V3
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011D   75..01       MOV       ?V0,#0x1
   \   000120   78..         MOV       R0,#?V0
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000125   85..82       MOV       DPL,?V2
   \   000128   85..83       MOV       DPH,?V3
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000134   78..         MOV       R0,#?V4
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000139   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
   4641              zcl_mem_free( writeRspCmd );
   \   00013F                ; Setup parameters for call to function osal_mem_free
   \   00013F   AA..         MOV       R2,?V4
   \   000141   AB..         MOV       R3,?V5
   \   000143   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4642            }
   4643          
   4644            return TRUE;
   \                     ??zclProcessInWriteCmd_8:
   \   000146   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   000148   740A         MOV       A,#0xa
   \   00014A   02....       LJMP      ?Subroutine5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_7:
   \   00014D   85..82       MOV       DPL,?V0
   \   000150   85..83       MOV       DPH,?V1
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   F8           MOV       R0,A
   \   000157   7406         MOV       A,#0x6
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   68           XRL       A,R0
   \   00015E   6003         JZ        $+5
   \   000160   02....       LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
   \   000163   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000166   7408         MOV       A,#0x8
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00016E   6069         JZ        ??zclProcessInWriteCmd_11
   \   000170   85..82       MOV       DPL,?V6
   \   000173   85..83       MOV       DPH,?V7
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   6403         XRL       A,#0x3
   \   00017D   7002         JNZ       ??zclProcessInWriteCmd_12
   \   00017F   A3           INC       DPTR
   \   000180   E0           MOVX      A,@DPTR
   \                     ??zclProcessInWriteCmd_12:
   \   000181   7047         JNZ       ??zclProcessInWriteCmd_13
   \   000183   85..82       MOV       DPL,?V0
   \   000186   85..83       MOV       DPH,?V1
   \   000189   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00018C   703C         JNZ       ??zclProcessInWriteCmd_13
   \   00018E                ; Setup parameters for call to function osal_memcpy
   \   00018E   85..82       MOV       DPL,?V0
   \   000191   85..83       MOV       DPH,?V1
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   00019A   75..00       MOV       ?V10,#0x0
   \   00019D   78..         MOV       R0,#?V8
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A2   7C02         MOV       R4,#0x2
   \   0001A4   7D00         MOV       R5,#0x0
   \   0001A6   7403         MOV       A,#0x3
   \   0001A8   12....       LCALL     ?XSTACK_DISP101_8
   \   0001AB   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   0001AE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B1                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   0001B1   85..82       MOV       DPL,?V2
   \   0001B4   85..83       MOV       DPH,?V3
   \   0001B7   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0001BA   F9           MOV       R1,A
   \   0001BB   85..82       MOV       DPL,?XSP + 0
   \   0001BE   85..83       MOV       DPH,?XSP + 1
   \   0001C1   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   0001C4   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   0001C7   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \                     ??zclProcessInWriteCmd_13:
   \   0001CA                ; Setup parameters for call to function zclWriteAttrData
   \   0001CA   78..         MOV       R0,#?V0
   \   0001CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CF   7404         MOV       A,#0x4
   \   0001D1   12....       LCALL     ?XSTACK_DISP102_8
   \   0001D4   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   0001D7   801F         SJMP      ??CrossCallReturnLabel_215
   \                     ??zclProcessInWriteCmd_11:
   \   0001D9                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0001D9   85..82       MOV       DPL,?V0
   \   0001DC   85..83       MOV       DPH,?V1
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001E5   7404         MOV       A,#0x4
   \   0001E7   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EA   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_693:
   \   0001ED   35..         ADDC      A,?V7
   \   0001EF   FB           MOV       R3,A
   \   0001F0   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   0001F3   35..         ADDC      A,?V7
   \   0001F5   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0001F8   7402         MOV       A,#0x2
   \   0001FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FD   E9           MOV       A,R1
   \   0001FE   A2..         MOV       C,?VB.0
   \   000200   4003         JC        $+5
   \   000202   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   000205   7003         JNZ       $+5
   \   000207   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   00020A   85..82       MOV       DPL,?V12
   \   00020D   85..83       MOV       DPH,?V13
   \   000210   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_10:
   \   000213   A2..         MOV       C,?VB.0
   \   000215   4003         JC        $+5
   \   000217   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   00021A   85..82       MOV       DPL,?V12
   \   00021D   85..83       MOV       DPH,?V13
   \   000220   748D         MOV       A,#-0x73
   \   000222   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   4645          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   000006   85..82       MOV       DPL,?V8
   \   000009   85..83       MOV       DPH,?V9
   \   00000C   E8           MOV       A,R0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   0E           INC       R6
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E5..         MOV       A,?V6
   \   000002                REQUIRE ??Subroutine256_0
   \   000002                ; // Fall through to label ??Subroutine256_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_694:
   \   000003   35..         ADDC      A,?V7
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000009   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   E5..         MOV       A,?V6
   \   000002   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   000005                REQUIRE ??Subroutine257_0
   \   000005                ; // Fall through to label ??Subroutine257_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   35..         ADDC      A,?V7
   \   000002   F583         MOV       DPH,A
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   75F003       MOV       B,#0x3
   \   000004   A4           MUL       AB
   \   000005   A9F0         MOV       R1,B
   \   000007   2401         ADD       A,#0x1
   \   000009   FA           MOV       R2,A
   \   00000A   E4           CLR       A
   \   00000B   39           ADDC      A,R1
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000007   EE           MOV       A,R6
   \   000008   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_691:
   \   00000B   3F           ADDC      A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   EE           MOV       A,R6
   \   00000E   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   000011   3F           ADDC      A,R7
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000019   7405         MOV       A,#0x5
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   85..82       MOV       DPL,?V6
   \   000006   85..83       MOV       DPH,?V7
   \   000009   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_701:
   \   00000C   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   00000F   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000012   7402         MOV       A,#0x2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   E5..         MOV       A,?V6
   \   000002                REQUIRE ??Subroutine273_0
   \   000002                ; // Fall through to label ??Subroutine273_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine274_0
   \   000001                ; // Fall through to label ??Subroutine274_0
   4646          
   4647          /*********************************************************************
   4648           * @fn      zclRevertWriteUndividedCmd
   4649           *
   4650           * @brief   Revert the "Profile" Write Undevided Command
   4651           *
   4652           * @param   pInMsg - incoming message to process
   4653           * @param   curWriteRec - old data
   4654           * @param   numAttr - number of attributes to be reverted
   4655           *
   4656           * @return  none
   4657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4658          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   4659                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4660          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V10,R4
   \   000010   8D..         MOV       ?V11,R5
   4661            uint8 i;
   4662          
   4663            for ( i = 0; i < numAttr; i++ )
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   741C         MOV       A,#0x1c
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   00001D   8026         SJMP      ??zclRevertWriteUndividedCmd_0
   4664            {
   4665              zclAttrRec_t attrRec;
   4666              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4667          
   4668              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4669                                    statusRec->attrID, &attrRec ) )
   4670              {
   4671                break; // should never happen
   4672              }
   4673          
   4674              if ( attrRec.attr.dataPtr != NULL )
   4675              {
   4676                // Just copy the old data back - no need to validate the data
   4677                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4678                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4679              }
   4680              else // Use CB
   4681              {
   4682                // Write the old data back
   4683                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4684                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   00001F   12....       LCALL     ?Subroutine91 & 0xFFFF
   4685              }
   \                     ??CrossCallReturnLabel_562:
   \   000022                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   78..         MOV       R0,#?V4
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EE           MOV       A,R6
   \   000031   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_688:
   \   000034   3F           ADDC      A,R7
   \   000035   FB           MOV       R3,A
   \   000036   EE           MOV       A,R6
   \   000037   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   00003A   3F           ADDC      A,R7
   \   00003B   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00003E   7402         MOV       A,#0x2
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclRevertWriteUndividedCmd_2:
   \   000043   05..         INC       ?V0
   \                     ??zclRevertWriteUndividedCmd_0:
   \   000045   C3           CLR       C
   \   000046   E5..         MOV       A,?V0
   \   000048   95..         SUBB      A,?V8
   \   00004A   E4           CLR       A
   \   00004B   95..         SUBB      A,?V9
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??zclRevertWriteUndividedCmd_3 & 0xFFFF
   \   000052   E5..         MOV       A,?V0
   \   000054   75F005       MOV       B,#0x5
   \   000057   A4           MUL       AB
   \   000058   F8           MOV       R0,A
   \   000059   A9F0         MOV       R1,B
   \   00005B   E5..         MOV       A,?V10
   \   00005D   28           ADD       A,R0
   \   00005E   FE           MOV       R6,A
   \   00005F   E5..         MOV       A,?V11
   \   000061   39           ADDC      A,R1
   \   000062   FF           MOV       R7,A
   \   000063   85..82       MOV       DPL,?V2
   \   000066   85..83       MOV       DPH,?V3
   \   000069   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00006C                ; Setup parameters for call to function zclFindAttrRec
   \   00006C   A8..         MOV       R0,?XSP + 0
   \   00006E   A9..         MOV       R1,?XSP + 1
   \   000070   88..         MOV       ?V6,R0
   \   000072   89..         MOV       ?V7,R1
   \   000074   78..         MOV       R0,#?V6
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000080   85..82       MOV       DPL,?V4
   \   000083   85..83       MOV       DPH,?V5
   \   000086   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000089   E5..         MOV       A,?V4
   \   00008B   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   00008E   35..         ADDC      A,?V5
   \   000090   F583         MOV       DPH,A
   \   000092   E0           MOVX      A,@DPTR
   \   000093   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   \   000099   E9           MOV       A,R1
   \   00009A   6049         JZ        ??zclRevertWriteUndividedCmd_3
   \   00009C   EE           MOV       A,R6
   \   00009D   2403         ADD       A,#0x3
   \   00009F   F5..         MOV       ?V4,A
   \   0000A1   E4           CLR       A
   \   0000A2   3F           ADDC      A,R7
   \   0000A3   F5..         MOV       ?V5,A
   \   0000A5   85..82       MOV       DPL,?V4
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   0000AD   7406         MOV       A,#0x6
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   0000B5   EE           MOV       A,R6
   \   0000B6   4F           ORL       A,R7
   \   0000B7   7003         JNZ       $+5
   \   0000B9   02....       LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
   \   0000BC                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000BC   7404         MOV       A,#0x4
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0000C4   8A..         MOV       ?V6,R2
   \   0000C6   8B..         MOV       ?V7,R3
   \   0000C8   AC..         MOV       R4,?V6
   \   0000CA   AD..         MOV       R5,?V7
   \   0000CC                ; Setup parameters for call to function osal_memcpy
   \   0000CC   85..82       MOV       DPL,?V4
   \   0000CF   85..83       MOV       DPH,?V5
   \   0000D2   12....       LCALL     ?Subroutine67 & 0xFFFF
   4686            } // for loop
   \                     ??CrossCallReturnLabel_109:
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E2   02....       LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   4687          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   0000E5   7408         MOV       A,#0x8
   \   0000E7   80..         SJMP      ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine254_0
   \   000003                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000003   88..         MOV       ?V4,R0
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET
   4688          
   4689          /*********************************************************************
   4690           * @fn      zclProcessInWriteUndividedCmd
   4691           *
   4692           * @brief   Process the "Profile" Write Undivided Command
   4693           *
   4694           * @param   pInMsg - incoming message to process
   4695           *
   4696           * @return  TRUE if command processed. FALSE, otherwise.
   4697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4698          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   4699          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   4700            zclWriteCmd_t *writeCmd;
   4701            zclWriteRspCmd_t *writeRspCmd;
   4702            zclAttrRec_t attrRec;
   4703            uint16 dataLen;
   4704            uint16 curLen = 0;
   \   00000E   75..00       MOV       ?V8,#0x0
   \   000011   75..00       MOV       ?V9,#0x0
   4705            uint8 j = 0;
   \   000014   7E00         MOV       R6,#0x0
   4706            uint8 i;
   4707          
   4708            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000016   EA           MOV       A,R2
   \   000017   240C         ADD       A,#0xc
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   35..         ADDC      A,?V5
   \   00001E   F583         MOV       DPH,A
   \   000020   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   4709          
   4710            // Allocate space for Write Response Command
   4711            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4712                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \                     ??CrossCallReturnLabel_533:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000033   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000036   8A..         MOV       ?V0,R2
   \   000038   8B..         MOV       ?V1,R3
   4713            if ( writeRspCmd == NULL )
   \   00003A   EA           MOV       A,R2
   \   00003B   4B           ORL       A,R3
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
   4714            {
   4715              return FALSE; // EMBEDDED RETURN
   4716            }
   4717          
   4718            // If any attribute cannot be written, no attribute values are changed. Hence,
   4719            // make sure all the attributes are supported and writable
   4720            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000041   7F00         MOV       R7,#0x0
   \   000043   803C         SJMP      ??zclProcessInWriteUndividedCmd_1
   4721            {
   4722              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4723          
   4724              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4725                                    statusRec->attrID, &attrRec ) )
   4726              {
   4727                // Attribute is not supported - stop here
   4728                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4729                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4730                break;
   4731              }
   4732          
   4733              if ( statusRec->dataType != attrRec.attr.dataType )
   4734              {
   4735                // Attribute data type is incorrect - stope here
   4736                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4737                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4738                break;
   4739              }
   4740          
   4741              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4742              {
   4743                // Attribute is not writable - stop here
   4744                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4745                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4746                break;
   4747              }
   4748          
   4749              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4750              {
   4751                // Not authorized to write - stop here
   4752                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4753                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4754                break;
   4755              }
   4756          
   4757              // Attribute Data length
   4758              if ( attrRec.attr.dataPtr != NULL )
   4759              {
   4760                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4761              }
   4762              else // Use CB
   4763              {
   4764                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4765                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000045   12....       LCALL     ?Subroutine69 & 0xFFFF
   4766              }
   \                     ??CrossCallReturnLabel_571:
   \   000048   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   00004B   8882         MOV       DPL,R0
   \   00004D   8983         MOV       DPH,R1
   \   00004F   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000052   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000055   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   4767          
   4768              // add padding if needed
   4769              if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_618:
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   E0           MOVX      A,@DPTR
   \   000068   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006A   5003         JNC       ??CrossCallReturnLabel_264
   4770              {
   4771                dataLen++;
   \   00006C   12....       LCALL     ?Subroutine157 & 0xFFFF
   4772              }
   4773          
   4774              curLen += dataLen;
   \                     ??CrossCallReturnLabel_264:
   \   00006F   85..82       MOV       DPL,?XSP + 0
   \   000072   85..83       MOV       DPH,?XSP + 1
   \   000075   E0           MOVX      A,@DPTR
   \   000076   25..         ADD       A,?V8
   \   000078   F5..         MOV       ?V8,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   35..         ADDC      A,?V9
   \   00007E   F5..         MOV       ?V9,A
   \   000080   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   000081   7402         MOV       A,#0x2
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000089   5042         JNC       ??zclProcessInWriteUndividedCmd_4
   \   00008B   EF           MOV       A,R7
   \   00008C   75F005       MOV       B,#0x5
   \   00008F   A4           MUL       AB
   \   000090   F8           MOV       R0,A
   \   000091   A9F0         MOV       R1,B
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00009B   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00009E   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A1   88..         MOV       ?V10,R0
   \   0000A3   89..         MOV       ?V11,R1
   \   0000A5   78..         MOV       R0,#?V10
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV       A,R1
   \   0000B1   704A         JNZ       ??zclProcessInWriteUndividedCmd_5
   \   0000B3   85..82       MOV       DPL,?V0
   \   0000B6   85..83       MOV       DPH,?V1
   \   0000B9   A3           INC       DPTR
   \   0000BA   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   0000C0   85..82       MOV       DPL,?V0
   \   0000C3   85..83       MOV       DPH,?V1
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   0000CB   7E01         MOV       R6,#0x1
   4775            } // for loop
   4776          
   4777            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   0000CD   EE           MOV       A,R6
   \   0000CE   85..82       MOV       DPL,?V0
   \   0000D1   85..83       MOV       DPH,?V1
   \   0000D4   F0           MOVX      @DPTR,A
   4778            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000D5   6003         JZ        $+5
   \   0000D7   02....       LJMP      ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
   4779            {
   4780              uint8 *curDataPtr;
   4781              zclWriteRec_t *curWriteRec;
   4782          
   4783              // calculate the length of the current data header
   4784              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   0000DA   75F005       MOV       B,#0x5
   \   0000DD   A4           MUL       AB
   \   0000DE   FF           MOV       R7,A
   4785          
   4786              // Allocate space to keep a copy of the current data
   4787              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   \   0000DF                ; Setup parameters for call to function osal_mem_alloc
   \   0000DF   25..         ADD       A,?V8
   \   0000E1   FA           MOV       R2,A
   \   0000E2   E4           CLR       A
   \   0000E3   35..         ADDC      A,?V9
   \   0000E5   FB           MOV       R3,A
   \   0000E6   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E9   8A..         MOV       ?V14,R2
   \   0000EB   8B..         MOV       ?V15,R3
   4788              if ( curWriteRec == NULL )
   \   0000ED   EA           MOV       A,R2
   \   0000EE   4B           ORL       A,R3
   \   0000EF   7062         JNZ       ??zclProcessInWriteUndividedCmd_8
   4789              {
   4790                zcl_mem_free(writeRspCmd );
   \   0000F1                ; Setup parameters for call to function osal_mem_free
   \   0000F1   AA..         MOV       R2,?V0
   \   0000F3   AB..         MOV       R3,?V1
   \   0000F5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4791                return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   0000F8   7900         MOV       R1,#0x0
   \   0000FA   02....       LJMP      ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
   4792              }
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   0000FD   7408         MOV       A,#0x8
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F9           MOV       R1,A
   \   000104   85..82       MOV       DPL,?V2
   \   000107   85..83       MOV       DPH,?V3
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   69           XRL       A,R1
   \   00010E   600B         JZ        ??zclProcessInWriteUndividedCmd_10
   \   000110   85..82       MOV       DPL,?V0
   \   000113   85..83       MOV       DPH,?V1
   \   000116   A3           INC       DPTR
   \   000117   748D         MOV       A,#-0x73
   \   000119   80A1         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   00011B   7409         MOV       A,#0x9
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   E0           MOVX      A,@DPTR
   \   000121   A2E1         MOV       C,0xE0 /* A   */.1
   \   000123   400B         JC        ??zclProcessInWriteUndividedCmd_11
   \   000125   85..82       MOV       DPL,?V0
   \   000128   85..83       MOV       DPH,?V1
   \   00012B   A3           INC       DPTR
   \   00012C   7488         MOV       A,#-0x78
   \   00012E   808C         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000130   A2E5         MOV       C,0xE0 /* A   */.5
   \   000132   500C         JNC       ??zclProcessInWriteUndividedCmd_12
   \   000134   85..82       MOV       DPL,?V0
   \   000137   85..83       MOV       DPH,?V1
   \   00013A   A3           INC       DPTR
   \   00013B   747E         MOV       A,#0x7e
   \   00013D   02....       LJMP      ??zclProcessInWriteUndividedCmd_6 & 0xFFFF
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   000140   740A         MOV       A,#0xa
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000148   7003         JNZ       $+5
   \   00014A   02....       LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   \   00014D                ; Setup parameters for call to function zclGetAttrDataLength
   \   00014D   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000150   02....       LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   4793          
   4794              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000153   EA           MOV       A,R2
   \   000154   2F           ADD       A,R7
   \   000155   F5..         MOV       ?V8,A
   \   000157   E4           CLR       A
   \   000158   3B           ADDC      A,R3
   \   000159   F5..         MOV       ?V9,A
   4795          
   4796              // Write the new data over
   4797              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   00015B   7F00         MOV       R7,#0x0
   \   00015D   8022         SJMP      ??zclProcessInWriteUndividedCmd_13
   4798              {
   4799                uint8 status;
   4800                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4801                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4802          
   4803                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4804                                      statusRec->attrID, &attrRec ) )
   4805                {
   4806                  break; // should never happen
   4807                }
   4808          
   4809                // Keep a copy of the current data before before writing the new data over
   4810                curStatusRec->attrID = statusRec->attrID;
   4811                curStatusRec->attrData = curDataPtr;
   4812          
   4813                if ( attrRec.attr.dataPtr != NULL )
   4814                {
   4815                  // Read the current value
   4816                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4817          
   4818                  // Write the new attribute value
   4819                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4820                                             &attrRec, statusRec );
   4821                }
   4822                else // Use CBs
   4823                {
   4824                  // Read the current value
   4825                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4826                                          statusRec->attrID, curDataPtr, &dataLen );
   4827                  // Write the new attribute value
   4828                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4829                                                    &attrRec, statusRec->attrData );
   4830                }
   4831          
   4832                // If successful, a write attribute status record shall NOT be generated
   4833                if ( status != ZCL_STATUS_SUCCESS )
   4834                {
   4835                  writeRspCmd->attrList[j].status = status;
   4836                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4837          
   4838                  // Since this write failed, we need to revert all the pervious writes
   4839                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4840                  break;
   4841                }
   4842          
   4843                // add padding if needed
   4844                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   00015F   85..82       MOV       DPL,?XSP + 0
   \   000162   85..83       MOV       DPH,?XSP + 1
   \   000165   E0           MOVX      A,@DPTR
   \   000166   A2E0         MOV       C,0xE0 /* A   */.0
   \   000168   5003         JNC       ??CrossCallReturnLabel_265
   4845                {
   4846                  dataLen++;
   \   00016A   12....       LCALL     ?Subroutine157 & 0xFFFF
   4847                }
   4848          
   4849                curDataPtr += dataLen;
   \                     ??CrossCallReturnLabel_265:
   \   00016D   85..82       MOV       DPL,?XSP + 0
   \   000170   85..83       MOV       DPH,?XSP + 1
   \   000173   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000176   E5..         MOV       A,?V8
   \   000178   28           ADD       A,R0
   \   000179   F5..         MOV       ?V8,A
   \   00017B   E5..         MOV       A,?V9
   \   00017D   39           ADDC      A,R1
   \   00017E   F5..         MOV       ?V9,A
   \   000180   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   000181   7402         MOV       A,#0x2
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000189   4003         JC        $+5
   \   00018B   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   00018E   EF           MOV       A,R7
   \   00018F   75F005       MOV       B,#0x5
   \   000192   A4           MUL       AB
   \   000193   F8           MOV       R0,A
   \   000194   A9F0         MOV       R1,B
   \   000196   7402         MOV       A,#0x2
   \   000198   12....       LCALL     ?XSTACK_DISP0_8
   \   00019B   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00019E   E5..         MOV       A,?V14
   \   0001A0   28           ADD       A,R0
   \   0001A1   F5..         MOV       ?V12,A
   \   0001A3   E5..         MOV       A,?V15
   \   0001A5   39           ADDC      A,R1
   \   0001A6   F5..         MOV       ?V13,A
   \   0001A8   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0001AB   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AE   88..         MOV       ?V10,R0
   \   0001B0   89..         MOV       ?V11,R1
   \   0001B2   78..         MOV       R0,#?V10
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B7   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   0001BA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BD   E9           MOV       A,R1
   \   0001BE   7003         JNZ       $+5
   \   0001C0   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   0001C3   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   0001C6   85..82       MOV       DPL,?V12
   \   0001C9   85..83       MOV       DPH,?V13
   \   0001CC   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   0001CF   85..82       MOV       DPL,?V12
   \   0001D2   85..83       MOV       DPH,?V13
   \   0001D5   A3           INC       DPTR
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   E5..         MOV       A,?V8
   \   0001DA   F0           MOVX      @DPTR,A
   \   0001DB   A3           INC       DPTR
   \   0001DC   E5..         MOV       A,?V9
   \   0001DE   F0           MOVX      @DPTR,A
   \   0001DF   740A         MOV       A,#0xa
   \   0001E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E4   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   0001E7   6036         JZ        ??zclProcessInWriteUndividedCmd_16
   \   0001E9                ; Setup parameters for call to function zclReadAttrData
   \   0001E9   A8..         MOV       R0,?XSP + 0
   \   0001EB   A9..         MOV       R1,?XSP + 1
   \   0001ED   88..         MOV       ?V6,R0
   \   0001EF   89..         MOV       ?V7,R1
   \   0001F1   78..         MOV       R0,#?V6
   \   0001F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F6   7406         MOV       A,#0x6
   \   0001F8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001FB   AA..         MOV       R2,?V8
   \   0001FD   AB..         MOV       R3,?V9
   \   0001FF   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000202   7402         MOV       A,#0x2
   \   000204   12....       LCALL     ?DEALLOC_XSTACK8
   \   000207   85..82       MOV       DPL,?V4
   \   00020A   85..83       MOV       DPH,?V5
   \   00020D   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000210                ; Setup parameters for call to function zclWriteAttrData
   \   000210   78..         MOV       R0,#?V2
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000215   7406         MOV       A,#0x6
   \   000217   12....       LCALL     ?XSTACK_DISP102_8
   \   00021A   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00021D   8057         SJMP      ??CrossCallReturnLabel_217
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   00021F   85..82       MOV       DPL,?V4
   \   000222   85..83       MOV       DPH,?V5
   \   000225   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000228                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000228   A8..         MOV       R0,?XSP + 0
   \   00022A   A9..         MOV       R1,?XSP + 1
   \   00022C   88..         MOV       ?V10,R0
   \   00022E   89..         MOV       ?V11,R1
   \   000230   78..         MOV       R0,#?V10
   \   000232   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000235   78..         MOV       R0,#?V8
   \   000237   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00023A   85..82       MOV       DPL,?V2
   \   00023D   85..83       MOV       DPH,?V3
   \   000240   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000243   85..82       MOV       DPL,?V6
   \   000246   85..83       MOV       DPH,?V7
   \   000249   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   00024C   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   00024F   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000252   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000255   7404         MOV       A,#0x4
   \   000257   12....       LCALL     ?DEALLOC_XSTACK8
   \   00025A   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   00025D   A3           INC       DPTR
   \   00025E   A3           INC       DPTR
   \   00025F   A3           INC       DPTR
   \   000260   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000263   7406         MOV       A,#0x6
   \   000265   12....       LCALL     ?XSTACK_DISP102_8
   \   000268   E8           MOV       A,R0
   \   000269   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_689:
   \   00026C   39           ADDC      A,R1
   \   00026D   FB           MOV       R3,A
   \   00026E   E8           MOV       A,R0
   \   00026F   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000272   39           ADDC      A,R1
   \   000273   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000276   7402         MOV       A,#0x2
   \   000278   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027B   E9           MOV       A,R1
   \   00027C   FA           MOV       R2,A
   \   00027D   EA           MOV       A,R2
   \   00027E   7003         JNZ       $+5
   \   000280   02....       LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
   \   000283   EE           MOV       A,R6
   \   000284   75F003       MOV       B,#0x3
   \   000287   A4           MUL       AB
   \   000288   F8           MOV       R0,A
   \   000289   A9F0         MOV       R1,B
   \   00028B   E5..         MOV       A,?V0
   \   00028D   28           ADD       A,R0
   \   00028E   F8           MOV       R0,A
   \   00028F   E5..         MOV       A,?V1
   \   000291   39           ADDC      A,R1
   \   000292   F9           MOV       R1,A
   \   000293   EA           MOV       A,R2
   \   000294   8882         MOV       DPL,R0
   \   000296   8983         MOV       DPH,R1
   \   000298   A3           INC       DPTR
   \   000299   F0           MOVX      @DPTR,A
   \   00029A   85..82       MOV       DPL,?V2
   \   00029D   85..83       MOV       DPH,?V3
   \   0002A0   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   0002A3   0E           INC       R6
   \   0002A4                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   0002A4   EF           MOV       A,R7
   \   0002A5   F5..         MOV       ?V2,A
   \   0002A7   75..00       MOV       ?V3,#0x0
   \   0002AA   78..         MOV       R0,#?V2
   \   0002AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002AF   AC..         MOV       R4,?V14
   \   0002B1   AD..         MOV       R5,?V15
   \   0002B3   AA..         MOV       R2,?V4
   \   0002B5   AB..         MOV       R3,?V5
   \   0002B7   12....       LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
   \   0002BA   7402         MOV       A,#0x2
   \   0002BC   12....       LCALL     ?DEALLOC_XSTACK8
   4850              } // for loop
   4851          
   4852              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0002BF   EE           MOV       A,R6
   \   0002C0   85..82       MOV       DPL,?V0
   \   0002C3   85..83       MOV       DPH,?V1
   \   0002C6   F0           MOVX      @DPTR,A
   4853              if ( writeRspCmd->numAttr  == 0 )
   \   0002C7   7007         JNZ       ??zclProcessInWriteUndividedCmd_17
   4854              {
   4855                // Since all records were written successful, include a single status record
   4856                // in the resonse command with the status field set to SUCCESS and the
   4857                // attribute ID field omitted.
   4858                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0002C9   A3           INC       DPTR
   \   0002CA   E4           CLR       A
   \   0002CB   12....       LCALL     ?Subroutine35 & 0xFFFF
   4859                writeRspCmd->numAttr = 1;
   4860              }
   \                     ??CrossCallReturnLabel_40:
   \   0002CE   04           INC       A
   \   0002CF   F0           MOVX      @DPTR,A
   4861          
   4862              zcl_mem_free( curWriteRec );
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   0002D0                ; Setup parameters for call to function osal_mem_free
   \   0002D0   AA..         MOV       R2,?V14
   \   0002D2   AB..         MOV       R3,?V15
   \   0002D4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4863            }
   4864          
   4865            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4866                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4867                              true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0002D7   85..82       MOV       DPL,?V4
   \   0002DA   85..83       MOV       DPH,?V5
   \   0002DD   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   0002E0                ; Setup parameters for call to function zcl_SendWriteRsp
   \   0002E0   85..82       MOV       DPL,?V4
   \   0002E3   85..83       MOV       DPH,?V5
   \   0002E6   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   0002E9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002EC   75..01       MOV       ?V2,#0x1
   \   0002EF   78..         MOV       R0,#?V2
   \   0002F1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002F4   85..82       MOV       DPL,?V4
   \   0002F7   85..83       MOV       DPH,?V5
   \   0002FA   A3           INC       DPTR
   \   0002FB   A3           INC       DPTR
   \   0002FC   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0002FF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000302   78..         MOV       R0,#?V0
   \   000304   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000307   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00030A   12....       LCALL     ?DEALLOC_XSTACK8
   4868            zcl_mem_free( writeRspCmd );
   \   00030D                ; Setup parameters for call to function osal_mem_free
   \   00030D   AA..         MOV       R2,?V0
   \   00030F   AB..         MOV       R3,?V1
   \   000311   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4869          
   4870            return TRUE;
   \   000314   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   000316   740C         MOV       A,#0xc
   \   000318                REQUIRE ?Subroutine5
   \   000318                ; // Fall through to label ?Subroutine5
   4871          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   2401         ADD       A,#0x1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V7,A
   \   00000D                ; Setup parameters for call to function zclFindAttrRec
   \   00000D                ; Setup parameters for call to function zclFindAttrRec
   \   00000D   7404         MOV       A,#0x4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   EF           MOV       A,R7
   \   000006   C3           CLR       C
   \   000007   98           SUBB      A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   8582..       MOV       ?V2,DPL
   \   00000E   8583..       MOV       ?V3,DPH
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine258_0
   \   000006                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine261_0
   \   000006                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003                REQUIRE ??Subroutine263_0
   \   000003                ; // Fall through to label ??Subroutine263_0
   4872          #endif // ZCL_WRITE
   4873          
   4874          #ifdef ZCL_DISCOVER
   4875          /*********************************************************************
   4876           * @fn      zclProcessInDiscAttrs
   4877           *
   4878           * @brief   Process the "Profile" Discover Attributes Commands
   4879           *
   4880           * @param   pInMsg - incoming message to process
   4881           *
   4882           * @return  TRUE if command processed. FALSE, otherwise.
   4883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4884          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscAttrs:
   4885          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine141 & 0xFFFF
   4886            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4887            zclAttrRec_t attrRec;
   4888            uint16 attrID;
   4889            uint8 numAttrs;
   4890            uint8 i;
   4891          
   4892            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_242:
   \   00000D   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000010   F5..         MOV       ?V1,A
   4893          
   4894            // Find out the number of attributes supported within the specified range
   4895            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   85..82       MOV       DPL,?V0
   \   000018   F583         MOV       DPH,A
   \   00001A   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   E8           MOV       A,R0
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E9           MOV       A,R1
   \   000027   8010         SJMP      ??zclProcessInDiscAttrs_0
   \                     ??zclProcessInDiscAttrs_1:
   \   000029   05..         INC       ?V2
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   E0           MOVX      A,@DPTR
   \   000032   2401         ADD       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrs_0:
   \   000039   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000041   5032         JNC       ??zclProcessInDiscAttrs_2
   4896            {
   4897              // finds the next attribute on this endpoint/cluster after the range.
   4898              // attributes must be in numerical order in the list.
   4899              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   12....       LCALL     ?Subroutine126 & 0xFFFF
   4900              {
   4901                break;
   4902              }
   4903            }
   \                     ??CrossCallReturnLabel_219:
   \   00004A                ; Setup parameters for call to function zclFindNextAttrRec
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP100_8
   \   00004F   88..         MOV       ?V6,R0
   \   000051   89..         MOV       ?V7,R1
   \   000053   78..         MOV       R0,#?V6
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP100_8
   \   00005D   88..         MOV       ?V6,R0
   \   00005F   89..         MOV       ?V7,R1
   \   000061   78..         MOV       R0,#?V6
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
   \   000073   70B4         JNZ       ??zclProcessInDiscAttrs_1
   4904          
   4905            numAttrs = i;  // store range of attributes in buffer
   4906          
   4907              // Process message for either attributes or extended attributes
   4908            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   \                     ??zclProcessInDiscAttrs_2:
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F8           MOV       R0,A
   \   000082   740C         MOV       A,#0xc
   \   000084   68           XRL       A,R0
   \   000085   700F         JNZ       ??zclProcessInDiscAttrs_3
   4909            {
   4910              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   000087                ; Setup parameters for call to function zclProcessInDiscAttrsCmd
   \   000087   A9..         MOV       R1,?V2
   \   000089   AC..         MOV       R4,?V0
   \   00008B   AD..         MOV       R5,?V1
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??zclProcessInDiscAttrsCmd::?relay`; Banked call to: zclProcessInDiscAttrsCmd
   \   000094   8012         SJMP      ??zclProcessInDiscAttrs_4
   4911            }
   4912            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   \                     ??zclProcessInDiscAttrs_3:
   \   000096   7415         MOV       A,#0x15
   \   000098   68           XRL       A,R0
   \   000099   700D         JNZ       ??zclProcessInDiscAttrs_4
   4913            {
   4914              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   00009B                ; Setup parameters for call to function zclProcessInDiscAttrsExtCmd
   \   00009B   A9..         MOV       R1,?V2
   \   00009D   AC..         MOV       R4,?V0
   \   00009F   AD..         MOV       R5,?V1
   \   0000A1   EE           MOV       A,R6
   \   0000A2   FA           MOV       R2,A
   \   0000A3   EF           MOV       A,R7
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??zclProcessInDiscAttrsExtCmd::?relay`; Banked call to: zclProcessInDiscAttrsExtCmd
   4915            }
   4916          
   4917            return TRUE;
   \                     ??zclProcessInDiscAttrs_4:
   \   0000A8   7901         MOV       R1,#0x1
   \   0000AA   740A         MOV       A,#0xa
   \   0000AC   02....       LJMP      ?Subroutine8 & 0xFFFF
   4918          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   000003   FC           MOV       R4,A
   \   000004   85..82       MOV       DPL,?V4
   \   000007   85..83       MOV       DPH,?V5
   \   00000A   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_702:
   \   00000D   E5..         MOV       A,?V4
   \   00000F   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   000012   35..         ADDC      A,?V5
   \   000014   F583         MOV       DPH,A
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00001B   7404         MOV       A,#0x4
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   000003   5401         ANL       A,#0x1
   \   000005   22           RET
   4919          
   4920          /*********************************************************************
   4921           * @fn      zclProcessInDiscAttrsCmd
   4922           *
   4923           * @brief   Process the Discover Attributes Command
   4924           *
   4925           * @param   pInMsg - incoming message to process
   4926           *
   4927           * @param   pDiscoverCmd - structure from requesting command
   4928           *
   4929           * @param   attrLenBuf - describes the amount of attributes to be processed
   4930           *
   4931           * @return  none
   4932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   75..00       MOV       ?V2,#0x0
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012                REQUIRE ??Subroutine247_0
   \   000012                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine253_0
   \   000002                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4933          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsCmd:
   4934          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
   4935            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4936            uint8 discComplete = TRUE;
   \   000014   7F01         MOV       R7,#0x1
   4937            zclAttrRec_t attrRec;
   4938            uint16 attrID;
   4939            uint8 i;
   4940          
   4941            // Allocate space for the response command
   4942            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4943                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_682:
   \   000019   39           ADDC      A,R1
   \   00001A   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   4944            if ( pDiscoverRsp == NULL )
   \                     ??CrossCallReturnLabel_635:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclProcessInDiscAttrsCmd_0 & 0xFFFF
   4945            {
   4946              return; // EMBEDDED RETURN
   4947            }
   4948          
   4949            if ( numAttrs != 0 )
   \   000022   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000025   6077         JZ        ??zclProcessInDiscAttrsCmd_1
   4950            {
   4951              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000027   12....       LCALL     ?Subroutine34 & 0xFFFF
   4952              {
   4953                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_536:
   \   00002A   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00002D   12....       LCALL     ?XSTACK_DISP100_8
   \   000030   88..         MOV       ?V10,R0
   \   000032   89..         MOV       ?V11,R1
   \   000034   78..         MOV       R0,#?V10
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?XSTACK_DISP100_8
   \   00003E   88..         MOV       ?V10,R0
   \   000040   89..         MOV       ?V11,R1
   \   000042   78..         MOV       R0,#?V10
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   E9           MOV       A,R1
   \   00004E   6026         JZ        ??zclProcessInDiscAttrsCmd_2
   4954                {
   4955                  break; // should not happen, as numAttrs already calculated
   4956                }
   4957          
   4958                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   \   000050   E5..         MOV       A,?V2
   \   000052   75F003       MOV       B,#0x3
   \   000055   A4           MUL       AB
   \   000056   F8           MOV       R0,A
   \   000057   A9F0         MOV       R1,B
   \   000059   E5..         MOV       A,?V0
   \   00005B   28           ADD       A,R0
   \   00005C   F8           MOV       R0,A
   \   00005D   E5..         MOV       A,?V1
   \   00005F   39           ADDC      A,R1
   \   000060   F9           MOV       R1,A
   \   000061   7404         MOV       A,#0x4
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine41 & 0xFFFF
   4959                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_622:
   \   000069   7406         MOV       A,#0x6
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   4960              }
   \                     ??CrossCallReturnLabel_645:
   \   000071   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000074   40B4         JC        ??CrossCallReturnLabel_536
   4961          
   4962              // Are there more attributes to be discovered?
   4963              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsCmd_2:
   \   000076   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000079   12....       LCALL     ?XSTACK_DISP100_8
   \   00007C   88..         MOV       ?V4,R0
   \   00007E   89..         MOV       ?V5,R1
   \   000080   78..         MOV       R0,#?V4
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   7402         MOV       A,#0x2
   \   000087   12....       LCALL     ?XSTACK_DISP100_8
   \   00008A   88..         MOV       ?V4,R0
   \   00008C   89..         MOV       ?V5,R1
   \   00008E   78..         MOV       R0,#?V4
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   \   000099   E9           MOV       A,R1
   \   00009A   6002         JZ        ??zclProcessInDiscAttrsCmd_1
   4964              {
   4965                discComplete = FALSE;
   \   00009C   7F00         MOV       R7,#0x0
   4966              }
   4967            }
   4968          
   4969            pDiscoverRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsCmd_1:
   \   00009E   12....       LCALL     ?Subroutine14 & 0xFFFF
   4970            pDiscoverRsp->numAttr = numAttrs;
   4971          
   4972            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4973                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4974                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_2:
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A4   75..01       MOV       ?V4,#0x1
   \   0000A7   78..         MOV       R0,#?V4
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AC   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B2   78..         MOV       R0,#?V0
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000BA   12....       LCALL     `??zcl_SendDiscoverAttrsRspCmd::?relay`; Banked call to: zcl_SendDiscoverAttrsRspCmd
   \   0000BD   7405         MOV       A,#0x5
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
   4975            zcl_mem_free( pDiscoverRsp );
   \   0000C2                ; Setup parameters for call to function osal_mem_free
   \   0000C2   AA..         MOV       R2,?V0
   \   0000C4   AB..         MOV       R3,?V1
   \   0000C6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4976          
   4977            return;
   \                     ??zclProcessInDiscAttrsCmd_0:
   \   0000C9   02....       LJMP      ?Subroutine6 & 0xFFFF
   4978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine269_0
   \   000006                ; // Fall through to label ??Subroutine269_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine270_0
   \   000006                ; // Fall through to label ??Subroutine270_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   E5..         MOV       A,?V6
   \   000002   2402         ADD       A,#0x2
   \   000004   F5..         MOV       ?V8,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F5..         MOV       ?V9,A
   \   00000B   EE           MOV       A,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_686:
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006                REQUIRE ??Subroutine272_0
   \   000006                ; // Fall through to label ??Subroutine272_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009   7402         MOV       A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000009   E5..         MOV       A,?V2
   \   00000B   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_692:
   \   00000E   35..         ADDC      A,?V3
   \   000010   FB           MOV       R3,A
   \   000011   E5..         MOV       A,?V2
   \   000013   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   000016   35..         ADDC      A,?V3
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   000009   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00000C   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00000F   7404         MOV       A,#0x4
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   05..         INC       ?V2
   \   000007   85..82       MOV       DPL,?XSP + 0
   \   00000A   85..83       MOV       DPH,?XSP + 1
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   2F           ADD       A,R7
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   3400         ADDC      A,#0x0
   \   000014   F0           MOVX      @DPTR,A
   \   000015   E5..         MOV       A,?V2
   \   000017   C3           CLR       C
   \   000018   9E           SUBB      A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EF           MOV       A,R7
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   EE           MOV       A,R6
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_685:
   \   00000E                ; Setup parameters for call to function zcl_SendDiscoverAttrsRspCmd
   \   00000E                ; Setup parameters for call to function zcl_SendDiscoverAttrsExtRsp
   \   00000E   85..82       MOV       DPL,?V6
   \   000011   85..83       MOV       DPH,?V7
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   78..         MOV       R0,#?V4
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   FC           MOV       R4,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FB           MOV       R3,A
   \   000010   E5..         MOV       A,?V2
   \   000012   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   000015   35..         ADDC      A,?V3
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   22           RET
   4979          
   4980          /*********************************************************************
   4981           * @fn      zclProcessInDiscAttrsExtCmd
   4982           *
   4983           * @brief   Process the Discover Attributes Extended Command
   4984           *
   4985           * @param   pInMsg - incoming message to process
   4986           *
   4987           * @param   pDiscoverCmd - structure from requesting command
   4988           *
   4989           * @param   attrLenBuf - describes the amount of attributes to be processed
   4990           *
   4991           * @return  none
   4992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4993          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsExtCmd:
   4994          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
   4995            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4996            uint8 discComplete = TRUE;
   \   000014   7F01         MOV       R7,#0x1
   4997            zclAttrRec_t attrRec;
   4998            uint16 attrID;
   4999            uint8 i;
   5000          
   5001              // Allocate space for the response command
   5002            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   5003                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   F5..         MOV       ?V0,A
   \   000018   75..00       MOV       ?V1,#0x0
   \   00001B   7402         MOV       A,#0x2
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?S_SHL
   \   000022   E5..         MOV       A,?V0
   \   000024   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_680:
   \   000027   35..         ADDC      A,?V1
   \   000029   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   5004            if ( pDiscoverExtRsp == NULL )
   \                     ??CrossCallReturnLabel_636:
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_0 & 0xFFFF
   5005            {
   5006              return; // EMBEDDED RETURN
   5007            }
   5008          
   5009          
   5010            if ( numAttrs != 0 )
   \   000031   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_1 & 0xFFFF
   5011            {
   5012              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000039   12....       LCALL     ?Subroutine34 & 0xFFFF
   5013              {
   5014                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_537:
   \   00003C   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00003F   12....       LCALL     ?XSTACK_DISP100_8
   \   000042   88..         MOV       ?V10,R0
   \   000044   89..         MOV       ?V11,R1
   \   000046   78..         MOV       R0,#?V10
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?XSTACK_DISP100_8
   \   000050   88..         MOV       ?V10,R0
   \   000052   89..         MOV       ?V11,R1
   \   000054   78..         MOV       R0,#?V10
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   E9           MOV       A,R1
   \   000060   603B         JZ        ??zclProcessInDiscAttrsExtCmd_2
   5015                {
   5016                  break; // Should not happen, as numAttrs already calculated
   5017                }
   5018          
   5019                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   \   000062   E5..         MOV       A,?V2
   \   000064   F5..         MOV       ?V4,A
   \   000066   75..00       MOV       ?V5,#0x0
   \   000069   7402         MOV       A,#0x2
   \   00006B   78..         MOV       R0,#?V4
   \   00006D   12....       LCALL     ?S_SHL
   \   000070   E5..         MOV       A,?V0
   \   000072   25..         ADD       A,?V4
   \   000074   F8           MOV       R0,A
   \   000075   E5..         MOV       A,?V1
   \   000077   35..         ADDC      A,?V5
   \   000079   F9           MOV       R1,A
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?Subroutine41 & 0xFFFF
   5020                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_623:
   \   000082   7406         MOV       A,#0x6
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00008A   F0           MOVX      @DPTR,A
   5021                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   \   00008B   7407         MOV       A,#0x7
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E0           MOVX      A,@DPTR
   \   000091   5407         ANL       A,#0x7
   \   000093   8882         MOV       DPL,R0
   \   000095   8983         MOV       DPH,R1
   \   000097   A3           INC       DPTR
   \   000098   12....       LCALL     ?Subroutine19 & 0xFFFF
   5022              }
   \                     ??CrossCallReturnLabel_12:
   \   00009B   409F         JC        ??CrossCallReturnLabel_537
   5023          
   5024              // Are there more attributes to be discovered?
   5025              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsExtCmd_2:
   \   00009D   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0000A0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A3   88..         MOV       ?V4,R0
   \   0000A5   89..         MOV       ?V5,R1
   \   0000A7   78..         MOV       R0,#?V4
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B1   88..         MOV       ?V4,R0
   \   0000B3   89..         MOV       ?V5,R1
   \   0000B5   78..         MOV       R0,#?V4
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C0   E9           MOV       A,R1
   \   0000C1   6002         JZ        ??zclProcessInDiscAttrsExtCmd_1
   5026              {
   5027                discComplete = FALSE;
   \   0000C3   7F00         MOV       R7,#0x0
   5028              }
   5029            }
   5030          
   5031            pDiscoverExtRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsExtCmd_1:
   \   0000C5   12....       LCALL     ?Subroutine14 & 0xFFFF
   5032            pDiscoverExtRsp->numAttr = numAttrs;
   5033          
   5034            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5035                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   5036                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_3:
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   75..01       MOV       ?V4,#0x1
   \   0000CE   78..         MOV       R0,#?V4
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D3   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D9   78..         MOV       R0,#?V0
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000E1   12....       LCALL     `??zcl_SendDiscoverAttrsExtRsp::?relay`; Banked call to: zcl_SendDiscoverAttrsExtRsp
   \   0000E4   7405         MOV       A,#0x5
   \   0000E6   12....       LCALL     ?DEALLOC_XSTACK8
   5037          
   5038            zcl_mem_free( pDiscoverExtRsp );
   \   0000E9                ; Setup parameters for call to function osal_mem_free
   \   0000E9   AA..         MOV       R2,?V0
   \   0000EB   AB..         MOV       R3,?V1
   \   0000ED   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5039          
   5040            return;
   \                     ??zclProcessInDiscAttrsExtCmd_0:
   \   0000F0   02....       LJMP      ?Subroutine6 & 0xFFFF
   5041          }
   5042          
   5043          /*********************************************************************
   5044           * @fn      zclProcessInDiscCmd
   5045           *
   5046           * @brief   Process the "Profile" Discover Command
   5047           *
   5048           * @param   pInMsg - incoming message to process
   5049           *
   5050           * @return  TRUE if command processed. FALSE, otherwise.
   5051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5052          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscCmd:
   5053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine141 & 0xFFFF
   5054            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   5055            zclDiscoverCmdsCmdRsp_t cmdRsp;
   5056            ZStatus_t status;
   5057            zclCommandRec_t cmdRec;
   5058            uint8 cmdID;
   5059            uint8 i;
   5060            uint8 j;
   5061          
   5062            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_243:
   \   00000D   12....       LCALL     ?Subroutine110 & 0xFFFF
   5063          
   5064            // Find out the number of commands supported within the specified range
   5065            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   \                     ??CrossCallReturnLabel_186:
   \   000010   75..00       MOV       ?V0,#0x0
   \   000013   85..82       MOV       DPL,?V4
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00001B   EA           MOV       A,R2
   \   00001C   2407         ADD       A,#0x7
   \   00001E   F5..         MOV       ?V8,A
   \   000020   E4           CLR       A
   \   000021   3F           ADDC      A,R7
   \   000022   F5..         MOV       ?V9,A
   \   000024   EA           MOV       A,R2
   \   000025   2402         ADD       A,#0x2
   \   000027   F5..         MOV       ?V6,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V7,A
   \   00002D   800B         SJMP      ??zclProcessInDiscCmd_0
   \                     ??zclProcessInDiscCmd_1:
   \   00002F   05..         INC       ?V0
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   04           INC       A
   \   000039   F0           MOVX      @DPTR,A
   \                     ??zclProcessInDiscCmd_0:
   \   00003A   85..82       MOV       DPL,?V4
   \   00003D   85..83       MOV       DPH,?V5
   \   000040   A3           INC       DPTR
   \   000041   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000044   5026         JNC       ??zclProcessInDiscCmd_2
   5066            {
   5067              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \   000046   12....       LCALL     ?Subroutine80 & 0xFFFF
   5068              {
   5069                break;  // Command not supported
   5070              }
   5071            }
   \                     ??CrossCallReturnLabel_135:
   \   000049   12....       LCALL     ?XSTACK_DISP100_8
   \   00004C   88..         MOV       ?V10,R0
   \   00004E   89..         MOV       ?V11,R1
   \   000050   78..         MOV       R0,#?V10
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?XSTACK_DISP100_8
   \   00005A   88..         MOV       ?V10,R0
   \   00005C   89..         MOV       ?V11,R1
   \   00005E   78..         MOV       R0,#?V10
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000063   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   \   000069   E9           MOV       A,R1
   \   00006A   70C3         JNZ       ??zclProcessInDiscCmd_1
   5072          
   5073            // Allocate space for the response command
   5074            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   \                     ??zclProcessInDiscCmd_2:
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   AA..         MOV       R2,?V0
   \   00006E   7B00         MOV       R3,#0x0
   \   000070   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8B..         MOV       ?V3,R3
   \   000075   A9..         MOV       R1,?V3
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   5075          
   5076            if ( cmdRsp.pCmdID == NULL )
   \                     ??CrossCallReturnLabel_619:
   \   00007F   EA           MOV       A,R2
   \   000080   49           ORL       A,R1
   \   000081   7003         JNZ       $+5
   \   000083   02....       LJMP      ??zclProcessInDiscCmd_3 & 0xFFFF
   5077            {
   5078              return FALSE; // EMBEDDED RETURN
   5079            }
   5080          
   5081            if ( i != 0 )
   \   000086   E5..         MOV       A,?V0
   \   000088   6061         JZ        ??zclProcessInDiscCmd_4
   5082            {
   5083              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   \   00008A   75..00       MOV       ?V1,#0x0
   \   00008D   85..82       MOV       DPL,?V4
   \   000090   85..83       MOV       DPH,?V5
   \   000093   12....       LCALL     ?Subroutine129 & 0xFFFF
   5084              {
   5085                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??CrossCallReturnLabel_229:
   \   000096   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000099   12....       LCALL     ?XSTACK_DISP100_8
   \   00009C   88..         MOV       ?V4,R0
   \   00009E   89..         MOV       ?V5,R1
   \   0000A0   78..         MOV       R0,#?V4
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   7402         MOV       A,#0x2
   \   0000A7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AA   88..         MOV       ?V4,R0
   \   0000AC   89..         MOV       ?V5,R1
   \   0000AE   78..         MOV       R0,#?V4
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV       A,R1
   \   0000BA   602F         JZ        ??zclProcessInDiscCmd_4
   5086                {
   5087                  break; // Attribute not supported
   5088                }
   5089          
   5090                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   \   0000BC   7408         MOV       A,#0x8
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   C0E0         PUSH      A
   \   0000C4   A8..         MOV       R0,?V1
   \   0000C6   7404         MOV       A,#0x4
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   28           ADD       A,R0
   \   0000CD   FA           MOV       R2,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   3400         ADDC      A,#0x0
   \   0000D2   8A82         MOV       DPL,R2
   \   0000D4   F583         MOV       DPH,A
   \   0000D6   D0E0         POP       A
   \   0000D8   F0           MOVX      @DPTR,A
   5091              }
   \   0000D9   05..         INC       ?V1
   \   0000DB   85..82       MOV       DPL,?XSP + 0
   \   0000DE   85..83       MOV       DPH,?XSP + 1
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   04           INC       A
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   E5..         MOV       A,?V1
   \   0000E6   C3           CLR       C
   \   0000E7   95..         SUBB      A,?V0
   \   0000E9   40AB         JC        ??CrossCallReturnLabel_229
   5092            }
   5093          
   5094            // Are there more commands to be discovered?
   5095            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_4:
   \   0000EB   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000EE   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F1   88..         MOV       ?V4,R0
   \   0000F3   89..         MOV       ?V5,R1
   \   0000F5   78..         MOV       R0,#?V4
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FA   7402         MOV       A,#0x2
   \   0000FC   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FF   88..         MOV       ?V4,R0
   \   000101   89..         MOV       ?V5,R1
   \   000103   78..         MOV       R0,#?V4
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00010B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010E   E9           MOV       A,R1
   \   00010F   6008         JZ        ??zclProcessInDiscCmd_5
   5096            {
   5097              cmdRsp.discComplete = FALSE;
   \   000111   7401         MOV       A,#0x1
   \   000113   12....       LCALL     ?XSTACK_DISP0_8
   \   000116   E4           CLR       A
   \   000117   8007         SJMP      ??zclProcessInDiscCmd_6
   5098            }
   5099            else
   5100            {
   5101              cmdRsp.discComplete = TRUE;
   \                     ??zclProcessInDiscCmd_5:
   \   000119   7401         MOV       A,#0x1
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   7401         MOV       A,#0x1
   \                     ??zclProcessInDiscCmd_6:
   \   000120   F0           MOVX      @DPTR,A
   5102            }
   5103          
   5104            // pass the command requested
   5105            cmdRsp.cmdType = pInMsg->hdr.commandID;
   \   000121   85..82       MOV       DPL,?V8
   \   000124   85..83       MOV       DPH,?V9
   \   000127   E0           MOVX      A,@DPTR
   \   000128   C0E0         PUSH      A
   \   00012A   7402         MOV       A,#0x2
   \   00012C   12....       LCALL     ?XSTACK_DISP0_8
   \   00012F   D0E0         POP       A
   \   000131   F0           MOVX      @DPTR,A
   5106          
   5107            // store number of commands returned
   5108            cmdRsp.numCmd = j;
   \   000132   7403         MOV       A,#0x3
   \   000134   12....       LCALL     ?XSTACK_DISP0_8
   \   000137   E5..         MOV       A,?V1
   \   000139   12....       LCALL     ?Subroutine32 & 0xFFFF
   5109          
   5110            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5111                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   5112                                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_36:
   \   00013C   F5..         MOV       ?V0,A
   \   00013E   A3           INC       DPTR
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F5..         MOV       ?V1,A
   \   000142                ; Setup parameters for call to function zcl_SendDiscoverCmdsRspCmd
   \   000142   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000148   75..01       MOV       ?V2,#0x1
   \   00014B   78..         MOV       R0,#?V2
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000150   85..82       MOV       DPL,?V6
   \   000153   85..83       MOV       DPH,?V7
   \   000156   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000159   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015C   7404         MOV       A,#0x4
   \   00015E   12....       LCALL     ?XSTACK_DISP100_8
   \   000161   88..         MOV       ?V2,R0
   \   000163   89..         MOV       ?V3,R1
   \   000165   78..         MOV       R0,#?V2
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   85..82       MOV       DPL,?V0
   \   00016D   85..83       MOV       DPH,?V1
   \   000170   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000173   E5..         MOV       A,?V0
   \   000175   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_690:
   \   000178   35..         ADDC      A,?V1
   \   00017A   FB           MOV       R3,A
   \   00017B   E5..         MOV       A,?V0
   \   00017D   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000180   35..         ADDC      A,?V1
   \   000182   F583         MOV       DPH,A
   \   000184   E0           MOVX      A,@DPTR
   \   000185   F9           MOV       R1,A
   \   000186   12....       LCALL     `??zcl_SendDiscoverCmdsRspCmd::?relay`; Banked call to: zcl_SendDiscoverCmdsRspCmd
   \   000189   7405         MOV       A,#0x5
   \   00018B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018E   E9           MOV       A,R1
   \   00018F   FE           MOV       R6,A
   5113          
   5114            zcl_mem_free( cmdRsp.pCmdID );
   \   000190                ; Setup parameters for call to function osal_mem_free
   \   000190   7404         MOV       A,#0x4
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   12....       LCALL     ?Subroutine105 & 0xFFFF
   5115          
   5116            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_178:
   \   000198   EE           MOV       A,R6
   \   000199   7004         JNZ       ??zclProcessInDiscCmd_3
   5117            {
   5118              return TRUE;
   \   00019B   7901         MOV       R1,#0x1
   \   00019D   8002         SJMP      ??zclProcessInDiscCmd_7
   5119            }
   5120            else
   5121            {
   5122              return FALSE;
   \                     ??zclProcessInDiscCmd_3:
   \   00019F   7900         MOV       R1,#0x0
   5123            }
   \                     ??zclProcessInDiscCmd_7:
   \   0001A1   02....       LJMP      ?Subroutine6 & 0xFFFF
   5124          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine272_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_684:
   \   000007                ; Setup parameters for call to function zclFindNextCmdRec
   \   000007                ; Setup parameters for call to function zclFindNextCmdRec
   \   000007                ; Setup parameters for call to function zclFindNextCmdRec
   \   000007   7406         MOV       A,#0x6
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000009   FD           MOV       R5,A
   \   00000A   85..82       MOV       DPL,?V8
   \   00000D   85..83       MOV       DPH,?V9
   \   000010   E0           MOVX      A,@DPTR
   \   000011   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000014   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   000017   7404         MOV       A,#0x4
   \   000019   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_radius>`:
   \   000000   1E           DB 30
   5125          
   5126          #endif // ZCL_DISCOVER
   5127          
   5128          
   5129          /*********************************************************************
   5130          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     26   zclAnalogDataType
      0     29   zclAuthorizeWrite
        0     14   -> zclGetAuthorizeCB
      1     39   zclBuildHdr
      2     54   zclFindAttrRec
        0     16   -> zclFindAttrRecsList
      2     16   zclFindAttrRecsList
      0     19   zclFindClusterOption
      2     16   zclFindCmdRec
        0     14   -> zclFindCmdRecsList
      2     16   zclFindCmdRecsList
      0     50   zclFindNextAttrRec
        0     16   -> zclFindAttrRecsList
      1     50   zclFindNextCmdRec
        0     16   -> zclFindCmdRecsList
      0     45   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     58   zclGetAttrDataLengthUsingCB
        0     18   -> zclGetReadWriteCB
      0     42   zclGetAuthorizeCB
        0     10   -> zclFindAttrRecsList
      0     47   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0     26   zclGetDataTypeLength
      0     28   zclGetReadWriteCB
        0     10   -> zclFindAttrRecsList
      1     49   zclParseHdr
        0     12   -> osal_memset
      1     12   zclParseInConfigReportRspCmd
        0     12   -> osal_mem_alloc
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     10   zclParseInDiscAttrsCmd
        0     10   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsExtRspCmd
        0     14   -> osal_mem_alloc
      1     12   zclParseInDiscAttrsRspCmd
        0     12   -> osal_mem_alloc
      1     10   zclParseInDiscCmdsCmd
        0     10   -> osal_mem_alloc
      1     12   zclParseInDiscCmdsRspCmd
        0     12   -> osal_mem_alloc
      1     12   zclParseInReadCmd
        0     12   -> osal_mem_alloc
      1     24   zclParseInReadReportCfgRspCmd
        0     24   -> osal_mem_alloc
        0     24   -> zclAnalogDataType
        0     24   -> zclGetAttrDataLength
        0     24   -> zclGetDataTypeLength
      1     25   zclParseInReadRspCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInReportCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInWriteCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     16   zclParseInWriteRspCmd
        0     16   -> osal_mem_alloc
      0     30   zclProcessInDiscAttrs
        0     30   -> zclFindNextAttrRec
        0     26   -> zclProcessInDiscAttrsCmd
        0     26   -> zclProcessInDiscAttrsExtCmd
      1     61   zclProcessInDiscAttrsCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextAttrRec
        0     35   -> zcl_SendDiscoverAttrsRspCmd
      1     61   zclProcessInDiscAttrsExtCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextAttrRec
        0     35   -> zcl_SendDiscoverAttrsExtRsp
      1     35   zclProcessInDiscCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextCmdRec
        0     35   -> zcl_SendDiscoverCmdsRspCmd
      1     37   zclProcessInReadCmd
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     34   -> zclFindAttrRec
        0     32   -> zclGetAuthorizeCB
        0     37   -> zcl_SendReadRsp
      1     39   zclProcessInWriteCmd
        0     34   -> bdb_ZclIdentifyCmdInd
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     36   -> zclFindAttrRec
        0     36   -> zclWriteAttrData
        0     36   -> zclWriteAttrDataUsingCB
        0     39   -> zcl_SendWriteRsp
      1     41   zclProcessInWriteUndividedCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     38   -> zclFindAttrRec
        0     36   -> zclGetAttrDataLength
        0     36   -> zclGetAttrDataLengthUsingCB
        0     38   -> zclReadAttrData
        0     40   -> zclReadAttrDataUsingCB
        0     38   -> zclRevertWriteUndividedCmd
        0     38   -> zclWriteAttrData
        0     38   -> zclWriteAttrDataUsingCB
        0     41   -> zcl_SendWriteRsp
      0     56   zclReadAttrData
        0     18   -> osal_memcpy
        0     15   -> zclGetAttrDataLength
      0     60   zclReadAttrDataUsingCB
        0     16   -> zclGetReadWriteCB
      0     69   zclRevertWriteUndividedCmd
        0     31   -> osal_memcpy
        0     30   -> zclFindAttrRec
        0     28   -> zclGetAttrDataLength
        0     30   -> zclWriteAttrDataUsingCB
      1     45   zclSerializeData
        0     19   -> osal_buffer_uint32
        0     18   -> osal_memcpy
      0     47   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     56   zclWriteAttrData
        0     18   -> osal_memcpy
        0     15   -> zclAuthorizeWrite
        0     15   -> zclGetAttrDataLength
      0     56   zclWriteAttrDataUsingCB
        0     14   -> zclAuthorizeWrite
        0     14   -> zclGetReadWriteCB
      0     62   zcl_DeviceOperational
        0     23   -> zclFindAttrRec
        0     23   -> zclReadAttrData
      1     12   zcl_HandleExternal
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1     56   zcl_ProcessMessageMSG
        0     37   -> StubAPS_InterPan
        0     37   -> afFindEndPointDesc
        0     37   -> osal_mem_free
        0     37   -> zclGetClusterOption
        0     37   -> zclParseHdr
        0     37   -> zclSetSecurityOption
        0     39   -> zcl_DeviceOperational
        0     44   -> zcl_SendDefaultRspCmd
      0     32   zcl_ReadAttrData
        0     26   -> zclFindAttrRec
        0     26   -> zclReadAttrData
        0     28   -> zclReadAttrDataUsingCB
      1     76   zcl_SendCommand
        0     39   -> AF_DataRequest
        0     30   -> StubAPS_InterPan
        0     30   -> afFindEndPointDesc
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     33   -> osal_memcpy
        0     30   -> osal_memset
        0     30   -> zclBuildHdr
        0     30   -> zclGetClusterOption
        0     32   -> zcl_DeviceOperational
      1     42   zcl_SendConfigReportCmd
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     26   -> zclAnalogDataType
        0     26   -> zclGetDataTypeLength
        0     26   -> zclSerializeData
        0     37   -> zcl_SendCommand
      1     67   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     32   zcl_SendDiscoverAttrsCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     27   -> zcl_SendCommand
      1     31   zcl_SendDiscoverAttrsExt
        0     26   -> zcl_SendCommand
      1     70   zcl_SendDiscoverAttrsExtRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     35   -> zcl_SendCommand
      1     70   zcl_SendDiscoverAttrsRspCmd
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     35   -> zcl_SendCommand
      1     31   zcl_SendDiscoverCmdsCmd
        0     25   -> zcl_SendCommand
      1     68   zcl_SendDiscoverCmdsRspCmd
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     36   zcl_SendRead
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     36   zcl_SendReadReportCfgCmd
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     72   zcl_SendReadRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> zclGetAttrDataLength
        0     24   -> zclGetAttrDataLengthUsingCB
        0     28   -> zclReadAttrDataUsingCB
        0     24   -> zclSerializeData
        0     35   -> zcl_SendCommand
      1     39   zcl_SendWriteRequest
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     72   zcl_SendWriteRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free
      0     12   zcl_event_loop
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_msg_send
        0     12   -> zcl_ProcessMessageMSG
        0     12   -> zcl_getExternalFoundationHandler
      2     12   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2      0   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerCmdList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zcl_radius>
      16  ??Subroutine211_0
       5  ??Subroutine212_0
       6  ??Subroutine213_0
      12  ??Subroutine214_0
       1  ??Subroutine215_0
       2  ??Subroutine216_0
       6  ??Subroutine217_0
       6  ??Subroutine218_0
       6  ??Subroutine219_0
       7  ??Subroutine220_0
       5  ??Subroutine221_0
       5  ??Subroutine222_0
       2  ??Subroutine223_0
       6  ??Subroutine224_0
      12  ??Subroutine225_0
       5  ??Subroutine226_0
       8  ??Subroutine227_0
       7  ??Subroutine228_0
       5  ??Subroutine229_0
       5  ??Subroutine230_0
       2  ??Subroutine231_0
       6  ??Subroutine232_0
       8  ??Subroutine233_0
       1  ??Subroutine234_0
       3  ??Subroutine235_0
       4  ??Subroutine236_0
       6  ??Subroutine237_0
       6  ??Subroutine238_0
       4  ??Subroutine239_0
      11  ??Subroutine240_0
       6  ??Subroutine241_0
       6  ??Subroutine242_0
       6  ??Subroutine243_0
       1  ??Subroutine244_0
       6  ??Subroutine245_0
       4  ??Subroutine246_0
       1  ??Subroutine247_0
       5  ??Subroutine248_0
       8  ??Subroutine249_0
       2  ??Subroutine250_0
       4  ??Subroutine251_0
       6  ??Subroutine252_0
       3  ??Subroutine253_0
       5  ??Subroutine254_0
       5  ??Subroutine255_0
       4  ??Subroutine256_0
       7  ??Subroutine257_0
      10  ??Subroutine258_0
       6  ??Subroutine259_0
       6  ??Subroutine260_0
      21  ??Subroutine261_0
       6  ??Subroutine262_0
       2  ??Subroutine263_0
       6  ??Subroutine264_0
       7  ??Subroutine265_0
       1  ??Subroutine266_0
       4  ??Subroutine267_0
       4  ??Subroutine268_0
       8  ??Subroutine269_0
      30  ??Subroutine270_0
       5  ??Subroutine271_0
       8  ??Subroutine272_0
       5  ??Subroutine273_0
       3  ??Subroutine274_0
       6  ??Subroutine275_0
       7  ?Subroutine0
       3  ?Subroutine1
       5  ?Subroutine10
       6  ?Subroutine100
       6  ?Subroutine101
       4  ?Subroutine102
       4  ?Subroutine103
       8  ?Subroutine104
       7  ?Subroutine105
       1  ?Subroutine106
       8  ?Subroutine107
       2  ?Subroutine108
      12  ?Subroutine109
       7  ?Subroutine11
       4  ?Subroutine110
       7  ?Subroutine111
       5  ?Subroutine112
      10  ?Subroutine113
       8  ?Subroutine114
       1  ?Subroutine115
       6  ?Subroutine116
       6  ?Subroutine117
       5  ?Subroutine118
       4  ?Subroutine119
       5  ?Subroutine12
      16  ?Subroutine120
       6  ?Subroutine121
      14  ?Subroutine122
      14  ?Subroutine123
      19  ?Subroutine124
       8  ?Subroutine125
       8  ?Subroutine126
       9  ?Subroutine127
       5  ?Subroutine128
       4  ?Subroutine129
      24  ?Subroutine13
       4  ?Subroutine130
       4  ?Subroutine131
      10  ?Subroutine132
      14  ?Subroutine133
       4  ?Subroutine134
      13  ?Subroutine135
      12  ?Subroutine136
      10  ?Subroutine137
       2  ?Subroutine138
       4  ?Subroutine139
      32  ?Subroutine14
      16  ?Subroutine140
      14  ?Subroutine141
      12  ?Subroutine142
      13  ?Subroutine143
       6  ?Subroutine144
      10  ?Subroutine145
       1  ?Subroutine146
      14  ?Subroutine147
       8  ?Subroutine148
       8  ?Subroutine149
      36  ?Subroutine15
       8  ?Subroutine150
       8  ?Subroutine151
      28  ?Subroutine152
      12  ?Subroutine153
      26  ?Subroutine154
       5  ?Subroutine155
      15  ?Subroutine156
       9  ?Subroutine157
      12  ?Subroutine158
      18  ?Subroutine159
      12  ?Subroutine16
      10  ?Subroutine160
      13  ?Subroutine161
      11  ?Subroutine162
      15  ?Subroutine163
       8  ?Subroutine164
       8  ?Subroutine165
       8  ?Subroutine166
       4  ?Subroutine167
       7  ?Subroutine168
       6  ?Subroutine169
       1  ?Subroutine17
       4  ?Subroutine170
       9  ?Subroutine171
      13  ?Subroutine172
       8  ?Subroutine173
      28  ?Subroutine174
       4  ?Subroutine175
       6  ?Subroutine176
       4  ?Subroutine177
       6  ?Subroutine178
      13  ?Subroutine179
      19  ?Subroutine18
      13  ?Subroutine180
      19  ?Subroutine181
       8  ?Subroutine182
      10  ?Subroutine183
      11  ?Subroutine184
      11  ?Subroutine185
       8  ?Subroutine186
       8  ?Subroutine187
      15  ?Subroutine188
       4  ?Subroutine189
      26  ?Subroutine19
      10  ?Subroutine190
       1  ?Subroutine191
       5  ?Subroutine192
       5  ?Subroutine193
      10  ?Subroutine194
      22  ?Subroutine195
       5  ?Subroutine196
       1  ?Subroutine197
       2  ?Subroutine198
       5  ?Subroutine199
       3  ?Subroutine2
      15  ?Subroutine20
       4  ?Subroutine200
       7  ?Subroutine201
       5  ?Subroutine202
       8  ?Subroutine203
       6  ?Subroutine204
       6  ?Subroutine205
       7  ?Subroutine206
       5  ?Subroutine207
       9  ?Subroutine208
       6  ?Subroutine209
      30  ?Subroutine21
       6  ?Subroutine210
      13  ?Subroutine22
       5  ?Subroutine23
      14  ?Subroutine24
       6  ?Subroutine25
      11  ?Subroutine26
      12  ?Subroutine27
       1  ?Subroutine28
       6  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
       8  ?Subroutine31
       5  ?Subroutine32
       7  ?Subroutine33
      18  ?Subroutine34
       4  ?Subroutine35
       4  ?Subroutine36
       4  ?Subroutine37
       7  ?Subroutine38
      11  ?Subroutine39
       5  ?Subroutine4
       9  ?Subroutine40
       3  ?Subroutine41
      10  ?Subroutine42
      12  ?Subroutine43
       4  ?Subroutine44
       9  ?Subroutine45
       6  ?Subroutine46
      26  ?Subroutine47
       6  ?Subroutine48
       6  ?Subroutine49
       3  ?Subroutine5
       3  ?Subroutine50
       5  ?Subroutine51
      18  ?Subroutine52
      21  ?Subroutine53
      28  ?Subroutine54
      29  ?Subroutine55
       4  ?Subroutine56
      17  ?Subroutine57
       6  ?Subroutine58
      32  ?Subroutine59
       2  ?Subroutine6
       6  ?Subroutine60
       8  ?Subroutine61
       8  ?Subroutine62
      18  ?Subroutine63
       4  ?Subroutine64
       6  ?Subroutine65
       4  ?Subroutine66
       9  ?Subroutine67
      12  ?Subroutine68
       6  ?Subroutine69
       5  ?Subroutine7
      10  ?Subroutine70
       9  ?Subroutine71
      13  ?Subroutine72
       5  ?Subroutine73
      15  ?Subroutine74
      10  ?Subroutine75
      18  ?Subroutine76
      17  ?Subroutine77
      33  ?Subroutine78
       6  ?Subroutine79
       3  ?Subroutine8
      10  ?Subroutine80
       1  ?Subroutine81
       6  ?Subroutine82
      14  ?Subroutine83
      26  ?Subroutine84
      12  ?Subroutine85
       9  ?Subroutine86
       6  ?Subroutine87
      17  ?Subroutine88
      10  ?Subroutine89
       5  ?Subroutine9
       4  ?Subroutine90
       6  ?Subroutine91
       4  ?Subroutine92
       8  ?Subroutine93
      12  ?Subroutine94
       6  ?Subroutine95
      30  ?Subroutine96
       8  ?Subroutine97
       4  ?Subroutine98
       4  ?Subroutine99
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  gpCmdList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
      33  zclAnalogDataType
      51  zclAuthorizeWrite
     101  zclBuildHdr
      92  zclCmdTable
     126  zclFindAttrRec
      37  zclFindAttrRecsList
     102  zclFindClusterOption
     106  zclFindCmdRec
      37  zclFindCmdRecsList
     186  zclFindNextAttrRec
     242  zclFindNextCmdRec
      63  zclGetAttrDataLength
     100  zclGetAttrDataLengthUsingCB
      22  zclGetAuthorizeCB
      26  zclGetClusterOption
     166  zclGetDataTypeLength
      22  zclGetReadWriteCB
     223  zclParseHdr
     134  zclParseInConfigReportRspCmd
      16  zclParseInDefaultRspCmd
      43  zclParseInDiscAttrsCmd
     134  zclParseInDiscAttrsExtRspCmd
     102  zclParseInDiscAttrsRspCmd
      16  zclParseInDiscCmdsCmd
      75  zclParseInDiscCmdsRspCmd
      89  zclParseInReadCmd
     565  zclParseInReadReportCfgRspCmd
     332  zclParseInReadRspCmd
      87  zclParseInReportCmd
      86  zclParseInWriteCmd
     123  zclParseInWriteRspCmd
     175  zclProcessInDiscAttrs
     204  zclProcessInDiscAttrsCmd
     243  zclProcessInDiscAttrsExtCmd
     420  zclProcessInDiscCmd
     428  zclProcessInReadCmd
     549  zclProcessInWriteCmd
     792  zclProcessInWriteUndividedCmd
     101  zclReadAttrData
      92  zclReadAttrDataUsingCB
     233  zclRevertWriteUndividedCmd
     382  zclSerializeData
      41  zclSetSecurityOption
     143  zclWriteAttrData
     103  zclWriteAttrDataUsingCB
     118  zcl_DeviceOperational
     167  zcl_HandleExternal
       1  zcl_InSeqNum
      12  zcl_Init
    1136  zcl_ProcessMessageMSG
     129  zcl_ReadAttrData
     469  zcl_SendCommand
     496  zcl_SendConfigReportCmd
     127  zcl_SendDefaultRspCmd
     164  zcl_SendDiscoverAttrsCmd
     142  zcl_SendDiscoverAttrsExt
     242  zcl_SendDiscoverAttrsExtRsp
     202  zcl_SendDiscoverAttrsRspCmd
     197  zcl_SendDiscoverCmdsCmd
     308  zcl_SendDiscoverCmdsRspCmd
     182  zcl_SendRead
     150  zcl_SendReadReportCfgCmd
     403  zcl_SendReadRsp
     295  zcl_SendWriteRequest
     168  zcl_SendWriteRsp
       1  zcl_TaskID
       2  zcl_ValidateAttrDataCB
     132  zcl_addExternalFoundationHandler
     105  zcl_event_loop
      60  zcl_getExternalFoundationHandler
      12  zcl_getParsedTransSeqNum
      13  zcl_getRawAFMsg
       1  zcl_radius
      84  zcl_registerAttrList
      50  zcl_registerClusterOptionList
      51  zcl_registerCmdList
      10  zcl_registerForMsg
       8  zcl_registerForMsgExt
      90  zcl_registerPlugin
      54  zcl_registerReadWriteCB
      12  zcl_registerValidateAttrData
     456  -- Other

 
 15 559 bytes in segment BANKED_CODE
    456 bytes in segment BANK_RELAYS
     92 bytes in segment CODE_C
      1 byte  in segment XDATA_I
      1 byte  in segment XDATA_ID
     17 bytes in segment XDATA_Z
 
    549 bytes of CODE     memory
 15 559 bytes of HUGECODE memory
     18 bytes of XDATA    memory

Errors: none
Warnings: none
