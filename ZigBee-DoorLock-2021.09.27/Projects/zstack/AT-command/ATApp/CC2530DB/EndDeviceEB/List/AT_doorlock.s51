///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              23/Nov/2021  10:55:12
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_doorlock.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWECB5.tmp
//        (F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_doorlock.c
//        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
//        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
//        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
//        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
//        ISR_KEYINTERRUPT -lC
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        -lA
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=300 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\AT_doorlock.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AT_doorlock

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_SHR
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8

        PUBLIC `??AT_DoorLock_Handle_Rsp::?relay`
        FUNCTION `??AT_DoorLock_Handle_Rsp::?relay`,0203H
        PUBLIC `??AT_DoorLock_Init::?relay`
        FUNCTION `??AT_DoorLock_Init::?relay`,0203H
        PUBLIC `??AT_DoorLock_Lock::?relay`
        FUNCTION `??AT_DoorLock_Lock::?relay`,0203H
        PUBLIC `??AT_DoorLock_SetTemporaryPin_Req::?relay`
        FUNCTION `??AT_DoorLock_SetTemporaryPin_Req::?relay`,0203H
        PUBLIC `??AT_DoorLock_Unlock::?relay`
        FUNCTION `??AT_DoorLock_Unlock::?relay`,0203H
        FUNCTION `??AT_DoorLock_Upload::?relay`,0203H
        FUNCTION `??sum_check::?relay`,0203H
        PUBLIC AT_DoorLock_Handle_Rsp
        FUNCTION AT_DoorLock_Handle_Rsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC AT_DoorLock_Init
        FUNCTION AT_DoorLock_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_DoorLock_Lock
        FUNCTION AT_DoorLock_Lock,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC AT_DoorLock_SetTemporaryPin_Req
        FUNCTION AT_DoorLock_SetTemporaryPin_Req,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC AT_DoorLock_Unlock
        FUNCTION AT_DoorLock_Unlock,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION AT_DoorLock_Upload,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 69, STACK
        PUBWEAK __Constant_12c
        PUBWEAK __Constant_3a98
        PUBWEAK __Constant_4650
        FUNCTION sum_check,0203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AT_single_bus_init  SYMBOL "AT_single_bus_init"
`??AT_single_bus_init::?relay` SYMBOL "?relay", AT_single_bus_init
AT_single_bus_send_buf SYMBOL "AT_single_bus_send_buf"
`??AT_single_bus_send_buf::?relay` SYMBOL "?relay", AT_single_bus_send_buf
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
osal_ConvertUTCSecs SYMBOL "osal_ConvertUTCSecs"
`??osal_ConvertUTCSecs::?relay` SYMBOL "?relay", osal_ConvertUTCSecs
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
zclClosures_SendDoorLockOperationEventNotification SYMBOL "zclClosures_SendDoorLockOperationEventNotification"
??zclClosures_SendDoorLockOperationEventNotific SYMBOL "?relay", zclClosures_SendDoorLockOperationEventNotification
zclClosures_SendDoorLockProgrammingEventNotification SYMBOL "zclClosures_SendDoorLockProgrammingEventNotification"
??zclClosures_SendDoorLockProgrammingEventNotif SYMBOL "?relay", zclClosures_SendDoorLockProgrammingEventNotification
zclClosures_SendDoorLockStatusResponse SYMBOL "zclClosures_SendDoorLockStatusResponse"
`??zclClosures_SendDoorLockStatusResponse::?rela` SYMBOL "?relay", zclClosures_SendDoorLockStatusResponse
AT_DoorLock_Handle_Rsp SYMBOL "AT_DoorLock_Handle_Rsp"
`??AT_DoorLock_Handle_Rsp::?relay` SYMBOL "?relay", AT_DoorLock_Handle_Rsp
AT_DoorLock_Init    SYMBOL "AT_DoorLock_Init"
`??AT_DoorLock_Init::?relay` SYMBOL "?relay", AT_DoorLock_Init
AT_DoorLock_Lock    SYMBOL "AT_DoorLock_Lock"
`??AT_DoorLock_Lock::?relay` SYMBOL "?relay", AT_DoorLock_Lock
AT_DoorLock_SetTemporaryPin_Req SYMBOL "AT_DoorLock_SetTemporaryPin_Req"
`??AT_DoorLock_SetTemporaryPin_Req::?relay` SYMBOL "?relay", AT_DoorLock_SetTemporaryPin_Req
AT_DoorLock_Unlock  SYMBOL "AT_DoorLock_Unlock"
`??AT_DoorLock_Unlock::?relay` SYMBOL "?relay", AT_DoorLock_Unlock

        EXTERN `??AT_single_bus_init::?relay`
        FUNCTION `??AT_single_bus_init::?relay`,00H
        EXTERN `??AT_single_bus_send_buf::?relay`
        FUNCTION `??AT_single_bus_send_buf::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??osal_ConvertUTCSecs::?relay`
        FUNCTION `??osal_ConvertUTCSecs::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN ??zclClosures_SendDoorLockOperationEventNotific
        FUNCTION ??zclClosures_SendDoorLockOperationEventNotific,00H
        EXTERN ??zclClosures_SendDoorLockProgrammingEventNotif
        FUNCTION ??zclClosures_SendDoorLockProgrammingEventNotif,00H
        EXTERN `??zclClosures_SendDoorLockStatusResponse::?rela`
        FUNCTION `??zclClosures_SendDoorLockStatusResponse::?rela`,00H
        EXTERN AT_single_bus_init
        FUNCTION AT_single_bus_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_single_bus_send_buf
        FUNCTION AT_single_bus_send_buf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCSecs
        FUNCTION osal_ConvertUTCSecs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclATApp_TaskID
        EXTERN zclClosures_SendDoorLockOperationEventNotification
        FUNCTION zclClosures_SendDoorLockOperationEventNotification,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclClosures_SendDoorLockProgrammingEventNotification
        FUNCTION zclClosures_SendDoorLockProgrammingEventNotification,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclClosures_SendDoorLockStatusResponse
        FUNCTION zclClosures_SendDoorLockStatusResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDoorLock_TaskID

// F:\2workspace\doorlock-CC2530\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_doorlock.c
//    1 /******************************************************************************
//    2   Filename:       AT_doorlock.c
//    3   Author:         Yang Wang
//    4 
//    5   Description:    DoorLock Device controller
//    6 *******************************************************************************/
//    7 #include "AT_doorlock.h"
//    8 #include "AT_single_bus.h"
//    9 #include "hal_uart.h"
//   10 #include "OSAL.h"
//   11 #include "bdb_interface.h"
//   12 #include "zcl_doorlock.h"
//   13 #include "OSAL_Clock.h"
//   14 #include "AT_uart0.h"
//   15 #include "AT_printf.h"
//   16 #include "ATApp.h"
//   17 
//   18 /******************************************************************************
//   19                                   utilities
//   20 ******************************************************************************/
//   21 static uint8 sum_check(uint8 *buf, uint8 len);
//   22 static uint32 UTCTime_To_SEC(uint8 *buf);
//   23 static uint8 AT_DoorLock_GetOperationEventSource( uint8 type );
//   24 static uint8 AT_DoorLock_GetProgramEventCode_Add_User( uint8 type );
//   25 static uint8 AT_DoorLock_GetProgramEventCode_Delete_User( uint8 type );
//   26 static ZStatus_t AT_DoorLock_SendOperationEventNotification( uint16 userID,
//   27                                                              uint32 zigBeeLocalTime,
//   28                                                              uint8 batteryLevel,
//   29                                                              uint8 operationEventSource,
//   30                                                              uint8 operationEventCode );
//   31 static ZStatus_t AT_DoorLock_SendProgrammingEventNotification( uint16 userID,
//   32                                                                uint32 zigBeeLocalTime,
//   33                                                                uint8 batteryLevel,
//   34                                                                uint8 programEventSource,
//   35                                                                uint8 programEventCode );
//   36 
//   37 /******************************************************************************
//   38                                    uplink
//   39 ******************************************************************************/
//   40 static ZStatus_t AT_DoorLock_Rsp(uint8 *buf, uint8 len);
//   41 static ZStatus_t AT_DoorLock_Upload(uint8 *buf, uint8 len);
//   42 static ZStatus_t AT_DoorLock_Ack(uint8 *buf, uint8 len);
//   43 
//   44 /******************************************************************************
//   45                                   utilities
//   46 ******************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   47 static uint8 sum_check(uint8 *buf, uint8 len)
sum_check:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function sum_check
        CODE
//   48 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R5,A
//   49   uint8 i = 0;
        MOV       R4,#0x0
//   50   uint16 sum = 0;
        MOV       R0,#0x0
//   51 
//   52   for(i=0;i<len;i++)
        SJMP      ??sum_check_0
//   53   {
//   54     sum += buf[i];
??sum_check_1:
        MOV       A,R4
        MOV       R6,A
        MOV       A,R2
        ADD       A,R6
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,R0
        ADD       A,R6
        MOV       R0,A
//   55   }
        INC       R4
??sum_check_0:
        MOV       A,R4
        CLR       C
        SUBB      A,R5
        JC        ??sum_check_1
//   56 
//   57   return ((sum&0xFF)^0xFF);
        MOV       A,R0
        CPL       A
        MOV       R1,A
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
//   58 }
          CFI EndBlock cfiBlock0
//   59 static uint32 UTCTime_To_SEC(uint8 *buf)
//   60 {
//   61   UTCTimeStruct UTCTime;
//   62   UTCTime.year    = buf[0]+2000;
//   63   UTCTime.month   = buf[1];
//   64   UTCTime.day     = buf[2];
//   65   UTCTime.hour    = buf[3];
//   66   UTCTime.minutes = buf[4];
//   67   UTCTime.seconds = buf[5];
//   68 
//   69   uint32 Seconds;
//   70   Seconds = osal_ConvertUTCSecs( &UTCTime );
//   71 
//   72   return Seconds;
//   73 }
//   74 static uint8 AT_DoorLock_GetOperationEventSource( uint8 type )
//   75 {
//   76   switch( type )
//   77   {
//   78     case WITH_FINGERPRINT:
//   79       return OPERATION_EVENT_SOURCE_FINGERPRINT;
//   80       break;
//   81 
//   82     case WITH_KEYPAD_CODE:
//   83       return OPERATION_EVENT_SOURCE_KEYPAD;
//   84       break;
//   85 
//   86     case WITH_RFID_CARD:
//   87       return OPERATION_EVENT_SOURCE_RFID;
//   88       break;
//   89 
//   90     case WITH_REMOTE_CONTROL:
//   91       return OPERATION_EVENT_SOURCE_REMOTE_CONTROL;
//   92       break;
//   93 
//   94     case WITH_MANUAL_KEY:
//   95       return OPERATION_EVENT_SOURCE_MANUAL;// "Reserved" for Programming Event
//   96       break;
//   97 
//   98     case WITH_TEMP_PIN:
//   99       return OPERATION_EVENT_SOURCE_TEMP_PIN;
//  100       break;
//  101 
//  102     case WITH_REMOTE_APP:
//  103       return OPERATION_EVENT_SOURCE_RF;
//  104       break;
//  105 
//  106     default:
//  107       return OPERATION_EVENT_SOURCE_INDETERMINATE;
//  108       break;
//  109   }
//  110 }
//  111 static uint8 AT_DoorLock_GetProgramEventCode_Add_User( uint8 type )
//  112 {
//  113   switch( type )
//  114   {
//  115     case WITH_FINGERPRINT:
//  116       return PROGRAMMING_EVENT_CODE_FINGERPRINT_ADDED;
//  117       break;
//  118 
//  119     case WITH_KEYPAD_CODE:
//  120       return PROGRAMMING_EVENT_CODE_PIN_CODE_ADDED;
//  121       break;
//  122 
//  123     case WITH_RFID_CARD:
//  124       return PROGRAMMING_EVENT_CODE_RFID_CODE_ADDED;
//  125       break;
//  126 
//  127     default:
//  128       return PROGRAMMING_EVENT_CODE_UNKNOWN_OR_MFG_SPECIFIC;
//  129       break;
//  130   }
//  131 }
//  132 static uint8 AT_DoorLock_GetProgramEventCode_Delete_User( uint8 type )
//  133 {
//  134   switch( type )
//  135   {
//  136     case WITH_FINGERPRINT:
//  137       return PROGRAMMING_EVENT_CODE_FINGERPRINT_DELETED;
//  138       break;
//  139 
//  140     case WITH_KEYPAD_CODE:
//  141       return PROGRAMMING_EVENT_CODE_PIN_CODE_DELETED;
//  142       break;
//  143 
//  144     case WITH_RFID_CARD:
//  145       return PROGRAMMING_EVENT_CODE_RFID_CODE_DELETED;
//  146       break;
//  147 
//  148     default:
//  149       return PROGRAMMING_EVENT_CODE_UNKNOWN_OR_MFG_SPECIFIC;
//  150       break;
//  151   }
//  152 }
//  153 static ZStatus_t AT_DoorLock_SendOperationEventNotification( uint16 userID,
//  154                                                              uint32 zigBeeLocalTime,
//  155                                                              uint8 batteryLevel,
//  156                                                              uint8 operationEventSource,
//  157                                                              uint8 operationEventCode )
//  158 {
//  159   ZStatus_t status;
//  160 
//  161   // build destination address
//  162   afAddrType_t dstAddr;
//  163   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  164   dstAddr.addr.shortAddr = NWK_PAN_COORD_ADDR;// default send to Coordinator
//  165   dstAddr.endPoint = 0x0B;//GENERIC_ENDPOINT on Coordinator
//  166 
//  167   //build DoorLock Operation Event Notification
//  168   zclDoorLockOperationEventNotification_t pPayload;
//  169   pPayload.operationEventSource = operationEventSource;
//  170   pPayload.operationEventCode = operationEventCode;
//  171   pPayload.userID = userID;
//  172   pPayload.pin = batteryLevel; // it is battery level actually
//  173   pPayload.zigBeeLocalTime = zigBeeLocalTime;
//  174 
//  175   pPayload.pData = (uint8 *)osal_mem_alloc(1);
//  176   pPayload.pData[0] = 0;
//  177 
//  178   status = zclClosures_SendDoorLockOperationEventNotification( DOORLOCK_ENDPOINT,//uint8 srcEP,
//  179                                                                &dstAddr,//afAddrType_t *dstAddr,
//  180                                                                &pPayload,//zclDoorLockOperationEventNotification_t *pPayload,
//  181                                                                TRUE,//uint8 disableDefaultRsp,
//  182                                                                bdb_getZCLFrameCounter());//uint8 seqNum
//  183 
//  184   osal_mem_free( pPayload.pData );
//  185 
//  186   return status;
//  187 }
//  188 static ZStatus_t AT_DoorLock_SendProgrammingEventNotification( uint16 userID,
//  189                                                                uint32 zigBeeLocalTime,
//  190                                                                uint8 batteryLevel,
//  191                                                                uint8 programEventSource,
//  192                                                                uint8 programEventCode )
//  193 {
//  194   ZStatus_t status;
//  195 
//  196   // build destination address
//  197   afAddrType_t dstAddr;
//  198   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  199   dstAddr.addr.shortAddr = NWK_PAN_COORD_ADDR;// default send to Coordinator
//  200   dstAddr.endPoint = 0x0B;//GENERIC_ENDPOINT on Coordinator
//  201 
//  202   //build DoorLock Programming Event Notification
//  203   zclDoorLockProgrammingEventNotification_t pPayload;
//  204   pPayload.programEventSource = programEventSource;
//  205   pPayload.programEventCode = programEventCode;
//  206   pPayload.userID = userID;
//  207   pPayload.pin = batteryLevel; // it is battery level actually
//  208   pPayload.userType = USER_TYPE_UNRESTRICTED_USER;
//  209   pPayload.userStatus = USER_STATUS_AVAILABLE;
//  210   pPayload.zigBeeLocalTime = zigBeeLocalTime;
//  211 
//  212   pPayload.pData = (uint8 *)osal_mem_alloc(1);
//  213   pPayload.pData[0] = 0;
//  214 
//  215   status = zclClosures_SendDoorLockProgrammingEventNotification( DOORLOCK_ENDPOINT,//uint8 srcEP,
//  216                                                                  &dstAddr,//afAddrType_t *dstAddr,
//  217                                                                  &pPayload,//zclDoorLockProgrammingEventNotification_t *pPayload,
//  218                                                                  TRUE,//uint8 disableDefaultRsp,
//  219                                                                  bdb_getZCLFrameCounter());//uint8 seqNum
//  220 
//  221   osal_mem_free( pPayload.pData );
//  222 
//  223   return status;
//  224 }
//  225 
//  226 /******************************************************************************
//  227                                      init
//  228 ******************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  229 void AT_DoorLock_Init(void)
AT_DoorLock_Init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function AT_DoorLock_Init
        CODE
//  230 {
        FUNCALL AT_DoorLock_Init, AT_single_bus_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  231   AT_single_bus_init();
        ; Setup parameters for call to function AT_single_bus_init
        LCALL     `??AT_single_bus_init::?relay`; Banked call to: AT_single_bus_init
//  232 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
//  233 
//  234 /******************************************************************************
//  235                                    downlink
//  236 ******************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  237 ZStatus_t AT_DoorLock_Unlock( zclDoorLock_t *pInCmd )
AT_DoorLock_Unlock:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
        CODE
//  238 {
        FUNCALL AT_DoorLock_Unlock, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Unlock, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Unlock, sum_check
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Unlock, AT_single_bus_send_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Unlock, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Unlock, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Unlock, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  239   uint8 *buf = (uint8 *)osal_mem_alloc( LEN_DOORLOCK_UNLOCK );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x1b
        LCALL     ?Subroutine4 & 0xFFFF
//  240   if(buf == NULL)
??CrossCallReturnLabel_4:
        JNZ       ??AT_DoorLock_Unlock_0
//  241     return ZMemError;
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_19
//  242   else
//  243     osal_memset(buf, 0x00, LEN_DOORLOCK_UNLOCK);
??AT_DoorLock_Unlock_0:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x1b
        LCALL     ?Subroutine8 & 0xFFFF
//  244 
//  245   buf[0] = CMD_DOORLOCK_UNLOCK;
??CrossCallReturnLabel_13:
        MOV       A,#0x1
        LCALL     ?Subroutine7 & 0xFFFF
//  246 
//  247   if(pInCmd->pPinRfidCode[0] == PIN_LEN_NULL)
??CrossCallReturnLabel_11:
        JNZ       ??AT_DoorLock_Unlock_1
//  248   {
//  249     buf[1] |=  CHECK_PIN_Y_N;   // do not check pin
//  250     buf[1] &= ~CHECK_SET_TIME;  // do not check and set time
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        MOVX      @DPTR,A
        SETB      0xE0 /* A   */.2
        MOVX      @DPTR,A
//  251   }
//  252   else if((pInCmd->pPinRfidCode[0] >= PIN_LEN_MIN) && (pInCmd->pPinRfidCode[0] <= PIN_LEN_MAX))
//  253   {
//  254     buf[1] &= ~CHECK_PIN_Y_N;   // check pin
//  255     buf[1] |=  CHECK_PIN_A_U_T; // check administrator/user/temp
//  256     buf[1] &= ~CHECK_SET_TIME;  // do not check and set time
//  257 
//  258     osal_memcpy(&buf[10], &(pInCmd->pPinRfidCode[1]), pInCmd->pPinRfidCode[0]);
//  259   }
//  260   else
//  261   {
//  262     osal_mem_free( buf );
//  263     return ZFailure;
//  264   }
//  265 
//  266   buf[LEN_DOORLOCK_UNLOCK-1] = sum_check(buf, LEN_DOORLOCK_UNLOCK-1);
??AT_DoorLock_Unlock_2:
        ; Setup parameters for call to function sum_check
        MOV       R1,#0x1a
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sum_check::?relay`; Banked call to: sum_check
        MOV       A,R6
        ADD       A,#0x1a
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,R1
        MOVX      @DPTR,A
//  267 
//  268   AT_single_bus_send_buf(buf, LEN_DOORLOCK_UNLOCK);
        ; Setup parameters for call to function AT_single_bus_send_buf
        MOV       R1,#0x1b
        LCALL     ?Subroutine10 & 0xFFFF
//  269 
//  270   osal_mem_free( buf );
//  271 
//  272   return ZSuccess;
??CrossCallReturnLabel_19:
        SJMP      ?Subroutine0
??AT_DoorLock_Unlock_1:
        MOV       A,#-0x6
        ADD       A,R0
        CLR       C
        SUBB      A,#0x7
        JNC       ??AT_DoorLock_Unlock_3
        MOVX      A,@DPTR
        ANL       A,#0xf9
        MOVX      @DPTR,A
        SETB      0xE0 /* A   */.0
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       R1,A
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP      ??AT_DoorLock_Unlock_2
??AT_DoorLock_Unlock_3:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       R1,#0x1
        SJMP      ??CrossCallReturnLabel_19
//  273 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  274 ZStatus_t AT_DoorLock_Lock( zclDoorLock_t *pInCmd )
AT_DoorLock_Lock:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function AT_DoorLock_Lock
        CODE
//  275 {
        FUNCALL AT_DoorLock_Lock, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Lock, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Lock, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Lock, sum_check
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Lock, AT_single_bus_send_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Lock, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Lock, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  276   uint8 *buf = (uint8 *)osal_mem_alloc( LEN_DOORLOCK_LOCK );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x17
        LCALL     ?Subroutine4 & 0xFFFF
//  277   if(buf == NULL)
??CrossCallReturnLabel_5:
        JNZ       ??AT_DoorLock_Lock_0
//  278     return ZMemError;
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_20
//  279   else
//  280     osal_memset(buf, 0x00, LEN_DOORLOCK_LOCK);
??AT_DoorLock_Lock_0:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x17
        LCALL     ?Subroutine8 & 0xFFFF
//  281 
//  282   buf[0] = CMD_DOORLOCK_LOCK;
??CrossCallReturnLabel_14:
        MOV       A,#0x2
        LCALL     ?Subroutine13 & 0xFFFF
//  283 
//  284   if(pInCmd->pPinRfidCode[0] == PIN_LEN_NULL)
??CrossCallReturnLabel_27:
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        JZ        ??AT_DoorLock_Lock_1
//  285   {
//  286     // do nothing
//  287   }
//  288   else if((pInCmd->pPinRfidCode[0] >= PIN_LEN_MIN) && (pInCmd->pPinRfidCode[0] <= PIN_LEN_MAX))
        MOV       A,#-0x6
        ADD       A,R4
        CLR       C
        SUBB      A,#0x7
        JNC       ??AT_DoorLock_Lock_2
//  289   {
//  290     osal_memcpy(&buf[10], &(pInCmd->pPinRfidCode[1]), pInCmd->pPinRfidCode[0]);
        ; Setup parameters for call to function osal_memcpy
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL     ?Subroutine18 & 0xFFFF
//  291   }
??CrossCallReturnLabel_39:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  292   else
//  293   {
//  294     osal_mem_free( buf );
//  295     return ZFailure;
//  296   }
//  297 
//  298   buf[LEN_DOORLOCK_LOCK-1] = sum_check(buf, LEN_DOORLOCK_LOCK-1);
??AT_DoorLock_Lock_1:
        ; Setup parameters for call to function sum_check
        MOV       R1,#0x16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sum_check::?relay`; Banked call to: sum_check
        MOV       A,R6
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,R1
        MOVX      @DPTR,A
//  299 
//  300   AT_single_bus_send_buf(buf, LEN_DOORLOCK_LOCK);
        ; Setup parameters for call to function AT_single_bus_send_buf
        MOV       R1,#0x17
        LCALL     ?Subroutine10 & 0xFFFF
//  301 
//  302   osal_mem_free( buf );
//  303 
//  304   return ZSuccess;
??CrossCallReturnLabel_20:
        SJMP      ?Subroutine0
??AT_DoorLock_Lock_2:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       R1,#0x1
        SJMP      ??CrossCallReturnLabel_20
//  305 }
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function AT_DoorLock_Lock
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_33:
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
          CFI Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function AT_DoorLock_Lock
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_27
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-4
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function AT_DoorLock_Unlock
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_11
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function AT_DoorLock_Lock
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AT_single_bus_send_buf::?relay`; Banked call to: AT_single_bus_send_buf
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function AT_DoorLock_Lock
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function AT_DoorLock_Lock
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
        MOV       A,R2
        ORL       A,R7
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  306 ZStatus_t AT_DoorLock_SetTemporaryPin_Req( zclDoorLockSetTemporaryPin_t *pCmd )
AT_DoorLock_SetTemporaryPin_Req:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function AT_DoorLock_SetTemporaryPin_Req
        CODE
//  307 {
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, sum_check
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, AT_single_bus_send_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SetTemporaryPin_Req, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  308   uint8 *buf = (uint8 *)osal_mem_alloc( LEN_DOORLOCK_SET_TEMPORARY_PIN );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x28
        LCALL     ?Subroutine4 & 0xFFFF
//  309   if(buf == NULL)
??CrossCallReturnLabel_6:
        JNZ       ??AT_DoorLock_SetTemporaryPin_Req_0
//  310     return ZMemError;
        MOV       R1,#0x10
        LJMP      ??CrossCallReturnLabel_21 & 0xFFFF
//  311   else
//  312     osal_memset(buf, 0x00, LEN_DOORLOCK_SET_TEMPORARY_PIN);
??AT_DoorLock_SetTemporaryPin_Req_0:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x28
        LCALL     ?Subroutine8 & 0xFFFF
//  313 
//  314   buf[0] = CMD_DOORLOCK_SET_TEMPORARY_PIN;
??CrossCallReturnLabel_15:
        MOV       A,#0x4
        LCALL     ?Subroutine7 & 0xFFFF
//  315 
//  316   if(pCmd->adminPin[0] == PIN_LEN_NULL)
??CrossCallReturnLabel_12:
        JZ        $+5
        LJMP      ??AT_DoorLock_SetTemporaryPin_Req_1 & 0xFFFF
//  317   {
//  318     buf[1] |=  CHECK_PIN_Y_N;   // do not check admin pin
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.2
        MOVX      @DPTR,A
//  319   }
//  320   else if((pCmd->adminPin[0] >= PIN_LEN_MIN) && (pCmd->adminPin[0] <= PIN_LEN_MAX))
//  321   {
//  322     buf[1] &= ~CHECK_PIN_Y_N;   // check admin pin
//  323 
//  324     osal_memcpy(&buf[10], &(pCmd->adminPin[1]), pCmd->adminPin[0]);
//  325   }
//  326   else
//  327   {
//  328     osal_mem_free( buf );
//  329     return ZFailure;
//  330   }
//  331 
//  332   osal_memcpy(&buf[22], &(pCmd->tempPin[1]), pCmd->tempPin[0]);
??AT_DoorLock_SetTemporaryPin_Req_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x16
        LCALL     ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  333 
//  334   buf[34] = pCmd->activeTimes;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  335 
//  336   buf[35] = BREAK_UINT32( pCmd->activeTime, 3 );
        MOV       A,?V0
        ADD       A,#0x5
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,#0x18
        MOV       R0,#?V0
        LCALL     ?UL_SHR
        MOV       A,R6
        ADD       A,#0x23
        LCALL     ?Subroutine9 & 0xFFFF
//  337   buf[36] = BREAK_UINT32( pCmd->activeTime, 2 );
??CrossCallReturnLabel_16:
        LCALL     ?L_MOV_X
        MOV       A,#0x10
        MOV       R0,#?V0
        LCALL     ?UL_SHR
        MOV       A,R6
        ADD       A,#0x24
        LCALL     ?Subroutine9 & 0xFFFF
//  338   buf[37] = BREAK_UINT32( pCmd->activeTime, 1 );
??CrossCallReturnLabel_17:
        LCALL     ?L_MOV_X
        MOV       A,?V1
        MOV       ?V0,A
        MOV       A,R6
        ADD       A,#0x25
        LCALL     ?Subroutine9 & 0xFFFF
//  339   buf[38] = BREAK_UINT32( pCmd->activeTime, 0 );
??CrossCallReturnLabel_18:
        LCALL     ?L_MOV_X
        MOV       A,R6
        ADD       A,#0x26
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,?V0
        MOVX      @DPTR,A
//  340 
//  341   buf[LEN_DOORLOCK_SET_TEMPORARY_PIN-1] = sum_check(buf, LEN_DOORLOCK_SET_TEMPORARY_PIN-1);
        ; Setup parameters for call to function sum_check
        MOV       R1,#0x27
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sum_check::?relay`; Banked call to: sum_check
        MOV       A,R6
        ADD       A,#0x27
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,R1
        MOVX      @DPTR,A
//  342 
//  343   AT_single_bus_send_buf(buf, LEN_DOORLOCK_SET_TEMPORARY_PIN);
        ; Setup parameters for call to function AT_single_bus_send_buf
        MOV       R1,#0x28
        LCALL     ?Subroutine10 & 0xFFFF
//  344 
//  345   osal_mem_free( buf );
//  346 
//  347   return ZSuccess;
??CrossCallReturnLabel_21:
        LJMP      ?Subroutine1 & 0xFFFF
??AT_DoorLock_SetTemporaryPin_Req_1:
        MOV       A,#-0x6
        ADD       A,R0
        CLR       C
        SUBB      A,#0x7
        JNC       ??AT_DoorLock_SetTemporaryPin_Req_3
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.2
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        LJMP      ??AT_DoorLock_SetTemporaryPin_Req_2 & 0xFFFF
??AT_DoorLock_SetTemporaryPin_Req_3:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       R1,#0x1
        SJMP      ??CrossCallReturnLabel_21
//  348 }
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function AT_DoorLock_SetTemporaryPin_Req
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,?V0
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function AT_DoorLock_Unlock
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R4,A
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function AT_DoorLock_Lock
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function AT_DoorLock_Unlock
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_9
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_10
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0xa
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine21_0:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function AT_DoorLock_SetTemporaryPin_Req
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function AT_DoorLock_Lock
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function AT_DoorLock_Unlock
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_9
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-4
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_10
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function AT_DoorLock_SetTemporaryPin_Req
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function AT_DoorLock_SetTemporaryPin_Req
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
//  349 
//  350 /******************************************************************************
//  351                                    uplink
//  352 ******************************************************************************/
//  353 static ZStatus_t AT_DoorLock_Rsp(uint8 *buf, uint8 len)
//  354 {
//  355   ZStatus_t result = ZFailure;
//  356 
//  357   afAddrType_t dstAddr;
//  358   dstAddr.addr.shortAddr = NWK_PAN_COORD_ADDR;
//  359   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  360   dstAddr.endPoint = 0x0B;
//  361 
//  362   uint8 cmd = 0xFF;
//  363   uint8 status = ZCL_STATUS_FAILURE;
//  364 
//  365   switch(buf[0])
//  366   {
//  367     case CMD_DOORLOCK_UNLOCK:
//  368       cmd = COMMAND_CLOSURES_UNLOCK_DOOR_RSP;
//  369       if(buf[1] == UNLOCK_SUCCESS)
//  370         status = ZCL_STATUS_SUCCESS;
//  371       else
//  372         status = ZCL_STATUS_FAILURE;
//  373       break;
//  374 
//  375     case CMD_DOORLOCK_LOCK:
//  376       cmd = COMMAND_CLOSURES_LOCK_DOOR_RSP;
//  377       status = ZCL_STATUS_SUCCESS;
//  378       break;
//  379 
//  380     case CMD_DOORLOCK_SET_TEMPORARY_PIN:
//  381       cmd = COMMAND_CLOSURES_SET_TEMPORARY_PIN_RSP;
//  382       switch(buf[1])
//  383       {
//  384         case SET_TEMPORARY_PIN_SUCCESS:
//  385           status = ZCL_STATUS_SUCCESS;
//  386           break;
//  387 
//  388         case SET_TEMPORARY_PIN_FAILED:
//  389           status = ZCL_STATUS_FAILURE;
//  390           break;
//  391 
//  392         case SET_TEMPORARY_PIN_SAME_PIN:
//  393           status = ZCL_STATUS_SAME_PIN;
//  394           break;
//  395 
//  396         default:
//  397           status = ZCL_STATUS_FAILURE;
//  398           break;
//  399       }
//  400       break;
//  401 
//  402     default:
//  403       break;
//  404   }
//  405 
//  406   result = zclClosures_SendDoorLockStatusResponse( DOORLOCK_ENDPOINT,
//  407                                                    &dstAddr,
//  408                                                    cmd,
//  409                                                    status,
//  410                                                    TRUE,
//  411                                                    bdb_getZCLFrameCounter() );
//  412 
//  413   printf("AF, AT_DoorLock_Rsp: 0x%02X\r\n", result);
//  414 
//  415   return result;
//  416 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  417 static ZStatus_t AT_DoorLock_Upload(uint8 *buf, uint8 len)
AT_DoorLock_Upload:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
        CODE
//  418 {
        FUNCALL AT_DoorLock_Upload, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, zclClosures_SendDoorLockOperationEventNotification
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_ConvertUTCSecs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, zclClosures_SendDoorLockProgrammingEventNotification
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Upload, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 43
        MOV       A,#-0x2b
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
        MOV       A,R3
        MOV       R5,A
//  419   ZStatus_t result = ZFailure;
        MOV       R7,#0x1
//  420 
//  421   uint8 flag = EVENT_FLAG_UNKNOWN;
        MOV       ?V5,#-0x1
//  422 
//  423   uint16 userID = 0xFFFF;
        MOV       ?V0,#-0x1
        MOV       ?V1,#-0x1
//  424   uint32 zigBeeLocalTime = 0xFFFFFFFF;
        MOV       ?V8,#-0x1
        MOV       ?V9,#-0x1
        MOV       ?V10,#-0x1
        MOV       ?V11,#-0x1
//  425   uint8 batteryLevel = 0xFF;
        MOV       ?V4,#-0x1
//  426 
//  427   uint8 operationEventSource = OPERATION_EVENT_SOURCE_INDETERMINATE;
        MOV       R6,#-0x1
//  428   uint8 operationEventCode = OPERATION_EVENT_CODE_UNKNOWN_OR_MFG_SPECIFIC;
//  429 
//  430   uint8 programEventSource = OPERATION_EVENT_SOURCE_INDETERMINATE;
        MOV       R1,#-0x1
//  431   uint8 programEventCode = PROGRAMMING_EVENT_CODE_UNKNOWN_OR_MFG_SPECIFIC;
        MOV       R0,#0x0
//  432 
//  433   switch(buf[0])
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#-0xa
        JNZ       $+5
        LJMP      ??AT_DoorLock_Upload_0 & 0xFFFF
        ADD       A,#0x3c
        JZ        $+5
        LJMP      ??AT_DoorLock_Upload_1 & 0xFFFF
//  434   {
//  435     case CMD_DOORLOCK_WAKE_UP:
//  436       flag = EVENT_FLAG_OPERATION;
//  437       operationEventCode = OPERATION_EVENT_CODE_WAKE_UP;
        MOV       ?V2,#0x26
//  438       NLME_SetPollRate(DOORLOCK_POLL_RATE_ACTIVE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_12c
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
//  439       osal_start_timerEx(zclDoorLock_TaskID, DOORLOCK_SET_DORMANT_EVT, DOORLOCK_KEEP_ACTIVE_TIME_WAKEUP);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
??AT_DoorLock_Upload_2:
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 69)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  440       break;
//  441 
//  442     case CMD_DOORLOCK_EVT_UPLOAD:
//  443       switch(buf[13])
//  444       {
//  445         case EVT_DOORLOCK_UPLOAD_ADD_USER:
//  446           flag = EVENT_FLAG_PROGRAMMING;
//  447           userID = (buf[15]<<8) | buf[16];
//  448           batteryLevel = buf[10];
//  449           programEventSource = OPERATION_EVENT_SOURCE_KEYPAD;
//  450           programEventCode = AT_DoorLock_GetProgramEventCode_Add_User( buf[14] );
//  451           break;
//  452 
//  453         case EVT_DOORLOCK_UPLOAD_DELETE_USER:
//  454           flag = EVENT_FLAG_PROGRAMMING;
//  455           userID = (buf[15]<<8) | buf[16];
//  456           batteryLevel = buf[10];
//  457           programEventSource = OPERATION_EVENT_SOURCE_KEYPAD;
//  458           programEventCode = AT_DoorLock_GetProgramEventCode_Delete_User( buf[14] );
//  459           break;
//  460 
//  461         case EVT_DOORLOCK_UPLOAD_UNLOCK:
//  462           flag = EVENT_FLAG_OPERATION;
//  463           userID = (buf[15]<<8) | buf[16];
//  464           zigBeeLocalTime = UTCTime_To_SEC( &buf[17] );
//  465           batteryLevel = buf[10];
//  466           operationEventSource = AT_DoorLock_GetOperationEventSource( buf[14] );
//  467           operationEventCode = OPERATION_EVENT_CODE_UNLOCK;
//  468           osal_set_event(zclDoorLock_TaskID, DOORLOCK_REPORT_UNLOCK_EVT);
//  469           break;
//  470 
//  471         case EVT_DOORLOCK_UPLOAD_FORCE_PRY_LOCK:
//  472           flag = EVENT_FLAG_OPERATION;
//  473           batteryLevel = buf[10];
//  474           operationEventCode = OPERATION_EVENT_CODE_FORCE_PRY_LOCK;
//  475           break;
//  476 
//  477         case EVT_DOORLOCK_UPLOAD_ENTER_LOCKED_STATE:
//  478           flag = EVENT_FLAG_OPERATION;
//  479           batteryLevel = buf[10];
//  480           operationEventCode = OPERATION_EVENT_CODE_ENTER_LOCKED_STATE;
//  481           break;
//  482 
//  483         case EVT_DOORLOCK_UPLOAD_LOW_POWER:
//  484           flag = EVENT_FLAG_OPERATION;
//  485           batteryLevel = buf[10];
//  486           operationEventCode = OPERATION_EVENT_CODE_LOW_POWER;
//  487           break;
//  488 
//  489         case EVT_DOORLOCK_UPLOAD_DOORBELL:
//  490           flag = EVENT_FLAG_OPERATION;
//  491           batteryLevel = buf[10];
//  492           operationEventCode = OPERATION_EVENT_CODE_DOORBELL;
//  493           NLME_SetPollRate(DOORLOCK_POLL_RATE_ACTIVE);
//  494           osal_start_timerEx(zclDoorLock_TaskID, DOORLOCK_SET_DORMANT_EVT, DOORLOCK_KEEP_ACTIVE_TIME_DOORBELL);
//  495           break;
//  496 
//  497         case EVT_DOORLOCK_UPLOAD_EXIT_LOCKED_STATE:
//  498           flag = EVENT_FLAG_OPERATION;
//  499           batteryLevel = buf[10];
//  500           operationEventCode = OPERATION_EVENT_CODE_EXIT_LOCKED_STATE;
//  501           break;
//  502 
//  503         default:
//  504           break;
//  505       }
//  506       break;
//  507 
//  508     default:
//  509       break;
//  510   }
//  511 
//  512   if(flag == EVENT_FLAG_OPERATION)
//  513   {
//  514     result = AT_DoorLock_SendOperationEventNotification( userID,
//  515                                                          zigBeeLocalTime,
//  516                                                          batteryLevel,
//  517                                                          operationEventSource,
//  518                                                          operationEventCode );
??AT_DoorLock_Upload_3:
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xb
        MOVX      @DPTR,A
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V2
        MOVX      @DPTR,A
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V4
        MOVX      @DPTR,A
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V8
        LCALL     ?L_MOV_TO_X
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       A,#0x29
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function zclClosures_SendDoorLockOperationEventNotification
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       ?V0,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0xa
        LCALL     ??zclClosures_SendDoorLockOperationEventNotific; Banked call to: zclClosures_SendDoorLockOperationEventNotification
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
        MOV       A,R1
        MOV       R6,A
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x29
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  519 
//  520     printf("AF, EVENT_FLAG_OPERATION: 0x%02X\r\n", result);
//  521   }
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV       R2,#`?<Constant "AF, EVENT_FLAG_OPERAT...">` & 0xff
        MOV       R3,#(`?<Constant "AF, EVENT_FLAG_OPERAT...">` >> 8) & 0xff
??AT_DoorLock_Upload_4:
        LCALL     ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  522   else if(flag == EVENT_FLAG_PROGRAMMING)
//  523   {
//  524     result = AT_DoorLock_SendProgrammingEventNotification( userID,
//  525                                                            zigBeeLocalTime,
//  526                                                            batteryLevel,
//  527                                                            programEventSource,
//  528                                                            programEventCode );
//  529 
//  530     printf("AF, EVENT_FLAG_PROGRAMMING: 0x%02X\r\n", result);
//  531   }
//  532   else
//  533   {
//  534     result = ZFailure;
//  535     printf("AF, EVENT_FLAG_UNKNOWN: 0x%02X\r\n", result);
//  536   }
//  537 
//  538   if(result == ZNwkInvalidRequest)
        MOV       A,#-0x3e
        XRL       A,R7
        JNZ       ??AT_DoorLock_Upload_5
//  539   {
//  540     osal_stop_timerEx(zclATApp_TaskID, ATAPP_END_DEVICE_REJOIN_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#zclATApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  541     osal_set_event(zclATApp_TaskID, ATAPP_END_DEVICE_REJOIN_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#zclATApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  542   }
//  543 
//  544   return result;
??AT_DoorLock_Upload_5:
        MOV       A,R7
        MOV       R1,A
        MOV       A,#0x2b
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 65)
??AT_DoorLock_Upload_0:
        MOV       A,R2
        ADD       A,#0xe
        MOV       ?V12,A
        CLR       A
        ADDC      A,R5
        MOV       ?V13,A
        MOV       A,R2
        ADD       A,#0xa
        MOV       ?V2,A
        CLR       A
        ADDC      A,R5
        MOV       ?V3,A
        MOV       A,R2
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        DEC       A
        JNZ       $+5
        LJMP      ??AT_DoorLock_Upload_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??AT_DoorLock_Upload_7 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??AT_DoorLock_Upload_8 & 0xFFFF
        DEC       A
        JZ        ??AT_DoorLock_Upload_9
        ADD       A,#-0x4
        JZ        ??AT_DoorLock_Upload_10
        DEC       A
        JZ        ??AT_DoorLock_Upload_11
        ADD       A,#-0x4
        JNZ       $+5
        LJMP      ??AT_DoorLock_Upload_12 & 0xFFFF
        ADD       A,#-0x8
        JNZ       $+5
        LJMP      ??AT_DoorLock_Upload_13 & 0xFFFF
        LJMP      ??AT_DoorLock_Upload_1 & 0xFFFF
??AT_DoorLock_Upload_10:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ        ??AT_DoorLock_Upload_14
        DEC       A
        JZ        ??AT_DoorLock_Upload_15
        ADD       A,#-0x2
        JZ        $+5
        LJMP      ??AT_DoorLock_Upload_1 & 0xFFFF
        MOV       R0,#0x5
        LJMP      ??AT_DoorLock_Upload_16 & 0xFFFF
??AT_DoorLock_Upload_15:
        MOV       R0,#0x2
        LJMP      ??AT_DoorLock_Upload_16 & 0xFFFF
??AT_DoorLock_Upload_14:
        MOV       R0,#0x7
        LJMP      ??AT_DoorLock_Upload_16 & 0xFFFF
??AT_DoorLock_Upload_11:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ        ??AT_DoorLock_Upload_17
        DEC       A
        JZ        ??AT_DoorLock_Upload_18
        ADD       A,#-0x2
        JZ        $+5
        LJMP      ??AT_DoorLock_Upload_1 & 0xFFFF
        MOV       R0,#0x6
        LJMP      ??AT_DoorLock_Upload_16 & 0xFFFF
??AT_DoorLock_Upload_18:
        MOV       R0,#0x3
        LJMP      ??AT_DoorLock_Upload_16 & 0xFFFF
??AT_DoorLock_Upload_17:
        MOV       R0,#0x8
        LJMP      ??AT_DoorLock_Upload_16 & 0xFFFF
??AT_DoorLock_Upload_9:
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV       R1,A
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV       A,R1
        MOV       ?V1,A
        MOV       A,R2
        ADD       A,#0x11
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#-0x30
        MOV       R2,A
        CLR       A
        ADDC      A,#0x7
        MOV       R3,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_30:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_32:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_28:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_29:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_ConvertUTCSecs
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V10,R4
        MOV       ?V11,R5
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOVX      A,@DPTR
        DEC       A
        JZ        ??AT_DoorLock_Upload_19
        DEC       A
        JZ        ??AT_DoorLock_Upload_20
        ADD       A,#-0x2
        JZ        ??AT_DoorLock_Upload_21
        ADD       A,#-0x4
        JZ        ??AT_DoorLock_Upload_22
        ADD       A,#-0x18
        JZ        ??AT_DoorLock_Upload_23
        ADD       A,#-0x20
        JZ        ??AT_DoorLock_Upload_24
        ADD       A,#-0x40
        JNZ       ??AT_DoorLock_Upload_25
        MOV       R6,#0x1
        SJMP      ??AT_DoorLock_Upload_25
??AT_DoorLock_Upload_24:
        MOV       R6,#0x6
        SJMP      ??AT_DoorLock_Upload_25
??AT_DoorLock_Upload_23:
        MOV       R6,#0x2
        SJMP      ??AT_DoorLock_Upload_25
??AT_DoorLock_Upload_22:
        MOV       R6,#0x5
        SJMP      ??AT_DoorLock_Upload_25
??AT_DoorLock_Upload_21:
        MOV       R6,#0x3
        SJMP      ??AT_DoorLock_Upload_25
??AT_DoorLock_Upload_20:
        MOV       R6,#0x0
        SJMP      ??AT_DoorLock_Upload_25
??AT_DoorLock_Upload_19:
        MOV       R6,#0x4
??AT_DoorLock_Upload_25:
        MOV       ?V2,#0x2
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#zclDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        LJMP      ??AT_DoorLock_Upload_3 & 0xFFFF
??AT_DoorLock_Upload_6:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       ?V2,#0x21
        LJMP      ??AT_DoorLock_Upload_3 & 0xFFFF
??AT_DoorLock_Upload_7:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       ?V2,#0x22
        LJMP      ??AT_DoorLock_Upload_3 & 0xFFFF
??AT_DoorLock_Upload_8:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       ?V2,#0x23
        LJMP      ??AT_DoorLock_Upload_3 & 0xFFFF
??AT_DoorLock_Upload_12:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       ?V2,#0x24
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_12c
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_4650
        LJMP      ??AT_DoorLock_Upload_2 & 0xFFFF
??AT_DoorLock_Upload_13:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       ?V2,#0x25
        LJMP      ??AT_DoorLock_Upload_3 & 0xFFFF
??AT_DoorLock_Upload_1:
        MOV       A,#0x2
        XRL       A,?V5
        JZ        $+5
        LJMP      ??AT_DoorLock_Upload_26 & 0xFFFF
??AT_DoorLock_Upload_16:
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xb
        MOVX      @DPTR,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V4
        MOVX      @DPTR,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV       R0,A
        ; Setup parameters for call to function zclClosures_SendDoorLockProgrammingEventNotification
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       ?V0,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0xa
        LCALL     ??zclClosures_SendDoorLockProgrammingEventNotif; Banked call to: zclClosures_SendDoorLockProgrammingEventNotification
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
        MOV       A,R1
        MOV       R6,A
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV       R2,#`?<Constant "AF, EVENT_FLAG_PROGRA...">` & 0xff
        MOV       R3,#(`?<Constant "AF, EVENT_FLAG_PROGRA...">` >> 8) & 0xff
        LJMP      ??AT_DoorLock_Upload_4 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 65)
??AT_DoorLock_Upload_26:
        ; Setup parameters for call to function printf
        MOV       ?V0,R7
        MOV       ?V1,R0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV       R2,#`?<Constant "AF, EVENT_FLAG_UNKNOW...">` & 0xff
        MOV       R3,#(`?<Constant "AF, EVENT_FLAG_UNKNOW...">` >> 8) & 0xff
        LCALL     ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
        LJMP      ??AT_DoorLock_Upload_5 & 0xFFFF
//  545 }
          CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function AT_DoorLock_Upload
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function AT_DoorLock_Upload
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function AT_DoorLock_Upload
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function AT_DoorLock_Upload
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function AT_DoorLock_Upload
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       A,R6
        MOV       R7,A
        ; Setup parameters for call to function printf
        ; Setup parameters for call to function printf
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function AT_DoorLock_Upload
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        MOV       ?V5,#0x2
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV       R3,A
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV       A,R3
        MOV       ?V1,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       R1,#0x0
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOVX      A,@DPTR
        DEC       A
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function AT_DoorLock_Upload
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_0
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function AT_DoorLock_Upload
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_1
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        MOV       A,R2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function AT_DoorLock_Upload
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_0
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function AT_DoorLock_Upload
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_1
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        MOV       A,R2
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72
//  546 static ZStatus_t AT_DoorLock_Ack(uint8 *buf, uint8 len)
//  547 {
//  548   uint8 ackBuf[2] = {0xE0, 0x1F};
//  549 
//  550   AT_single_bus_send_buf(ackBuf, 2);
//  551 
//  552   return ZSuccess;
//  553 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  554 ZStatus_t AT_DoorLock_Handle_Rsp(uint8 *buf, uint8 len)
AT_DoorLock_Handle_Rsp:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function AT_DoorLock_Handle_Rsp
        CODE
//  555 {
        FUNCALL AT_DoorLock_Handle_Rsp, sum_check
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, AT_DoorLock_Upload
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, AT_single_bus_send_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_Handle_Rsp, bdb_resetLocalAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 14
        MOV       A,#-0xe
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V6,R1
//  556   ZStatus_t status = ZSuccess;
        MOV       ?V2,#0x0
//  557   uint8 i;
//  558 
//  559   if(sum_check(buf, len-1) == buf[len-1])
        ; Setup parameters for call to function sum_check
        DEC       R1
        LCALL     `??sum_check::?relay`; Banked call to: sum_check
        MOV       A,R1
        MOV       R2,A
        MOV       ?V0,#`?<Constant "%02X ">` & 0xff
        MOV       ?V1,#(`?<Constant "%02X ">` >> 8) & 0xff
        MOV       A,?V6
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,R6
        ADD       A,?V4
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x1
        MOV       DPL,A
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        MOV       R0,#?V4
        JZ        $+5
        LJMP      ??AT_DoorLock_Handle_Rsp_0 & 0xFFFF
//  560   {
//  561     printf("| up |right|%02d bytes|: ", len);
        ; Setup parameters for call to function printf
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R2,#`?<Constant "| up |right|%02d byte...">` & 0xff
        MOV       R3,#(`?<Constant "| up |right|%02d byte...">` >> 8) & 0xff
        LCALL     ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
//  562     for(i=0; i<len; i++)
        MOV       ?V3,#0x0
        SJMP      ??AT_DoorLock_Handle_Rsp_1
//  563     {
//  564       printf("%02X ", buf[i]);
??AT_DoorLock_Handle_Rsp_2:
        ; Setup parameters for call to function printf
        LCALL     ?Subroutine12 & 0xFFFF
//  565     }
??CrossCallReturnLabel_24:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        INC       ?V3
??AT_DoorLock_Handle_Rsp_1:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V6
        JC        ??AT_DoorLock_Handle_Rsp_2
//  566     printf("\r\n");
        ; Setup parameters for call to function printf
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
//  567   }
//  568   else
//  569   {
//  570     printf("\r\n| up |error|%02d bytes|: ", len);
//  571     for(i=0; i<len; i++)
//  572     {
//  573       printf("%02X ", buf[i]);
//  574     }
//  575     printf("\r\n\r\n");
//  576     status = ZFailure;
//  577   }
//  578 
//  579   if(status == ZFailure)
//  580     return status;
//  581 
//  582   switch(buf[0])
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        DEC       A
        JZ        ??AT_DoorLock_Handle_Rsp_3
        DEC       A
        JZ        ??AT_DoorLock_Handle_Rsp_3
        ADD       A,#-0x2
        JZ        ??AT_DoorLock_Handle_Rsp_3
        ADD       A,#-0x6
        JNZ       $+5
        LJMP      ??AT_DoorLock_Handle_Rsp_4 & 0xFFFF
        ADD       A,#0x4a
        JNZ       $+5
        LJMP      ??AT_DoorLock_Handle_Rsp_5 & 0xFFFF
        ADD       A,#-0xe
        JNZ       $+5
        LJMP      ??AT_DoorLock_Handle_Rsp_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??AT_DoorLock_Handle_Rsp_6 & 0xFFFF
        ADD       A,#-0x11
        JNZ       $+5
        LJMP      ??AT_DoorLock_Handle_Rsp_7 & 0xFFFF
        LJMP      ??AT_DoorLock_Handle_Rsp_8 & 0xFFFF
//  583   {
//  584     case CMD_DOORLOCK_UNLOCK:
//  585     case CMD_DOORLOCK_LOCK:
//  586     case CMD_DOORLOCK_SET_TEMPORARY_PIN:
//  587       status = AT_DoorLock_Rsp( buf, len );
??AT_DoorLock_Handle_Rsp_3:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xb
        MOVX      @DPTR,A
        MOV       ?V0,#-0x1
        MOV       ?V1,#0x1
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        DEC       A
        JZ        ??AT_DoorLock_Handle_Rsp_9
        DEC       A
        JZ        ??AT_DoorLock_Handle_Rsp_10
        ADD       A,#-0x2
        JNZ       ??AT_DoorLock_Handle_Rsp_11
        MOV       ?V0,#0x1a
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??AT_DoorLock_Handle_Rsp_12
        ADD       A,#-0x6
        JNZ       ??AT_DoorLock_Handle_Rsp_11
        MOV       ?V1,#-0x20
        SJMP      ??AT_DoorLock_Handle_Rsp_11
??AT_DoorLock_Handle_Rsp_0:
        ; Setup parameters for call to function printf
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R2,#`?<Constant "\\r\\n| up |error|%02d by...">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n| up |error|%02d by...">` >> 8) & 0xff
        LCALL     ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V3,#0x0
        SJMP      ??AT_DoorLock_Handle_Rsp_13
??AT_DoorLock_Handle_Rsp_14:
        ; Setup parameters for call to function printf
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        INC       ?V3
??AT_DoorLock_Handle_Rsp_13:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V6
        JC        ??AT_DoorLock_Handle_Rsp_14
        ; Setup parameters for call to function printf
        MOV       R2,#`?<Constant "\\r\\n\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n\\r\\n">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       ?V2,#0x1
        LJMP      ??AT_DoorLock_Handle_Rsp_8 & 0xFFFF
??AT_DoorLock_Handle_Rsp_10:
        MOV       ?V0,#0x0
        SJMP      ??AT_DoorLock_Handle_Rsp_12
??AT_DoorLock_Handle_Rsp_9:
        MOV       ?V0,#0x1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??AT_DoorLock_Handle_Rsp_11
??AT_DoorLock_Handle_Rsp_12:
        MOV       ?V1,#0x0
??AT_DoorLock_Handle_Rsp_11:
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R5,?V1
        MOV       R4,?V0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0xa
        LCALL     `??zclClosures_SendDoorLockStatusResponse::?rela`; Banked call to: zclClosures_SendDoorLockStatusResponse
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,R1
        MOV       R6,A
        ; Setup parameters for call to function printf
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R2,#`?<Constant "AF, AT_DoorLock_Rsp: ...">` & 0xff
        MOV       R3,#(`?<Constant "AF, AT_DoorLock_Rsp: ...">` >> 8) & 0xff
        LCALL     ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V2,R6
//  588       break;
        SJMP      ??AT_DoorLock_Handle_Rsp_8
//  589 
//  590     case CMD_DOORLOCK_EVT_UPLOAD:
//  591     case CMD_DOORLOCK_WAKE_UP:
//  592       status = AT_DoorLock_Upload( buf, len );
??AT_DoorLock_Handle_Rsp_4:
        ; Setup parameters for call to function AT_DoorLock_Upload
        MOV       R1,?V6
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AT_DoorLock_Upload::?relay`; Banked call to: AT_DoorLock_Upload
        MOV       A,R1
        MOV       ?V2,A
//  593       break;
        SJMP      ??AT_DoorLock_Handle_Rsp_8
//  594 
//  595     case CMD_DOORLOCK_KEY_SHORT_PRESS:
//  596       bdb_resetLocalAction(); // factory new
//  597       break;
//  598 
//  599     case CMD_DOORLOCK_RESET_TO_FACT_NEW:
//  600       break;
//  601 
//  602     case CMD_DOORLOCK_MATCH:
//  603       status = AT_DoorLock_Ack( buf, len );
??AT_DoorLock_Handle_Rsp_6:
        MOV       DPTR,#`?<Constant {224, 31}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function AT_single_bus_send_buf
        MOV       R1,#0x2
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AT_single_bus_send_buf::?relay`; Banked call to: AT_single_bus_send_buf
//  604       break;
        SJMP      ??AT_DoorLock_Handle_Rsp_8
//  605 
//  606     case CMD_DOORLOCK_RESET_TO_FACT_NEW_ALL:
//  607       if((len==4) && (buf[3]==0x1F))
??AT_DoorLock_Handle_Rsp_7:
        MOV       A,#0x4
        XRL       A,?V6
        JNZ       ??AT_DoorLock_Handle_Rsp_8
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1f
        JNZ       ??AT_DoorLock_Handle_Rsp_8
//  608         bdb_resetLocalAction();//factory new
??AT_DoorLock_Handle_Rsp_5:
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
//  609       break;
//  610 
//  611     default:
//  612       break;
//  613   }
//  614 
//  615   return status;
??AT_DoorLock_Handle_Rsp_8:
        MOV       R1,?V2
        MOV       A,#0xe
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock73
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  616 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function AT_DoorLock_Handle_Rsp
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function AT_DoorLock_Handle_Rsp
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV       R2,?V0
        MOV       R3,?V1
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine22_0:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function AT_DoorLock_Upload
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 67)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function AT_DoorLock_Upload
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 67)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function AT_DoorLock_Handle_Rsp
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function AT_DoorLock_Handle_Rsp
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function AT_DoorLock_Handle_Rsp
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function AT_DoorLock_Handle_Rsp
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function AT_DoorLock_Handle_Rsp
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function AT_DoorLock_Handle_Rsp
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function AT_DoorLock_Handle_Rsp
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        MOV       R0,?V3
        MOV       A,R6
        ADD       A,R0
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??sum_check::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sum_check

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_DoorLock_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_DoorLock_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_DoorLock_Unlock::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_DoorLock_Unlock

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_DoorLock_Lock::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_DoorLock_Lock

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_DoorLock_SetTemporaryPin_Req::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_DoorLock_SetTemporaryPin_Req

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_DoorLock_Upload::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_DoorLock_Upload

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_DoorLock_Handle_Rsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_DoorLock_Handle_Rsp

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AF, AT_DoorLock_Rsp: ...">`:
        DB "AF, AT_DoorLock_Rsp: 0x%02X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AF, EVENT_FLAG_OPERAT...">`:
        DB "AF, EVENT_FLAG_OPERATION: 0x%02X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AF, EVENT_FLAG_PROGRA...">`:
        DB "AF, EVENT_FLAG_PROGRAMMING: 0x%02X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AF, EVENT_FLAG_UNKNOW...">`:
        DB "AF, EVENT_FLAG_UNKNOWN: 0x%02X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {224, 31}>`:
        DATA8
        DB 224
        DB 31

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "| up |right|%02d byte...">`:
        DB "| up |right|%02d bytes|: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%02X ">`:
        DB "%02X "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n| up |error|%02d by...">`:
        DB "\015\012| up |error|%02d bytes|: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n\\r\\n">`:
        DB "\015\012\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_12c:
        DD 300

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a98:
        DD 15000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4650:
        DD 18000

        END
// 
// 2 138 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//   217 bytes in segment XDATA_ROM_C
// 
//    42 bytes of CODE     memory
//   205 bytes of CONST    memory (+ 12 bytes shared)
// 2 138 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
